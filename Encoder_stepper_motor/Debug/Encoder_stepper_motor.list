
Encoder_stepper_motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9ac  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000580  0800ab80  0800ab80  0001ab80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b100  0800b100  00020234  2**0
                  CONTENTS
  4 .ARM          00000008  0800b100  0800b100  0001b100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b108  0800b108  00020234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b108  0800b108  0001b108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b10c  0800b10c  0001b10c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  0800b110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  20000234  0800b344  00020234  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000500  0800b344  00020500  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY
 12 .debug_info   000141d2  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c45  00000000  00000000  00034436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001110  00000000  00000000  00037080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001010  00000000  00000000  00038190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000245d0  00000000  00000000  000391a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014f2f  00000000  00000000  0005d770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4f0e  00000000  00000000  0007269f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001475ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d2c  00000000  00000000  00147600  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000234 	.word	0x20000234
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ab64 	.word	0x0800ab64

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000238 	.word	0x20000238
 800020c:	0800ab64 	.word	0x0800ab64

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9aa 	b.w	8001054 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	468e      	mov	lr, r1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d14d      	bne.n	8000e2e <__udivmoddi4+0xaa>
 8000d92:	428a      	cmp	r2, r1
 8000d94:	4694      	mov	ip, r2
 8000d96:	d969      	bls.n	8000e6c <__udivmoddi4+0xe8>
 8000d98:	fab2 f282 	clz	r2, r2
 8000d9c:	b152      	cbz	r2, 8000db4 <__udivmoddi4+0x30>
 8000d9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000da2:	f1c2 0120 	rsb	r1, r2, #32
 8000da6:	fa20 f101 	lsr.w	r1, r0, r1
 8000daa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dae:	ea41 0e03 	orr.w	lr, r1, r3
 8000db2:	4094      	lsls	r4, r2
 8000db4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db8:	0c21      	lsrs	r1, r4, #16
 8000dba:	fbbe f6f8 	udiv	r6, lr, r8
 8000dbe:	fa1f f78c 	uxth.w	r7, ip
 8000dc2:	fb08 e316 	mls	r3, r8, r6, lr
 8000dc6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dca:	fb06 f107 	mul.w	r1, r6, r7
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x64>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dda:	f080 811f 	bcs.w	800101c <__udivmoddi4+0x298>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 811c 	bls.w	800101c <__udivmoddi4+0x298>
 8000de4:	3e02      	subs	r6, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a5b      	subs	r3, r3, r1
 8000dea:	b2a4      	uxth	r4, r4
 8000dec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df0:	fb08 3310 	mls	r3, r8, r0, r3
 8000df4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df8:	fb00 f707 	mul.w	r7, r0, r7
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	d90a      	bls.n	8000e16 <__udivmoddi4+0x92>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e08:	f080 810a 	bcs.w	8001020 <__udivmoddi4+0x29c>
 8000e0c:	42a7      	cmp	r7, r4
 8000e0e:	f240 8107 	bls.w	8001020 <__udivmoddi4+0x29c>
 8000e12:	4464      	add	r4, ip
 8000e14:	3802      	subs	r0, #2
 8000e16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e1a:	1be4      	subs	r4, r4, r7
 8000e1c:	2600      	movs	r6, #0
 8000e1e:	b11d      	cbz	r5, 8000e28 <__udivmoddi4+0xa4>
 8000e20:	40d4      	lsrs	r4, r2
 8000e22:	2300      	movs	r3, #0
 8000e24:	e9c5 4300 	strd	r4, r3, [r5]
 8000e28:	4631      	mov	r1, r6
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d909      	bls.n	8000e46 <__udivmoddi4+0xc2>
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	f000 80ef 	beq.w	8001016 <__udivmoddi4+0x292>
 8000e38:	2600      	movs	r6, #0
 8000e3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e3e:	4630      	mov	r0, r6
 8000e40:	4631      	mov	r1, r6
 8000e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e46:	fab3 f683 	clz	r6, r3
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	d14a      	bne.n	8000ee4 <__udivmoddi4+0x160>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d302      	bcc.n	8000e58 <__udivmoddi4+0xd4>
 8000e52:	4282      	cmp	r2, r0
 8000e54:	f200 80f9 	bhi.w	800104a <__udivmoddi4+0x2c6>
 8000e58:	1a84      	subs	r4, r0, r2
 8000e5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e5e:	2001      	movs	r0, #1
 8000e60:	469e      	mov	lr, r3
 8000e62:	2d00      	cmp	r5, #0
 8000e64:	d0e0      	beq.n	8000e28 <__udivmoddi4+0xa4>
 8000e66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e6a:	e7dd      	b.n	8000e28 <__udivmoddi4+0xa4>
 8000e6c:	b902      	cbnz	r2, 8000e70 <__udivmoddi4+0xec>
 8000e6e:	deff      	udf	#255	; 0xff
 8000e70:	fab2 f282 	clz	r2, r2
 8000e74:	2a00      	cmp	r2, #0
 8000e76:	f040 8092 	bne.w	8000f9e <__udivmoddi4+0x21a>
 8000e7a:	eba1 010c 	sub.w	r1, r1, ip
 8000e7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	2601      	movs	r6, #1
 8000e88:	0c20      	lsrs	r0, r4, #16
 8000e8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e96:	fb0e f003 	mul.w	r0, lr, r3
 8000e9a:	4288      	cmp	r0, r1
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x12c>
 8000e9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x12a>
 8000ea8:	4288      	cmp	r0, r1
 8000eaa:	f200 80cb 	bhi.w	8001044 <__udivmoddi4+0x2c0>
 8000eae:	4643      	mov	r3, r8
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000ebc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ec0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ec4:	45a6      	cmp	lr, r4
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x156>
 8000ec8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ecc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ed0:	d202      	bcs.n	8000ed8 <__udivmoddi4+0x154>
 8000ed2:	45a6      	cmp	lr, r4
 8000ed4:	f200 80bb 	bhi.w	800104e <__udivmoddi4+0x2ca>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	eba4 040e 	sub.w	r4, r4, lr
 8000ede:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ee2:	e79c      	b.n	8000e1e <__udivmoddi4+0x9a>
 8000ee4:	f1c6 0720 	rsb	r7, r6, #32
 8000ee8:	40b3      	lsls	r3, r6
 8000eea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ef2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ef6:	fa01 f306 	lsl.w	r3, r1, r6
 8000efa:	431c      	orrs	r4, r3
 8000efc:	40f9      	lsrs	r1, r7
 8000efe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f02:	fa00 f306 	lsl.w	r3, r0, r6
 8000f06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f0a:	0c20      	lsrs	r0, r4, #16
 8000f0c:	fa1f fe8c 	uxth.w	lr, ip
 8000f10:	fb09 1118 	mls	r1, r9, r8, r1
 8000f14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f18:	fb08 f00e 	mul.w	r0, r8, lr
 8000f1c:	4288      	cmp	r0, r1
 8000f1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f22:	d90b      	bls.n	8000f3c <__udivmoddi4+0x1b8>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f2c:	f080 8088 	bcs.w	8001040 <__udivmoddi4+0x2bc>
 8000f30:	4288      	cmp	r0, r1
 8000f32:	f240 8085 	bls.w	8001040 <__udivmoddi4+0x2bc>
 8000f36:	f1a8 0802 	sub.w	r8, r8, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	1a09      	subs	r1, r1, r0
 8000f3e:	b2a4      	uxth	r4, r4
 8000f40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f44:	fb09 1110 	mls	r1, r9, r0, r1
 8000f48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f50:	458e      	cmp	lr, r1
 8000f52:	d908      	bls.n	8000f66 <__udivmoddi4+0x1e2>
 8000f54:	eb1c 0101 	adds.w	r1, ip, r1
 8000f58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f5c:	d26c      	bcs.n	8001038 <__udivmoddi4+0x2b4>
 8000f5e:	458e      	cmp	lr, r1
 8000f60:	d96a      	bls.n	8001038 <__udivmoddi4+0x2b4>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4461      	add	r1, ip
 8000f66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f6e:	eba1 010e 	sub.w	r1, r1, lr
 8000f72:	42a1      	cmp	r1, r4
 8000f74:	46c8      	mov	r8, r9
 8000f76:	46a6      	mov	lr, r4
 8000f78:	d356      	bcc.n	8001028 <__udivmoddi4+0x2a4>
 8000f7a:	d053      	beq.n	8001024 <__udivmoddi4+0x2a0>
 8000f7c:	b15d      	cbz	r5, 8000f96 <__udivmoddi4+0x212>
 8000f7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f82:	eb61 010e 	sbc.w	r1, r1, lr
 8000f86:	fa01 f707 	lsl.w	r7, r1, r7
 8000f8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f8e:	40f1      	lsrs	r1, r6
 8000f90:	431f      	orrs	r7, r3
 8000f92:	e9c5 7100 	strd	r7, r1, [r5]
 8000f96:	2600      	movs	r6, #0
 8000f98:	4631      	mov	r1, r6
 8000f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f9e:	f1c2 0320 	rsb	r3, r2, #32
 8000fa2:	40d8      	lsrs	r0, r3
 8000fa4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fa8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fac:	4091      	lsls	r1, r2
 8000fae:	4301      	orrs	r1, r0
 8000fb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fb4:	fa1f fe8c 	uxth.w	lr, ip
 8000fb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000fc0:	0c0b      	lsrs	r3, r1, #16
 8000fc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fca:	429e      	cmp	r6, r3
 8000fcc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fd0:	d908      	bls.n	8000fe4 <__udivmoddi4+0x260>
 8000fd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fda:	d22f      	bcs.n	800103c <__udivmoddi4+0x2b8>
 8000fdc:	429e      	cmp	r6, r3
 8000fde:	d92d      	bls.n	800103c <__udivmoddi4+0x2b8>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	4463      	add	r3, ip
 8000fe4:	1b9b      	subs	r3, r3, r6
 8000fe6:	b289      	uxth	r1, r1
 8000fe8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fec:	fb07 3316 	mls	r3, r7, r6, r3
 8000ff0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ff4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ff8:	428b      	cmp	r3, r1
 8000ffa:	d908      	bls.n	800100e <__udivmoddi4+0x28a>
 8000ffc:	eb1c 0101 	adds.w	r1, ip, r1
 8001000:	f106 38ff 	add.w	r8, r6, #4294967295
 8001004:	d216      	bcs.n	8001034 <__udivmoddi4+0x2b0>
 8001006:	428b      	cmp	r3, r1
 8001008:	d914      	bls.n	8001034 <__udivmoddi4+0x2b0>
 800100a:	3e02      	subs	r6, #2
 800100c:	4461      	add	r1, ip
 800100e:	1ac9      	subs	r1, r1, r3
 8001010:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001014:	e738      	b.n	8000e88 <__udivmoddi4+0x104>
 8001016:	462e      	mov	r6, r5
 8001018:	4628      	mov	r0, r5
 800101a:	e705      	b.n	8000e28 <__udivmoddi4+0xa4>
 800101c:	4606      	mov	r6, r0
 800101e:	e6e3      	b.n	8000de8 <__udivmoddi4+0x64>
 8001020:	4618      	mov	r0, r3
 8001022:	e6f8      	b.n	8000e16 <__udivmoddi4+0x92>
 8001024:	454b      	cmp	r3, r9
 8001026:	d2a9      	bcs.n	8000f7c <__udivmoddi4+0x1f8>
 8001028:	ebb9 0802 	subs.w	r8, r9, r2
 800102c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001030:	3801      	subs	r0, #1
 8001032:	e7a3      	b.n	8000f7c <__udivmoddi4+0x1f8>
 8001034:	4646      	mov	r6, r8
 8001036:	e7ea      	b.n	800100e <__udivmoddi4+0x28a>
 8001038:	4620      	mov	r0, r4
 800103a:	e794      	b.n	8000f66 <__udivmoddi4+0x1e2>
 800103c:	4640      	mov	r0, r8
 800103e:	e7d1      	b.n	8000fe4 <__udivmoddi4+0x260>
 8001040:	46d0      	mov	r8, sl
 8001042:	e77b      	b.n	8000f3c <__udivmoddi4+0x1b8>
 8001044:	3b02      	subs	r3, #2
 8001046:	4461      	add	r1, ip
 8001048:	e732      	b.n	8000eb0 <__udivmoddi4+0x12c>
 800104a:	4630      	mov	r0, r6
 800104c:	e709      	b.n	8000e62 <__udivmoddi4+0xde>
 800104e:	4464      	add	r4, ip
 8001050:	3802      	subs	r0, #2
 8001052:	e742      	b.n	8000eda <__udivmoddi4+0x156>

08001054 <__aeabi_idiv0>:
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop

08001058 <Setup_Absolute_position>:
 */

#include "GCode_helper.h"


void Setup_Absolute_position(char *tokens[] ){
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]

	if((*tokens[1]) == 'Z'){
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3304      	adds	r3, #4
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b5a      	cmp	r3, #90	; 0x5a
 800106a:	d13a      	bne.n	80010e2 <Setup_Absolute_position+0x8a>
	// Z directional motor
//	char *p;
	float steps =strtod(tokens[1]+1,NULL);  // strtol(tokens[1]+1, &p, 10);  //number start from next position of string
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3304      	adds	r3, #4
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	3301      	adds	r3, #1
 8001074:	2100      	movs	r1, #0
 8001076:	4618      	mov	r0, r3
 8001078:	f006 fd08 	bl	8007a8c <strtod>
 800107c:	ec53 2b10 	vmov	r2, r3, d0
 8001080:	4610      	mov	r0, r2
 8001082:	4619      	mov	r1, r3
 8001084:	f7ff fde0 	bl	8000c48 <__aeabi_d2f>
 8001088:	4603      	mov	r3, r0
 800108a:	617b      	str	r3, [r7, #20]

	/* Z motor Positioning */
//	_targetPos = __HAL_TIM_GET_COUNTER(&htim2);
	_currentPos = __HAL_TIM_GET_COUNTER(&htim2);
 800108c:	4b16      	ldr	r3, [pc, #88]	; (80010e8 <Setup_Absolute_position+0x90>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001092:	461a      	mov	r2, r3
 8001094:	4b15      	ldr	r3, [pc, #84]	; (80010ec <Setup_Absolute_position+0x94>)
 8001096:	601a      	str	r2, [r3, #0]
	int32_t total_steps = (int32_t) (steps * steps_per_millimeters);
 8001098:	edd7 7a05 	vldr	s15, [r7, #20]
 800109c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010a0:	ee17 3a90 	vmov	r3, s15
 80010a4:	613b      	str	r3, [r7, #16]
	moveTo(total_steps);
 80010a6:	6938      	ldr	r0, [r7, #16]
 80010a8:	f001 f8ce 	bl	8002248 <moveTo>



	if(*tokens[2] == 'F'){
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3308      	adds	r3, #8
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b46      	cmp	r3, #70	; 0x46
 80010b6:	d113      	bne.n	80010e0 <Setup_Absolute_position+0x88>
	/* F speed controller */
	float speed = strtod(tokens[2]+1,NULL);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3308      	adds	r3, #8
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	3301      	adds	r3, #1
 80010c0:	2100      	movs	r1, #0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f006 fce2 	bl	8007a8c <strtod>
 80010c8:	ec53 2b10 	vmov	r2, r3, d0
 80010cc:	4610      	mov	r0, r2
 80010ce:	4619      	mov	r1, r3
 80010d0:	f7ff fdba 	bl	8000c48 <__aeabi_d2f>
 80010d4:	4603      	mov	r3, r0
 80010d6:	60fb      	str	r3, [r7, #12]
	speed = speed * steps_per_millimeters;
	/*Fan Speed controlling */
	setMaxSpeed(speed);
 80010d8:	ed97 0a03 	vldr	s0, [r7, #12]
 80010dc:	f001 fb6e 	bl	80027bc <setMaxSpeed>

	}
	return;
 80010e0:	bf00      	nop
	}


}
 80010e2:	3718      	adds	r7, #24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000334 	.word	0x20000334
 80010ec:	200004b4 	.word	0x200004b4

080010f0 <Setup_Relative_position>:


void Setup_Relative_position(char *tokens[] ){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]

	if((*tokens[1]) == 'Z'){
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3304      	adds	r3, #4
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b5a      	cmp	r3, #90	; 0x5a
 8001102:	d134      	bne.n	800116e <Setup_Relative_position+0x7e>
	// Z directional motor
//	char *p;
	float steps =strtod(tokens[1]+1,NULL);  // strtol(tokens[1]+1, &p, 10);  //number start from next position of string
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3304      	adds	r3, #4
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	3301      	adds	r3, #1
 800110c:	2100      	movs	r1, #0
 800110e:	4618      	mov	r0, r3
 8001110:	f006 fcbc 	bl	8007a8c <strtod>
 8001114:	ec53 2b10 	vmov	r2, r3, d0
 8001118:	4610      	mov	r0, r2
 800111a:	4619      	mov	r1, r3
 800111c:	f7ff fd94 	bl	8000c48 <__aeabi_d2f>
 8001120:	4603      	mov	r3, r0
 8001122:	617b      	str	r3, [r7, #20]

	/* Z motor Positioning */
	int32_t total_steps = (int32_t) (steps * steps_per_millimeters);
 8001124:	edd7 7a05 	vldr	s15, [r7, #20]
 8001128:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800112c:	ee17 3a90 	vmov	r3, s15
 8001130:	613b      	str	r3, [r7, #16]
	move(total_steps);
 8001132:	6938      	ldr	r0, [r7, #16]
 8001134:	f001 f8b0 	bl	8002298 <move>

	if(*tokens[2] == 'F'){
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3308      	adds	r3, #8
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b46      	cmp	r3, #70	; 0x46
 8001142:	d114      	bne.n	800116e <Setup_Relative_position+0x7e>
	/* F speed controller */
	float speed = strtod(tokens[2]+1,NULL);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3308      	adds	r3, #8
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	3301      	adds	r3, #1
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f006 fc9c 	bl	8007a8c <strtod>
 8001154:	ec53 2b10 	vmov	r2, r3, d0
 8001158:	4610      	mov	r0, r2
 800115a:	4619      	mov	r1, r3
 800115c:	f7ff fd74 	bl	8000c48 <__aeabi_d2f>
 8001160:	4603      	mov	r3, r0
 8001162:	60fb      	str	r3, [r7, #12]
	speed = speed * steps_per_millimeters;

	/*Fan Speed controlling */
	setMaxSpeed(speed);
 8001164:	ed97 0a03 	vldr	s0, [r7, #12]
 8001168:	f001 fb28 	bl	80027bc <setMaxSpeed>

	}
}
	return;
 800116c:	bf00      	nop
 800116e:	bf00      	nop
}
 8001170:	3718      	adds	r7, #24
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
	...

08001178 <Homing_motor>:

void Homing_motor(char *tokens[] ){
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	setMaxSpeed(2*home_speed); //MOVING IN ccw
 8001180:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <Homing_motor+0x50>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	ee07 3a90 	vmov	s15, r3
 800118a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800118e:	eeb0 0a67 	vmov.f32	s0, s15
 8001192:	f001 fb13 	bl	80027bc <setMaxSpeed>
	setSpeed(-1*home_speed); //MOVING IN ccw
 8001196:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <Homing_motor+0x50>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	425b      	negs	r3, r3
 800119c:	ee07 3a90 	vmov	s15, r3
 80011a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011a4:	eeb0 0a67 	vmov.f32	s0, s15
 80011a8:	f001 fbee 	bl	8002988 <setSpeed>


	while(!HOMED){
 80011ac:	e001      	b.n	80011b2 <Homing_motor+0x3a>
	runSpeed();
 80011ae:	f001 f921 	bl	80023f4 <runSpeed>
	while(!HOMED){
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <Homing_motor+0x54>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d0f9      	beq.n	80011ae <Homing_motor+0x36>
	}
	setCurrentPosition(0);
 80011ba:	2000      	movs	r0, #0
 80011bc:	f001 f966 	bl	800248c <setCurrentPosition>
	return;
 80011c0:	bf00      	nop
}
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	2000004c 	.word	0x2000004c
 80011cc:	20000491 	.word	0x20000491

080011d0 <Homing_completion>:

void Homing_completion(void){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
	//resetting position parameters
	setCurrentPosition(0);
 80011d4:	2000      	movs	r0, #0
 80011d6:	f001 f959 	bl	800248c <setCurrentPosition>
	stop();
 80011da:	f001 fce7 	bl	8002bac <stop>
	//Resetting the encoder value to zero
	__HAL_TIM_SET_COUNTER(&htim2,0);
 80011de:	4b03      	ldr	r3, [pc, #12]	; (80011ec <Homing_completion+0x1c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2200      	movs	r2, #0
 80011e4:	625a      	str	r2, [r3, #36]	; 0x24
	return;
 80011e6:	bf00      	nop
}
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000334 	.word	0x20000334

080011f0 <Run_Motor>:

void Run_Motor(void){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
	runToPosition();
 80011f4:	f001 fcce 	bl	8002b94 <runToPosition>
	return;
 80011f8:	bf00      	nop
}
 80011fa:	bd80      	pop	{r7, pc}

080011fc <dectoint>:
 * Convert binary values contaning arry to decimal values
 * Params:
 * y_1 =
 */
void dectoint(char *y_1, char *y_2)
{
 80011fc:	b5b0      	push	{r4, r5, r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
	*y_1 = ((arr1[0]*pow(2,7))+(arr1[1]*pow(2,6))+(arr1[2]*pow(2,5))+(arr1[3]*pow(2,4))+(arr1[4]*pow(2,3))+(arr1[5]*pow(2,2))+(arr1[6]*pow(2,1))+(arr1[7]*pow(2,0)));
 8001206:	4b9c      	ldr	r3, [pc, #624]	; (8001478 <dectoint+0x27c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff f9ba 	bl	8000584 <__aeabi_i2d>
 8001210:	f04f 0200 	mov.w	r2, #0
 8001214:	4b99      	ldr	r3, [pc, #612]	; (800147c <dectoint+0x280>)
 8001216:	f7ff fa1f 	bl	8000658 <__aeabi_dmul>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	4614      	mov	r4, r2
 8001220:	461d      	mov	r5, r3
 8001222:	4b95      	ldr	r3, [pc, #596]	; (8001478 <dectoint+0x27c>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff f9ac 	bl	8000584 <__aeabi_i2d>
 800122c:	f04f 0200 	mov.w	r2, #0
 8001230:	4b93      	ldr	r3, [pc, #588]	; (8001480 <dectoint+0x284>)
 8001232:	f7ff fa11 	bl	8000658 <__aeabi_dmul>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	4620      	mov	r0, r4
 800123c:	4629      	mov	r1, r5
 800123e:	f7ff f855 	bl	80002ec <__adddf3>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4614      	mov	r4, r2
 8001248:	461d      	mov	r5, r3
 800124a:	4b8b      	ldr	r3, [pc, #556]	; (8001478 <dectoint+0x27c>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff f998 	bl	8000584 <__aeabi_i2d>
 8001254:	f04f 0200 	mov.w	r2, #0
 8001258:	4b8a      	ldr	r3, [pc, #552]	; (8001484 <dectoint+0x288>)
 800125a:	f7ff f9fd 	bl	8000658 <__aeabi_dmul>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	4620      	mov	r0, r4
 8001264:	4629      	mov	r1, r5
 8001266:	f7ff f841 	bl	80002ec <__adddf3>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4614      	mov	r4, r2
 8001270:	461d      	mov	r5, r3
 8001272:	4b81      	ldr	r3, [pc, #516]	; (8001478 <dectoint+0x27c>)
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff f984 	bl	8000584 <__aeabi_i2d>
 800127c:	f04f 0200 	mov.w	r2, #0
 8001280:	4b81      	ldr	r3, [pc, #516]	; (8001488 <dectoint+0x28c>)
 8001282:	f7ff f9e9 	bl	8000658 <__aeabi_dmul>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	4620      	mov	r0, r4
 800128c:	4629      	mov	r1, r5
 800128e:	f7ff f82d 	bl	80002ec <__adddf3>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	4614      	mov	r4, r2
 8001298:	461d      	mov	r5, r3
 800129a:	4b77      	ldr	r3, [pc, #476]	; (8001478 <dectoint+0x27c>)
 800129c:	691b      	ldr	r3, [r3, #16]
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff f970 	bl	8000584 <__aeabi_i2d>
 80012a4:	f04f 0200 	mov.w	r2, #0
 80012a8:	4b78      	ldr	r3, [pc, #480]	; (800148c <dectoint+0x290>)
 80012aa:	f7ff f9d5 	bl	8000658 <__aeabi_dmul>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4620      	mov	r0, r4
 80012b4:	4629      	mov	r1, r5
 80012b6:	f7ff f819 	bl	80002ec <__adddf3>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4614      	mov	r4, r2
 80012c0:	461d      	mov	r5, r3
 80012c2:	4b6d      	ldr	r3, [pc, #436]	; (8001478 <dectoint+0x27c>)
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff f95c 	bl	8000584 <__aeabi_i2d>
 80012cc:	f04f 0200 	mov.w	r2, #0
 80012d0:	4b6f      	ldr	r3, [pc, #444]	; (8001490 <dectoint+0x294>)
 80012d2:	f7ff f9c1 	bl	8000658 <__aeabi_dmul>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	4620      	mov	r0, r4
 80012dc:	4629      	mov	r1, r5
 80012de:	f7ff f805 	bl	80002ec <__adddf3>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	4614      	mov	r4, r2
 80012e8:	461d      	mov	r5, r3
 80012ea:	4b63      	ldr	r3, [pc, #396]	; (8001478 <dectoint+0x27c>)
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff f948 	bl	8000584 <__aeabi_i2d>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	f7fe fff8 	bl	80002ec <__adddf3>
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	4620      	mov	r0, r4
 8001302:	4629      	mov	r1, r5
 8001304:	f7fe fff2 	bl	80002ec <__adddf3>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4614      	mov	r4, r2
 800130e:	461d      	mov	r5, r3
 8001310:	4b59      	ldr	r3, [pc, #356]	; (8001478 <dectoint+0x27c>)
 8001312:	69db      	ldr	r3, [r3, #28]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff f935 	bl	8000584 <__aeabi_i2d>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	4620      	mov	r0, r4
 8001320:	4629      	mov	r1, r5
 8001322:	f7fe ffe3 	bl	80002ec <__adddf3>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	4610      	mov	r0, r2
 800132c:	4619      	mov	r1, r3
 800132e:	f7ff fc6b 	bl	8000c08 <__aeabi_d2uiz>
 8001332:	4603      	mov	r3, r0
 8001334:	b2da      	uxtb	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	701a      	strb	r2, [r3, #0]

	*y_2 = ((arr2[0]*pow(2,7))+(arr2[1]*pow(2,6))+(arr2[2]*pow(2,5))+(arr2[3]*pow(2,4))+(arr2[4]*pow(2,3))+(arr2[5]*pow(2,2))+(arr2[6]*pow(2,1))+(arr2[7]*pow(2,0)));
 800133a:	4b56      	ldr	r3, [pc, #344]	; (8001494 <dectoint+0x298>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff f920 	bl	8000584 <__aeabi_i2d>
 8001344:	f04f 0200 	mov.w	r2, #0
 8001348:	4b4c      	ldr	r3, [pc, #304]	; (800147c <dectoint+0x280>)
 800134a:	f7ff f985 	bl	8000658 <__aeabi_dmul>
 800134e:	4602      	mov	r2, r0
 8001350:	460b      	mov	r3, r1
 8001352:	4614      	mov	r4, r2
 8001354:	461d      	mov	r5, r3
 8001356:	4b4f      	ldr	r3, [pc, #316]	; (8001494 <dectoint+0x298>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff f912 	bl	8000584 <__aeabi_i2d>
 8001360:	f04f 0200 	mov.w	r2, #0
 8001364:	4b46      	ldr	r3, [pc, #280]	; (8001480 <dectoint+0x284>)
 8001366:	f7ff f977 	bl	8000658 <__aeabi_dmul>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	4620      	mov	r0, r4
 8001370:	4629      	mov	r1, r5
 8001372:	f7fe ffbb 	bl	80002ec <__adddf3>
 8001376:	4602      	mov	r2, r0
 8001378:	460b      	mov	r3, r1
 800137a:	4614      	mov	r4, r2
 800137c:	461d      	mov	r5, r3
 800137e:	4b45      	ldr	r3, [pc, #276]	; (8001494 <dectoint+0x298>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff f8fe 	bl	8000584 <__aeabi_i2d>
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	4b3d      	ldr	r3, [pc, #244]	; (8001484 <dectoint+0x288>)
 800138e:	f7ff f963 	bl	8000658 <__aeabi_dmul>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	4620      	mov	r0, r4
 8001398:	4629      	mov	r1, r5
 800139a:	f7fe ffa7 	bl	80002ec <__adddf3>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	4614      	mov	r4, r2
 80013a4:	461d      	mov	r5, r3
 80013a6:	4b3b      	ldr	r3, [pc, #236]	; (8001494 <dectoint+0x298>)
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff f8ea 	bl	8000584 <__aeabi_i2d>
 80013b0:	f04f 0200 	mov.w	r2, #0
 80013b4:	4b34      	ldr	r3, [pc, #208]	; (8001488 <dectoint+0x28c>)
 80013b6:	f7ff f94f 	bl	8000658 <__aeabi_dmul>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	4620      	mov	r0, r4
 80013c0:	4629      	mov	r1, r5
 80013c2:	f7fe ff93 	bl	80002ec <__adddf3>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	4614      	mov	r4, r2
 80013cc:	461d      	mov	r5, r3
 80013ce:	4b31      	ldr	r3, [pc, #196]	; (8001494 <dectoint+0x298>)
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff f8d6 	bl	8000584 <__aeabi_i2d>
 80013d8:	f04f 0200 	mov.w	r2, #0
 80013dc:	4b2b      	ldr	r3, [pc, #172]	; (800148c <dectoint+0x290>)
 80013de:	f7ff f93b 	bl	8000658 <__aeabi_dmul>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	4620      	mov	r0, r4
 80013e8:	4629      	mov	r1, r5
 80013ea:	f7fe ff7f 	bl	80002ec <__adddf3>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	4614      	mov	r4, r2
 80013f4:	461d      	mov	r5, r3
 80013f6:	4b27      	ldr	r3, [pc, #156]	; (8001494 <dectoint+0x298>)
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff f8c2 	bl	8000584 <__aeabi_i2d>
 8001400:	f04f 0200 	mov.w	r2, #0
 8001404:	4b22      	ldr	r3, [pc, #136]	; (8001490 <dectoint+0x294>)
 8001406:	f7ff f927 	bl	8000658 <__aeabi_dmul>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	4620      	mov	r0, r4
 8001410:	4629      	mov	r1, r5
 8001412:	f7fe ff6b 	bl	80002ec <__adddf3>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	4614      	mov	r4, r2
 800141c:	461d      	mov	r5, r3
 800141e:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <dectoint+0x298>)
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff f8ae 	bl	8000584 <__aeabi_i2d>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	f7fe ff5e 	bl	80002ec <__adddf3>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4620      	mov	r0, r4
 8001436:	4629      	mov	r1, r5
 8001438:	f7fe ff58 	bl	80002ec <__adddf3>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	4614      	mov	r4, r2
 8001442:	461d      	mov	r5, r3
 8001444:	4b13      	ldr	r3, [pc, #76]	; (8001494 <dectoint+0x298>)
 8001446:	69db      	ldr	r3, [r3, #28]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff f89b 	bl	8000584 <__aeabi_i2d>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4620      	mov	r0, r4
 8001454:	4629      	mov	r1, r5
 8001456:	f7fe ff49 	bl	80002ec <__adddf3>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	4610      	mov	r0, r2
 8001460:	4619      	mov	r1, r3
 8001462:	f7ff fbd1 	bl	8000c08 <__aeabi_d2uiz>
 8001466:	4603      	mov	r3, r0
 8001468:	b2da      	uxtb	r2, r3
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	701a      	strb	r2, [r3, #0]

}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bdb0      	pop	{r4, r5, r7, pc}
 8001476:	bf00      	nop
 8001478:	20000294 	.word	0x20000294
 800147c:	40600000 	.word	0x40600000
 8001480:	40500000 	.word	0x40500000
 8001484:	40400000 	.word	0x40400000
 8001488:	40300000 	.word	0x40300000
 800148c:	40200000 	.word	0x40200000
 8001490:	40100000 	.word	0x40100000
 8001494:	200002b4 	.word	0x200002b4

08001498 <split>:
 * y1 = empty char which going to carry left most 8 bits equivalent decimal value after the function execution.
 * y2 = empty char which going to carry right most 8 bits equivalent decimal value after the function execution.
 */

void split(char *y1, char *y2)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
	int k=0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
	int l=0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
	for(int i = 0; i<16; i++)
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	e025      	b.n	80014fc <split+0x64>
	{
		if(i>=0 && i<=7)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	db0e      	blt.n	80014d4 <split+0x3c>
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2b07      	cmp	r3, #7
 80014ba:	dc0b      	bgt.n	80014d4 <split+0x3c>
		{

			arr1[k] = arr[i];
 80014bc:	4a15      	ldr	r2, [pc, #84]	; (8001514 <split+0x7c>)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014c4:	4914      	ldr	r1, [pc, #80]	; (8001518 <split+0x80>)
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			k++;
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	3301      	adds	r3, #1
 80014d0:	617b      	str	r3, [r7, #20]
 80014d2:	e010      	b.n	80014f6 <split+0x5e>
		}

		else if(i>=8 && i <=15)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2b07      	cmp	r3, #7
 80014d8:	dd0d      	ble.n	80014f6 <split+0x5e>
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2b0f      	cmp	r3, #15
 80014de:	dc0a      	bgt.n	80014f6 <split+0x5e>
		{

			arr2[l] = arr[i];
 80014e0:	4a0c      	ldr	r2, [pc, #48]	; (8001514 <split+0x7c>)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014e8:	490c      	ldr	r1, [pc, #48]	; (800151c <split+0x84>)
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			l++;
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	3301      	adds	r3, #1
 80014f4:	613b      	str	r3, [r7, #16]
	for(int i = 0; i<16; i++)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	3301      	adds	r3, #1
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2b0f      	cmp	r3, #15
 8001500:	ddd6      	ble.n	80014b0 <split+0x18>
		}
	}
	dectoint(y1,y2);// stores the equivalent decimal of binary number in arr1 and arr2 into y1 and y2
 8001502:	6839      	ldr	r1, [r7, #0]
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff fe79 	bl	80011fc <dectoint>
}
 800150a:	bf00      	nop
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000254 	.word	0x20000254
 8001518:	20000294 	.word	0x20000294
 800151c:	200002b4 	.word	0x200002b4

08001520 <dectobin>:
 * y1 = stores the left most 8 bits in decimal form from 16bit binary number
 * y2 = stores the right most 8 bits in decimal form from 16bit binary number
 *
 */
void dectobin(int y, char *y1, char *y2)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b098      	sub	sp, #96	; 0x60
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
	int i = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	65fb      	str	r3, [r7, #92]	; 0x5c
	int j = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	65bb      	str	r3, [r7, #88]	; 0x58

	int binaryNum[16]={0};
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	2240      	movs	r2, #64	; 0x40
 800153a:	2100      	movs	r1, #0
 800153c:	4618      	mov	r0, r3
 800153e:	f004 ffef 	bl	8006520 <memset>
	while( y > 0)
 8001542:	e014      	b.n	800156e <dectobin+0x4e>
	{
		binaryNum[i] = y % 2;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2b00      	cmp	r3, #0
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	bfb8      	it	lt
 800154e:	425b      	neglt	r3, r3
 8001550:	461a      	mov	r2, r3
 8001552:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	3360      	adds	r3, #96	; 0x60
 8001558:	443b      	add	r3, r7
 800155a:	f843 2c4c 	str.w	r2, [r3, #-76]
		y = y/2;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	0fda      	lsrs	r2, r3, #31
 8001562:	4413      	add	r3, r2
 8001564:	105b      	asrs	r3, r3, #1
 8001566:	60fb      	str	r3, [r7, #12]
		i++;
 8001568:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800156a:	3301      	adds	r3, #1
 800156c:	65fb      	str	r3, [r7, #92]	; 0x5c
	while( y > 0)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2b00      	cmp	r3, #0
 8001572:	dce7      	bgt.n	8001544 <dectobin+0x24>
	}

	int k=0;
 8001574:	2300      	movs	r3, #0
 8001576:	657b      	str	r3, [r7, #84]	; 0x54
	for(j= 15; j >= 0; j--)
 8001578:	230f      	movs	r3, #15
 800157a:	65bb      	str	r3, [r7, #88]	; 0x58
 800157c:	e00f      	b.n	800159e <dectobin+0x7e>
	{
		arr[k] = binaryNum[j];
 800157e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	3360      	adds	r3, #96	; 0x60
 8001584:	443b      	add	r3, r7
 8001586:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 800158a:	490a      	ldr	r1, [pc, #40]	; (80015b4 <dectobin+0x94>)
 800158c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800158e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		k++;
 8001592:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001594:	3301      	adds	r3, #1
 8001596:	657b      	str	r3, [r7, #84]	; 0x54
	for(j= 15; j >= 0; j--)
 8001598:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800159a:	3b01      	subs	r3, #1
 800159c:	65bb      	str	r3, [r7, #88]	; 0x58
 800159e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	daec      	bge.n	800157e <dectobin+0x5e>
	}
	split(y1,y2);
 80015a4:	6879      	ldr	r1, [r7, #4]
 80015a6:	68b8      	ldr	r0, [r7, #8]
 80015a8:	f7ff ff76 	bl	8001498 <split>
}
 80015ac:	bf00      	nop
 80015ae:	3760      	adds	r7, #96	; 0x60
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000254 	.word	0x20000254

080015b8 <send_function>:
 * channel = char which equal to binary between 00110000 to 00111111
 * y1 : 8 bit value that splits from left part of 16bit brightness value
 * y2 :  8 bit value that splits from right part of 16bit brightness value
 */
void send_function( char channel , char *y_1 , char *y_2)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
 80015c4:	73fb      	strb	r3, [r7, #15]

		HAL_GPIO_WritePin(SPI_Selection_GPIO_Port , SPI_Selection_Pin, GPIO_PIN_RESET);
 80015c6:	2200      	movs	r2, #0
 80015c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015cc:	4810      	ldr	r0, [pc, #64]	; (8001610 <send_function+0x58>)
 80015ce:	f002 f9df 	bl	8003990 <HAL_GPIO_WritePin>
		x = channel;
 80015d2:	4a10      	ldr	r2, [pc, #64]	; (8001614 <send_function+0x5c>)
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
 80015d6:	7013      	strb	r3, [r2, #0]

		HAL_SPI_Transmit(&hspi1,(uint8_t*) &x, sizeof(x), 100);
 80015d8:	2364      	movs	r3, #100	; 0x64
 80015da:	2201      	movs	r2, #1
 80015dc:	490d      	ldr	r1, [pc, #52]	; (8001614 <send_function+0x5c>)
 80015de:	480e      	ldr	r0, [pc, #56]	; (8001618 <send_function+0x60>)
 80015e0:	f003 f879 	bl	80046d6 <HAL_SPI_Transmit>

	    HAL_SPI_Transmit(&hspi1,(uint8_t*) y_1, sizeof(*y_1), 100);
 80015e4:	2364      	movs	r3, #100	; 0x64
 80015e6:	2201      	movs	r2, #1
 80015e8:	68b9      	ldr	r1, [r7, #8]
 80015ea:	480b      	ldr	r0, [pc, #44]	; (8001618 <send_function+0x60>)
 80015ec:	f003 f873 	bl	80046d6 <HAL_SPI_Transmit>

	    HAL_SPI_Transmit(&hspi1,(uint8_t*) y_2, sizeof(*y_2), 100);
 80015f0:	2364      	movs	r3, #100	; 0x64
 80015f2:	2201      	movs	r2, #1
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	4808      	ldr	r0, [pc, #32]	; (8001618 <send_function+0x60>)
 80015f8:	f003 f86d 	bl	80046d6 <HAL_SPI_Transmit>


	    HAL_GPIO_WritePin(SPI_Selection_GPIO_Port , SPI_Selection_Pin, GPIO_PIN_SET);
 80015fc:	2201      	movs	r2, #1
 80015fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001602:	4803      	ldr	r0, [pc, #12]	; (8001610 <send_function+0x58>)
 8001604:	f002 f9c4 	bl	8003990 <HAL_GPIO_WritePin>
}
 8001608:	bf00      	nop
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40020000 	.word	0x40020000
 8001614:	2000000c 	.word	0x2000000c
 8001618:	200002dc 	.word	0x200002dc

0800161c <stop_function>:
 * Turn Off the LED channel that we provided as parameter
 * param:
 * channel = char which equal to binary between 00110000 to 00111111
 */
void stop_function( char channel)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	71fb      	strb	r3, [r7, #7]

		HAL_GPIO_WritePin(SPI_Selection_GPIO_Port , SPI_Selection_Pin, GPIO_PIN_RESET);
 8001626:	2200      	movs	r2, #0
 8001628:	f44f 7100 	mov.w	r1, #512	; 0x200
 800162c:	4810      	ldr	r0, [pc, #64]	; (8001670 <stop_function+0x54>)
 800162e:	f002 f9af 	bl	8003990 <HAL_GPIO_WritePin>
		x = channel;
 8001632:	4a10      	ldr	r2, [pc, #64]	; (8001674 <stop_function+0x58>)
 8001634:	79fb      	ldrb	r3, [r7, #7]
 8001636:	7013      	strb	r3, [r2, #0]

		HAL_SPI_Transmit(&hspi1,(uint8_t*) &x, sizeof(x), 100);
 8001638:	2364      	movs	r3, #100	; 0x64
 800163a:	2201      	movs	r2, #1
 800163c:	490d      	ldr	r1, [pc, #52]	; (8001674 <stop_function+0x58>)
 800163e:	480e      	ldr	r0, [pc, #56]	; (8001678 <stop_function+0x5c>)
 8001640:	f003 f849 	bl	80046d6 <HAL_SPI_Transmit>

	    HAL_SPI_Transmit(&hspi1,&stop_led, sizeof(stop_led), 100);
 8001644:	2364      	movs	r3, #100	; 0x64
 8001646:	2201      	movs	r2, #1
 8001648:	490c      	ldr	r1, [pc, #48]	; (800167c <stop_function+0x60>)
 800164a:	480b      	ldr	r0, [pc, #44]	; (8001678 <stop_function+0x5c>)
 800164c:	f003 f843 	bl	80046d6 <HAL_SPI_Transmit>

	    HAL_SPI_Transmit(&hspi1,&stop_led, sizeof(stop_led), 100);
 8001650:	2364      	movs	r3, #100	; 0x64
 8001652:	2201      	movs	r2, #1
 8001654:	4909      	ldr	r1, [pc, #36]	; (800167c <stop_function+0x60>)
 8001656:	4808      	ldr	r0, [pc, #32]	; (8001678 <stop_function+0x5c>)
 8001658:	f003 f83d 	bl	80046d6 <HAL_SPI_Transmit>

	    HAL_GPIO_WritePin(SPI_Selection_GPIO_Port , SPI_Selection_Pin, GPIO_PIN_SET);
 800165c:	2201      	movs	r2, #1
 800165e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001662:	4803      	ldr	r0, [pc, #12]	; (8001670 <stop_function+0x54>)
 8001664:	f002 f994 	bl	8003990 <HAL_GPIO_WritePin>
}
 8001668:	bf00      	nop
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40020000 	.word	0x40020000
 8001674:	2000000c 	.word	0x2000000c
 8001678:	200002dc 	.word	0x200002dc
 800167c:	200002da 	.word	0x200002da

08001680 <UART_Command>:
 *      Author: Ajith Pinninti
 */

#include "UART_helper.h"

void UART_Command(char *tokens[]){
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]

		if(strcmp(tokens[0],"G90") == 0 ){
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4972      	ldr	r1, [pc, #456]	; (8001858 <UART_Command+0x1d8>)
 800168e:	4618      	mov	r0, r3
 8001690:	f7fe fdbe 	bl	8000210 <strcmp>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d10d      	bne.n	80016b6 <UART_Command+0x36>
		//Absolute positioning
		Setup_Absolute_position(tokens);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f7ff fcdc 	bl	8001058 <Setup_Absolute_position>

		//Run the Motors
		Run_Motor();
 80016a0:	f7ff fda6 	bl	80011f0 <Run_Motor>

		//Execute Command make zero and Reset the buffer
		Exec_command = 0;
 80016a4:	4b6d      	ldr	r3, [pc, #436]	; (800185c <UART_Command+0x1dc>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	701a      	strb	r2, [r3, #0]
		memset(RxBuffer,0,sizeof(RxBuffer));
 80016aa:	2232      	movs	r2, #50	; 0x32
 80016ac:	2100      	movs	r1, #0
 80016ae:	486c      	ldr	r0, [pc, #432]	; (8001860 <UART_Command+0x1e0>)
 80016b0:	f004 ff36 	bl	8006520 <memset>
			Exec_command = 0;
			memset(RxBuffer,0,sizeof(RxBuffer));
		}


}
 80016b4:	e0cb      	b.n	800184e <UART_Command+0x1ce>
		else if(strcmp(tokens[0],"G91") == 0){
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	496a      	ldr	r1, [pc, #424]	; (8001864 <UART_Command+0x1e4>)
 80016bc:	4618      	mov	r0, r3
 80016be:	f7fe fda7 	bl	8000210 <strcmp>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d121      	bne.n	800170c <UART_Command+0x8c>
		Setup_Relative_position(tokens);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff fd11 	bl	80010f0 <Setup_Relative_position>
		Run_Motor();
 80016ce:	f7ff fd8f 	bl	80011f0 <Run_Motor>
		Exec_command = 0;
 80016d2:	4b62      	ldr	r3, [pc, #392]	; (800185c <UART_Command+0x1dc>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	701a      	strb	r2, [r3, #0]
		memset(RxBuffer,0,sizeof(RxBuffer));
 80016d8:	2232      	movs	r2, #50	; 0x32
 80016da:	2100      	movs	r1, #0
 80016dc:	4860      	ldr	r0, [pc, #384]	; (8001860 <UART_Command+0x1e0>)
 80016de:	f004 ff1f 	bl	8006520 <memset>
		memset(sending_data,0,sizeof(sending_data));
 80016e2:	2232      	movs	r2, #50	; 0x32
 80016e4:	2100      	movs	r1, #0
 80016e6:	4860      	ldr	r0, [pc, #384]	; (8001868 <UART_Command+0x1e8>)
 80016e8:	f004 ff1a 	bl	8006520 <memset>
		sprintf(sending_data,"G91Completed \n");
 80016ec:	495f      	ldr	r1, [pc, #380]	; (800186c <UART_Command+0x1ec>)
 80016ee:	485e      	ldr	r0, [pc, #376]	; (8001868 <UART_Command+0x1e8>)
 80016f0:	f005 fb88 	bl	8006e04 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*)sending_data,strlen(sending_data),HAL_MAX_DELAY);
 80016f4:	485c      	ldr	r0, [pc, #368]	; (8001868 <UART_Command+0x1e8>)
 80016f6:	f7fe fd95 	bl	8000224 <strlen>
 80016fa:	4603      	mov	r3, r0
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001702:	4959      	ldr	r1, [pc, #356]	; (8001868 <UART_Command+0x1e8>)
 8001704:	485a      	ldr	r0, [pc, #360]	; (8001870 <UART_Command+0x1f0>)
 8001706:	f003 feb6 	bl	8005476 <HAL_UART_Transmit>
}
 800170a:	e0a0      	b.n	800184e <UART_Command+0x1ce>
		else if(strcmp(tokens[0],"HOME") == 0){
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4958      	ldr	r1, [pc, #352]	; (8001874 <UART_Command+0x1f4>)
 8001712:	4618      	mov	r0, r3
 8001714:	f7fe fd7c 	bl	8000210 <strcmp>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d109      	bne.n	8001732 <UART_Command+0xb2>
		HAL_NVIC_EnableIRQ(Z_END_STOP_EXTI_IRQn);
 800171e:	2017      	movs	r0, #23
 8001720:	f001 fee7 	bl	80034f2 <HAL_NVIC_EnableIRQ>
		HOMED = false;
 8001724:	4b54      	ldr	r3, [pc, #336]	; (8001878 <UART_Command+0x1f8>)
 8001726:	2200      	movs	r2, #0
 8001728:	701a      	strb	r2, [r3, #0]
		Homing_motor(tokens);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7ff fd24 	bl	8001178 <Homing_motor>
}
 8001730:	e08d      	b.n	800184e <UART_Command+0x1ce>
		else if(strcmp(tokens[0],"MOTPOS") == 0){
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4951      	ldr	r1, [pc, #324]	; (800187c <UART_Command+0x1fc>)
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe fd69 	bl	8000210 <strcmp>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d128      	bne.n	8001796 <UART_Command+0x116>
			memset(sending_data,0,sizeof(sending_data));
 8001744:	2232      	movs	r2, #50	; 0x32
 8001746:	2100      	movs	r1, #0
 8001748:	4847      	ldr	r0, [pc, #284]	; (8001868 <UART_Command+0x1e8>)
 800174a:	f004 fee9 	bl	8006520 <memset>
			sprintf(sending_data,"%0.2f\n",(float) currentPosition()/steps_per_millimeters );
 800174e:	f000 fe91 	bl	8002474 <currentPosition>
 8001752:	ee07 0a90 	vmov	s15, r0
 8001756:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800175a:	ee17 0a90 	vmov	r0, s15
 800175e:	f7fe ff23 	bl	80005a8 <__aeabi_f2d>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	4946      	ldr	r1, [pc, #280]	; (8001880 <UART_Command+0x200>)
 8001768:	483f      	ldr	r0, [pc, #252]	; (8001868 <UART_Command+0x1e8>)
 800176a:	f005 fb4b 	bl	8006e04 <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t*)sending_data,strlen(sending_data),HAL_MAX_DELAY);
 800176e:	483e      	ldr	r0, [pc, #248]	; (8001868 <UART_Command+0x1e8>)
 8001770:	f7fe fd58 	bl	8000224 <strlen>
 8001774:	4603      	mov	r3, r0
 8001776:	b29a      	uxth	r2, r3
 8001778:	f04f 33ff 	mov.w	r3, #4294967295
 800177c:	493a      	ldr	r1, [pc, #232]	; (8001868 <UART_Command+0x1e8>)
 800177e:	483c      	ldr	r0, [pc, #240]	; (8001870 <UART_Command+0x1f0>)
 8001780:	f003 fe79 	bl	8005476 <HAL_UART_Transmit>
			Exec_command = 0;
 8001784:	4b35      	ldr	r3, [pc, #212]	; (800185c <UART_Command+0x1dc>)
 8001786:	2200      	movs	r2, #0
 8001788:	701a      	strb	r2, [r3, #0]
			memset(RxBuffer,0,sizeof(RxBuffer));
 800178a:	2232      	movs	r2, #50	; 0x32
 800178c:	2100      	movs	r1, #0
 800178e:	4834      	ldr	r0, [pc, #208]	; (8001860 <UART_Command+0x1e0>)
 8001790:	f004 fec6 	bl	8006520 <memset>
}
 8001794:	e05b      	b.n	800184e <UART_Command+0x1ce>
		else if(strcmp(tokens[0],"ENCZERO") == 0){
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	493a      	ldr	r1, [pc, #232]	; (8001884 <UART_Command+0x204>)
 800179c:	4618      	mov	r0, r3
 800179e:	f7fe fd37 	bl	8000210 <strcmp>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d120      	bne.n	80017ea <UART_Command+0x16a>
			__HAL_TIM_SET_COUNTER(&htim2,0);
 80017a8:	4b37      	ldr	r3, [pc, #220]	; (8001888 <UART_Command+0x208>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2200      	movs	r2, #0
 80017ae:	625a      	str	r2, [r3, #36]	; 0x24
			memset(sending_data,0,sizeof(sending_data));
 80017b0:	2232      	movs	r2, #50	; 0x32
 80017b2:	2100      	movs	r1, #0
 80017b4:	482c      	ldr	r0, [pc, #176]	; (8001868 <UART_Command+0x1e8>)
 80017b6:	f004 feb3 	bl	8006520 <memset>
			sprintf(sending_data,"Zeroed\n");
 80017ba:	4934      	ldr	r1, [pc, #208]	; (800188c <UART_Command+0x20c>)
 80017bc:	482a      	ldr	r0, [pc, #168]	; (8001868 <UART_Command+0x1e8>)
 80017be:	f005 fb21 	bl	8006e04 <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t*)sending_data,strlen(sending_data),HAL_MAX_DELAY);
 80017c2:	4829      	ldr	r0, [pc, #164]	; (8001868 <UART_Command+0x1e8>)
 80017c4:	f7fe fd2e 	bl	8000224 <strlen>
 80017c8:	4603      	mov	r3, r0
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	f04f 33ff 	mov.w	r3, #4294967295
 80017d0:	4925      	ldr	r1, [pc, #148]	; (8001868 <UART_Command+0x1e8>)
 80017d2:	4827      	ldr	r0, [pc, #156]	; (8001870 <UART_Command+0x1f0>)
 80017d4:	f003 fe4f 	bl	8005476 <HAL_UART_Transmit>
			Exec_command = 0;
 80017d8:	4b20      	ldr	r3, [pc, #128]	; (800185c <UART_Command+0x1dc>)
 80017da:	2200      	movs	r2, #0
 80017dc:	701a      	strb	r2, [r3, #0]
			memset(RxBuffer,0,sizeof(RxBuffer));
 80017de:	2232      	movs	r2, #50	; 0x32
 80017e0:	2100      	movs	r1, #0
 80017e2:	481f      	ldr	r0, [pc, #124]	; (8001860 <UART_Command+0x1e0>)
 80017e4:	f004 fe9c 	bl	8006520 <memset>
}
 80017e8:	e031      	b.n	800184e <UART_Command+0x1ce>
		else if(strcmp(tokens[0],"ENCVAL") == 0){
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4928      	ldr	r1, [pc, #160]	; (8001890 <UART_Command+0x210>)
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7fe fd0d 	bl	8000210 <strcmp>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d120      	bne.n	800183e <UART_Command+0x1be>
			memset(sending_data,0,sizeof(sending_data));
 80017fc:	2232      	movs	r2, #50	; 0x32
 80017fe:	2100      	movs	r1, #0
 8001800:	4819      	ldr	r0, [pc, #100]	; (8001868 <UART_Command+0x1e8>)
 8001802:	f004 fe8d 	bl	8006520 <memset>
			sprintf(sending_data,"%ld\n",__HAL_TIM_GET_COUNTER(&htim2) );
 8001806:	4b20      	ldr	r3, [pc, #128]	; (8001888 <UART_Command+0x208>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180c:	461a      	mov	r2, r3
 800180e:	4921      	ldr	r1, [pc, #132]	; (8001894 <UART_Command+0x214>)
 8001810:	4815      	ldr	r0, [pc, #84]	; (8001868 <UART_Command+0x1e8>)
 8001812:	f005 faf7 	bl	8006e04 <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t*)sending_data,strlen(sending_data),HAL_MAX_DELAY);
 8001816:	4814      	ldr	r0, [pc, #80]	; (8001868 <UART_Command+0x1e8>)
 8001818:	f7fe fd04 	bl	8000224 <strlen>
 800181c:	4603      	mov	r3, r0
 800181e:	b29a      	uxth	r2, r3
 8001820:	f04f 33ff 	mov.w	r3, #4294967295
 8001824:	4910      	ldr	r1, [pc, #64]	; (8001868 <UART_Command+0x1e8>)
 8001826:	4812      	ldr	r0, [pc, #72]	; (8001870 <UART_Command+0x1f0>)
 8001828:	f003 fe25 	bl	8005476 <HAL_UART_Transmit>
			Exec_command = 0;
 800182c:	4b0b      	ldr	r3, [pc, #44]	; (800185c <UART_Command+0x1dc>)
 800182e:	2200      	movs	r2, #0
 8001830:	701a      	strb	r2, [r3, #0]
			memset(RxBuffer,0,sizeof(RxBuffer));
 8001832:	2232      	movs	r2, #50	; 0x32
 8001834:	2100      	movs	r1, #0
 8001836:	480a      	ldr	r0, [pc, #40]	; (8001860 <UART_Command+0x1e0>)
 8001838:	f004 fe72 	bl	8006520 <memset>
}
 800183c:	e007      	b.n	800184e <UART_Command+0x1ce>
			Exec_command = 0;
 800183e:	4b07      	ldr	r3, [pc, #28]	; (800185c <UART_Command+0x1dc>)
 8001840:	2200      	movs	r2, #0
 8001842:	701a      	strb	r2, [r3, #0]
			memset(RxBuffer,0,sizeof(RxBuffer));
 8001844:	2232      	movs	r2, #50	; 0x32
 8001846:	2100      	movs	r1, #0
 8001848:	4805      	ldr	r0, [pc, #20]	; (8001860 <UART_Command+0x1e0>)
 800184a:	f004 fe69 	bl	8006520 <memset>
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	0800ab80 	.word	0x0800ab80
 800185c:	20000483 	.word	0x20000483
 8001860:	20000450 	.word	0x20000450
 8001864:	0800ab84 	.word	0x0800ab84
 8001868:	20000010 	.word	0x20000010
 800186c:	0800ab88 	.word	0x0800ab88
 8001870:	2000040c 	.word	0x2000040c
 8001874:	0800ab98 	.word	0x0800ab98
 8001878:	20000491 	.word	0x20000491
 800187c:	0800aba0 	.word	0x0800aba0
 8001880:	0800aba8 	.word	0x0800aba8
 8001884:	0800abb0 	.word	0x0800abb0
 8001888:	20000334 	.word	0x20000334
 800188c:	0800abb8 	.word	0x0800abb8
 8001890:	0800abc0 	.word	0x0800abc0
 8001894:	0800abc8 	.word	0x0800abc8

08001898 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 800189e:	f001 fc9b 	bl	80031d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018a2:	f000 f8bb 	bl	8001a1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018a6:	f000 fa45 	bl	8001d34 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80018aa:	f000 fa19 	bl	8001ce0 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80018ae:	f000 f9ab 	bl	8001c08 <MX_TIM6_Init>
  MX_TIM7_Init();
 80018b2:	f000 f9df 	bl	8001c74 <MX_TIM7_Init>
  MX_SPI1_Init();
 80018b6:	f000 f91d 	bl	8001af4 <MX_SPI1_Init>
  MX_TIM2_Init();
 80018ba:	f000 f951 	bl	8001b60 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /****************************** Setting up IRQ ***********************/
	HAL_NVIC_DisableIRQ(Z_END_STOP_EXTI_IRQn);
 80018be:	2017      	movs	r0, #23
 80018c0:	f001 fe25 	bl	800350e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(Z_reference_EXTI_IRQn);
 80018c4:	2006      	movs	r0, #6
 80018c6:	f001 fe22 	bl	800350e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(P_limit_EXTI_IRQn);
 80018ca:	200a      	movs	r0, #10
 80018cc:	f001 fe1f 	bl	800350e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(Q_limit_EXTI_IRQn);
 80018d0:	2017      	movs	r0, #23
 80018d2:	f001 fe1c 	bl	800350e <HAL_NVIC_DisableIRQ>


/*********************** LED SPI Intialization *******************/

	//initializing LED values
	dectobin(ch1_br, &ch1_buff1, &ch1_buff2);
 80018d6:	4b3b      	ldr	r3, [pc, #236]	; (80019c4 <main+0x12c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a3b      	ldr	r2, [pc, #236]	; (80019c8 <main+0x130>)
 80018dc:	493b      	ldr	r1, [pc, #236]	; (80019cc <main+0x134>)
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff fe1e 	bl	8001520 <dectobin>
	dectobin(ch2_br, &ch2_buff1, &ch2_buff2);
 80018e4:	4b3a      	ldr	r3, [pc, #232]	; (80019d0 <main+0x138>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a3a      	ldr	r2, [pc, #232]	; (80019d4 <main+0x13c>)
 80018ea:	493b      	ldr	r1, [pc, #236]	; (80019d8 <main+0x140>)
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff fe17 	bl	8001520 <dectobin>
	dectobin(ch3_br, &ch3_buff1, &ch3_buff2);
 80018f2:	4b3a      	ldr	r3, [pc, #232]	; (80019dc <main+0x144>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a3a      	ldr	r2, [pc, #232]	; (80019e0 <main+0x148>)
 80018f8:	493a      	ldr	r1, [pc, #232]	; (80019e4 <main+0x14c>)
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff fe10 	bl	8001520 <dectobin>
	//setting up channel select pin to HIGH
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001900:	2201      	movs	r2, #1
 8001902:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001906:	4838      	ldr	r0, [pc, #224]	; (80019e8 <main+0x150>)
 8001908:	f002 f842 	bl	8003990 <HAL_GPIO_WritePin>



/************************** UART Initialisation *********************/
	// initiating interrupt for PC data receiving
	HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 800190c:	2201      	movs	r2, #1
 800190e:	4937      	ldr	r1, [pc, #220]	; (80019ec <main+0x154>)
 8001910:	4837      	ldr	r0, [pc, #220]	; (80019f0 <main+0x158>)
 8001912:	f003 fe42 	bl	800559a <HAL_UART_Receive_IT>



/************************** Encoder Intialization *******************/

	HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL); //starting encoder
 8001916:	213c      	movs	r1, #60	; 0x3c
 8001918:	4836      	ldr	r0, [pc, #216]	; (80019f4 <main+0x15c>)
 800191a:	f003 fa41 	bl	8004da0 <HAL_TIM_Encoder_Start>



/*************************** Timer Intializations ****************/

  HAL_TIM_Base_Start(&htim6); //to calculate pulse time
 800191e:	4836      	ldr	r0, [pc, #216]	; (80019f8 <main+0x160>)
 8001920:	f003 f930 	bl	8004b84 <HAL_TIM_Base_Start>

  HAL_TIM_Base_Start(&htim7); // for microseconds delay
 8001924:	4835      	ldr	r0, [pc, #212]	; (80019fc <main+0x164>)
 8001926:	f003 f92d 	bl	8004b84 <HAL_TIM_Base_Start>


/*********************** Z motor initialization *********************/


	stepper_setup(STEP_GPIO_Port, STEP_Pin, DIR_GPIO_Port, DIR_Pin );
 800192a:	2301      	movs	r3, #1
 800192c:	4a34      	ldr	r2, [pc, #208]	; (8001a00 <main+0x168>)
 800192e:	2102      	movs	r1, #2
 8001930:	4833      	ldr	r0, [pc, #204]	; (8001a00 <main+0x168>)
 8001932:	f000 fcc3 	bl	80022bc <stepper_setup>

	//sample movement
	Total_Steps = (int32_t) ( steps_per_millimeters * targetPos );
 8001936:	4b33      	ldr	r3, [pc, #204]	; (8001a04 <main+0x16c>)
 8001938:	edd3 7a00 	vldr	s15, [r3]
 800193c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001940:	ee17 2a90 	vmov	r2, s15
 8001944:	4b30      	ldr	r3, [pc, #192]	; (8001a08 <main+0x170>)
 8001946:	601a      	str	r2, [r3, #0]
	setMaxSpeed(10*steps_per_millimeters);
 8001948:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800194c:	f000 ff36 	bl	80027bc <setMaxSpeed>
	setAcceleration(Acceleration);
 8001950:	4b2e      	ldr	r3, [pc, #184]	; (8001a0c <main+0x174>)
 8001952:	edd3 7a00 	vldr	s15, [r3]
 8001956:	eeb0 0a67 	vmov.f32	s0, s15
 800195a:	f000 ff95 	bl	8002888 <setAcceleration>
	moveTo(Total_Steps);
 800195e:	4b2a      	ldr	r3, [pc, #168]	; (8001a08 <main+0x170>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f000 fc70 	bl	8002248 <moveTo>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(Exec_command){
 8001968:	4b29      	ldr	r3, [pc, #164]	; (8001a10 <main+0x178>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0fb      	beq.n	8001968 <main+0xd0>
	//			char str[] = "G91 Z30 F300 \r";
		int MAX_TOKENS = 3;
 8001970:	2303      	movs	r3, #3
 8001972:	60fb      	str	r3, [r7, #12]
		char *token;
		char *tokens[3] = {0};
 8001974:	463b      	mov	r3, r7
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	605a      	str	r2, [r3, #4]
 800197c:	609a      	str	r2, [r3, #8]
		int i = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	613b      	str	r3, [r7, #16]


		/* Split the string by the delimiter " " */
		token = strtok((char *)RxBuffer, " ");
 8001982:	4924      	ldr	r1, [pc, #144]	; (8001a14 <main+0x17c>)
 8001984:	4824      	ldr	r0, [pc, #144]	; (8001a18 <main+0x180>)
 8001986:	f006 f88d 	bl	8007aa4 <strtok>
 800198a:	6178      	str	r0, [r7, #20]

		while (token != NULL && i < MAX_TOKENS) {
 800198c:	e00e      	b.n	80019ac <main+0x114>
			tokens[i] = token;
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	3318      	adds	r3, #24
 8001994:	443b      	add	r3, r7
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	f843 2c18 	str.w	r2, [r3, #-24]
			i++;
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	3301      	adds	r3, #1
 80019a0:	613b      	str	r3, [r7, #16]
			token = strtok(NULL, " ");
 80019a2:	491c      	ldr	r1, [pc, #112]	; (8001a14 <main+0x17c>)
 80019a4:	2000      	movs	r0, #0
 80019a6:	f006 f87d 	bl	8007aa4 <strtok>
 80019aa:	6178      	str	r0, [r7, #20]
		while (token != NULL && i < MAX_TOKENS) {
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <main+0x122>
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	dbe9      	blt.n	800198e <main+0xf6>
		}

		//Excute the command
		UART_Command(tokens);
 80019ba:	463b      	mov	r3, r7
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff fe5f 	bl	8001680 <UART_Command>
	if(Exec_command){
 80019c2:	e7d1      	b.n	8001968 <main+0xd0>
 80019c4:	20000000 	.word	0x20000000
 80019c8:	200002d5 	.word	0x200002d5
 80019cc:	200002d4 	.word	0x200002d4
 80019d0:	20000004 	.word	0x20000004
 80019d4:	200002d7 	.word	0x200002d7
 80019d8:	200002d6 	.word	0x200002d6
 80019dc:	20000008 	.word	0x20000008
 80019e0:	200002d9 	.word	0x200002d9
 80019e4:	200002d8 	.word	0x200002d8
 80019e8:	40020000 	.word	0x40020000
 80019ec:	20000484 	.word	0x20000484
 80019f0:	2000040c 	.word	0x2000040c
 80019f4:	20000334 	.word	0x20000334
 80019f8:	2000037c 	.word	0x2000037c
 80019fc:	200003c4 	.word	0x200003c4
 8001a00:	40020800 	.word	0x40020800
 8001a04:	20000044 	.word	0x20000044
 8001a08:	2000048c 	.word	0x2000048c
 8001a0c:	20000050 	.word	0x20000050
 8001a10:	20000483 	.word	0x20000483
 8001a14:	0800abd0 	.word	0x0800abd0
 8001a18:	20000450 	.word	0x20000450

08001a1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b094      	sub	sp, #80	; 0x50
 8001a20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a22:	f107 031c 	add.w	r3, r7, #28
 8001a26:	2234      	movs	r2, #52	; 0x34
 8001a28:	2100      	movs	r1, #0
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f004 fd78 	bl	8006520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a30:	f107 0308 	add.w	r3, r7, #8
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
 8001a3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a40:	2300      	movs	r3, #0
 8001a42:	607b      	str	r3, [r7, #4]
 8001a44:	4b29      	ldr	r3, [pc, #164]	; (8001aec <SystemClock_Config+0xd0>)
 8001a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a48:	4a28      	ldr	r2, [pc, #160]	; (8001aec <SystemClock_Config+0xd0>)
 8001a4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a4e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a50:	4b26      	ldr	r3, [pc, #152]	; (8001aec <SystemClock_Config+0xd0>)
 8001a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a58:	607b      	str	r3, [r7, #4]
 8001a5a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	603b      	str	r3, [r7, #0]
 8001a60:	4b23      	ldr	r3, [pc, #140]	; (8001af0 <SystemClock_Config+0xd4>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a22      	ldr	r2, [pc, #136]	; (8001af0 <SystemClock_Config+0xd4>)
 8001a66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a6a:	6013      	str	r3, [r2, #0]
 8001a6c:	4b20      	ldr	r3, [pc, #128]	; (8001af0 <SystemClock_Config+0xd4>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a74:	603b      	str	r3, [r7, #0]
 8001a76:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a80:	2310      	movs	r3, #16
 8001a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a84:	2302      	movs	r3, #2
 8001a86:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a8c:	2308      	movs	r3, #8
 8001a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001a90:	23a0      	movs	r3, #160	; 0xa0
 8001a92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a94:	2302      	movs	r3, #2
 8001a96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aa0:	f107 031c 	add.w	r3, r7, #28
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f002 faef 	bl	8004088 <HAL_RCC_OscConfig>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001ab0:	f000 fbaa 	bl	8002208 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ab4:	230f      	movs	r3, #15
 8001ab6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001abc:	2300      	movs	r3, #0
 8001abe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001ac0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001ac4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ac6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aca:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001acc:	f107 0308 	add.w	r3, r7, #8
 8001ad0:	2105      	movs	r1, #5
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f001 ff8e 	bl	80039f4 <HAL_RCC_ClockConfig>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001ade:	f000 fb93 	bl	8002208 <Error_Handler>
  }
}
 8001ae2:	bf00      	nop
 8001ae4:	3750      	adds	r7, #80	; 0x50
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40007000 	.word	0x40007000

08001af4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001af8:	4b17      	ldr	r3, [pc, #92]	; (8001b58 <MX_SPI1_Init+0x64>)
 8001afa:	4a18      	ldr	r2, [pc, #96]	; (8001b5c <MX_SPI1_Init+0x68>)
 8001afc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001afe:	4b16      	ldr	r3, [pc, #88]	; (8001b58 <MX_SPI1_Init+0x64>)
 8001b00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b04:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b06:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <MX_SPI1_Init+0x64>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b0c:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <MX_SPI1_Init+0x64>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b12:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <MX_SPI1_Init+0x64>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b18:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <MX_SPI1_Init+0x64>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b1e:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <MX_SPI1_Init+0x64>)
 8001b20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b24:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b26:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <MX_SPI1_Init+0x64>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b2c:	4b0a      	ldr	r3, [pc, #40]	; (8001b58 <MX_SPI1_Init+0x64>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b32:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <MX_SPI1_Init+0x64>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b38:	4b07      	ldr	r3, [pc, #28]	; (8001b58 <MX_SPI1_Init+0x64>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b3e:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <MX_SPI1_Init+0x64>)
 8001b40:	220a      	movs	r2, #10
 8001b42:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b44:	4804      	ldr	r0, [pc, #16]	; (8001b58 <MX_SPI1_Init+0x64>)
 8001b46:	f002 fd3d 	bl	80045c4 <HAL_SPI_Init>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b50:	f000 fb5a 	bl	8002208 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b54:	bf00      	nop
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	200002dc 	.word	0x200002dc
 8001b5c:	40013000 	.word	0x40013000

08001b60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08c      	sub	sp, #48	; 0x30
 8001b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b66:	f107 030c 	add.w	r3, r7, #12
 8001b6a:	2224      	movs	r2, #36	; 0x24
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f004 fcd6 	bl	8006520 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b74:	1d3b      	adds	r3, r7, #4
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b7c:	4b21      	ldr	r3, [pc, #132]	; (8001c04 <MX_TIM2_Init+0xa4>)
 8001b7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b84:	4b1f      	ldr	r3, [pc, #124]	; (8001c04 <MX_TIM2_Init+0xa4>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b8a:	4b1e      	ldr	r3, [pc, #120]	; (8001c04 <MX_TIM2_Init+0xa4>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001b90:	4b1c      	ldr	r3, [pc, #112]	; (8001c04 <MX_TIM2_Init+0xa4>)
 8001b92:	f04f 32ff 	mov.w	r2, #4294967295
 8001b96:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b98:	4b1a      	ldr	r3, [pc, #104]	; (8001c04 <MX_TIM2_Init+0xa4>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b9e:	4b19      	ldr	r3, [pc, #100]	; (8001c04 <MX_TIM2_Init+0xa4>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bac:	2301      	movs	r3, #1
 8001bae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001bc8:	f107 030c 	add.w	r3, r7, #12
 8001bcc:	4619      	mov	r1, r3
 8001bce:	480d      	ldr	r0, [pc, #52]	; (8001c04 <MX_TIM2_Init+0xa4>)
 8001bd0:	f003 f840 	bl	8004c54 <HAL_TIM_Encoder_Init>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001bda:	f000 fb15 	bl	8002208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bde:	2300      	movs	r3, #0
 8001be0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be2:	2300      	movs	r3, #0
 8001be4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001be6:	1d3b      	adds	r3, r7, #4
 8001be8:	4619      	mov	r1, r3
 8001bea:	4806      	ldr	r0, [pc, #24]	; (8001c04 <MX_TIM2_Init+0xa4>)
 8001bec:	f003 fb66 	bl	80052bc <HAL_TIMEx_MasterConfigSynchronization>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001bf6:	f000 fb07 	bl	8002208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bfa:	bf00      	nop
 8001bfc:	3730      	adds	r7, #48	; 0x30
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000334 	.word	0x20000334

08001c08 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c0e:	463b      	mov	r3, r7
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001c16:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <MX_TIM6_Init+0x64>)
 8001c18:	4a15      	ldr	r2, [pc, #84]	; (8001c70 <MX_TIM6_Init+0x68>)
 8001c1a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 40-1;
 8001c1c:	4b13      	ldr	r3, [pc, #76]	; (8001c6c <MX_TIM6_Init+0x64>)
 8001c1e:	2227      	movs	r2, #39	; 0x27
 8001c20:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c22:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <MX_TIM6_Init+0x64>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001c28:	4b10      	ldr	r3, [pc, #64]	; (8001c6c <MX_TIM6_Init+0x64>)
 8001c2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c2e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c30:	4b0e      	ldr	r3, [pc, #56]	; (8001c6c <MX_TIM6_Init+0x64>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c36:	480d      	ldr	r0, [pc, #52]	; (8001c6c <MX_TIM6_Init+0x64>)
 8001c38:	f002 ff54 	bl	8004ae4 <HAL_TIM_Base_Init>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001c42:	f000 fae1 	bl	8002208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c46:	2300      	movs	r3, #0
 8001c48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c4e:	463b      	mov	r3, r7
 8001c50:	4619      	mov	r1, r3
 8001c52:	4806      	ldr	r0, [pc, #24]	; (8001c6c <MX_TIM6_Init+0x64>)
 8001c54:	f003 fb32 	bl	80052bc <HAL_TIMEx_MasterConfigSynchronization>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001c5e:	f000 fad3 	bl	8002208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	2000037c 	.word	0x2000037c
 8001c70:	40001000 	.word	0x40001000

08001c74 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c7a:	463b      	mov	r3, r7
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001c82:	4b15      	ldr	r3, [pc, #84]	; (8001cd8 <MX_TIM7_Init+0x64>)
 8001c84:	4a15      	ldr	r2, [pc, #84]	; (8001cdc <MX_TIM7_Init+0x68>)
 8001c86:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 40-1;
 8001c88:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <MX_TIM7_Init+0x64>)
 8001c8a:	2227      	movs	r2, #39	; 0x27
 8001c8c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c8e:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <MX_TIM7_Init+0x64>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001c94:	4b10      	ldr	r3, [pc, #64]	; (8001cd8 <MX_TIM7_Init+0x64>)
 8001c96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c9a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c9c:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <MX_TIM7_Init+0x64>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001ca2:	480d      	ldr	r0, [pc, #52]	; (8001cd8 <MX_TIM7_Init+0x64>)
 8001ca4:	f002 ff1e 	bl	8004ae4 <HAL_TIM_Base_Init>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001cae:	f000 faab 	bl	8002208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001cba:	463b      	mov	r3, r7
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4806      	ldr	r0, [pc, #24]	; (8001cd8 <MX_TIM7_Init+0x64>)
 8001cc0:	f003 fafc 	bl	80052bc <HAL_TIMEx_MasterConfigSynchronization>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001cca:	f000 fa9d 	bl	8002208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	200003c4 	.word	0x200003c4
 8001cdc:	40001400 	.word	0x40001400

08001ce0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ce4:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <MX_USART2_UART_Init+0x4c>)
 8001ce6:	4a12      	ldr	r2, [pc, #72]	; (8001d30 <MX_USART2_UART_Init+0x50>)
 8001ce8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cea:	4b10      	ldr	r3, [pc, #64]	; (8001d2c <MX_USART2_UART_Init+0x4c>)
 8001cec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cf0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <MX_USART2_UART_Init+0x4c>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <MX_USART2_UART_Init+0x4c>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cfe:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <MX_USART2_UART_Init+0x4c>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d04:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <MX_USART2_UART_Init+0x4c>)
 8001d06:	220c      	movs	r2, #12
 8001d08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d0a:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <MX_USART2_UART_Init+0x4c>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d10:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <MX_USART2_UART_Init+0x4c>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d16:	4805      	ldr	r0, [pc, #20]	; (8001d2c <MX_USART2_UART_Init+0x4c>)
 8001d18:	f003 fb60 	bl	80053dc <HAL_UART_Init>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d22:	f000 fa71 	bl	8002208 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	2000040c 	.word	0x2000040c
 8001d30:	40004400 	.word	0x40004400

08001d34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08a      	sub	sp, #40	; 0x28
 8001d38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3a:	f107 0314 	add.w	r3, r7, #20
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	605a      	str	r2, [r3, #4]
 8001d44:	609a      	str	r2, [r3, #8]
 8001d46:	60da      	str	r2, [r3, #12]
 8001d48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	4b66      	ldr	r3, [pc, #408]	; (8001ee8 <MX_GPIO_Init+0x1b4>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	4a65      	ldr	r2, [pc, #404]	; (8001ee8 <MX_GPIO_Init+0x1b4>)
 8001d54:	f043 0304 	orr.w	r3, r3, #4
 8001d58:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5a:	4b63      	ldr	r3, [pc, #396]	; (8001ee8 <MX_GPIO_Init+0x1b4>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	f003 0304 	and.w	r3, r3, #4
 8001d62:	613b      	str	r3, [r7, #16]
 8001d64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	4b5f      	ldr	r3, [pc, #380]	; (8001ee8 <MX_GPIO_Init+0x1b4>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	4a5e      	ldr	r2, [pc, #376]	; (8001ee8 <MX_GPIO_Init+0x1b4>)
 8001d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d74:	6313      	str	r3, [r2, #48]	; 0x30
 8001d76:	4b5c      	ldr	r3, [pc, #368]	; (8001ee8 <MX_GPIO_Init+0x1b4>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	60bb      	str	r3, [r7, #8]
 8001d86:	4b58      	ldr	r3, [pc, #352]	; (8001ee8 <MX_GPIO_Init+0x1b4>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	4a57      	ldr	r2, [pc, #348]	; (8001ee8 <MX_GPIO_Init+0x1b4>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	6313      	str	r3, [r2, #48]	; 0x30
 8001d92:	4b55      	ldr	r3, [pc, #340]	; (8001ee8 <MX_GPIO_Init+0x1b4>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	60bb      	str	r3, [r7, #8]
 8001d9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	607b      	str	r3, [r7, #4]
 8001da2:	4b51      	ldr	r3, [pc, #324]	; (8001ee8 <MX_GPIO_Init+0x1b4>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	4a50      	ldr	r2, [pc, #320]	; (8001ee8 <MX_GPIO_Init+0x1b4>)
 8001da8:	f043 0302 	orr.w	r3, r3, #2
 8001dac:	6313      	str	r3, [r2, #48]	; 0x30
 8001dae:	4b4e      	ldr	r3, [pc, #312]	; (8001ee8 <MX_GPIO_Init+0x1b4>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	607b      	str	r3, [r7, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIR_Pin|STEP_Pin, GPIO_PIN_RESET);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2103      	movs	r1, #3
 8001dbe:	484b      	ldr	r0, [pc, #300]	; (8001eec <MX_GPIO_Init+0x1b8>)
 8001dc0:	f001 fde6 	bl	8003990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(End_stop_GPIO_Port, End_stop_Pin, GPIO_PIN_SET);
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dca:	4849      	ldr	r0, [pc, #292]	; (8001ef0 <MX_GPIO_Init+0x1bc>)
 8001dcc:	f001 fde0 	bl	8003990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_Selection_GPIO_Port, SPI_Selection_Pin, GPIO_PIN_SET);
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dd6:	4847      	ldr	r0, [pc, #284]	; (8001ef4 <MX_GPIO_Init+0x1c0>)
 8001dd8:	f001 fdda 	bl	8003990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ddc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001de0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001de2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001de6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001dec:	f107 0314 	add.w	r3, r7, #20
 8001df0:	4619      	mov	r1, r3
 8001df2:	483e      	ldr	r0, [pc, #248]	; (8001eec <MX_GPIO_Init+0x1b8>)
 8001df4:	f001 fc38 	bl	8003668 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_Pin STEP_Pin */
  GPIO_InitStruct.Pin = DIR_Pin|STEP_Pin;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e04:	2303      	movs	r3, #3
 8001e06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e08:	f107 0314 	add.w	r3, r7, #20
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4837      	ldr	r0, [pc, #220]	; (8001eec <MX_GPIO_Init+0x1b8>)
 8001e10:	f001 fc2a 	bl	8003668 <HAL_GPIO_Init>

  /*Configure GPIO pins : Z_reference_Pin P_limit_Pin Q_limit_Pin */
  GPIO_InitStruct.Pin = Z_reference_Pin|P_limit_Pin|Q_limit_Pin;
 8001e14:	2331      	movs	r3, #49	; 0x31
 8001e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e18:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e22:	f107 0314 	add.w	r3, r7, #20
 8001e26:	4619      	mov	r1, r3
 8001e28:	4831      	ldr	r0, [pc, #196]	; (8001ef0 <MX_GPIO_Init+0x1bc>)
 8001e2a:	f001 fc1d 	bl	8003668 <HAL_GPIO_Init>

  /*Configure GPIO pin : End_stop_Pin */
  GPIO_InitStruct.Pin = End_stop_Pin;
 8001e2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e34:	2301      	movs	r3, #1
 8001e36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(End_stop_GPIO_Port, &GPIO_InitStruct);
 8001e40:	f107 0314 	add.w	r3, r7, #20
 8001e44:	4619      	mov	r1, r3
 8001e46:	482a      	ldr	r0, [pc, #168]	; (8001ef0 <MX_GPIO_Init+0x1bc>)
 8001e48:	f001 fc0e 	bl	8003668 <HAL_GPIO_Init>

  /*Configure GPIO pin : Z_END_STOP_Pin */
  GPIO_InitStruct.Pin = Z_END_STOP_Pin;
 8001e4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e52:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001e56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Z_END_STOP_GPIO_Port, &GPIO_InitStruct);
 8001e5c:	f107 0314 	add.w	r3, r7, #20
 8001e60:	4619      	mov	r1, r3
 8001e62:	4824      	ldr	r0, [pc, #144]	; (8001ef4 <MX_GPIO_Init+0x1c0>)
 8001e64:	f001 fc00 	bl	8003668 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_Selection_Pin */
  GPIO_InitStruct.Pin = SPI_Selection_Pin;
 8001e68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e76:	2303      	movs	r3, #3
 8001e78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_Selection_GPIO_Port, &GPIO_InitStruct);
 8001e7a:	f107 0314 	add.w	r3, r7, #20
 8001e7e:	4619      	mov	r1, r3
 8001e80:	481c      	ldr	r0, [pc, #112]	; (8001ef4 <MX_GPIO_Init+0x1c0>)
 8001e82:	f001 fbf1 	bl	8003668 <HAL_GPIO_Init>

  /*Configure GPIO pin : Camera_input_Pin */
  GPIO_InitStruct.Pin = Camera_input_Pin;
 8001e86:	2308      	movs	r3, #8
 8001e88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e8a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Camera_input_GPIO_Port, &GPIO_InitStruct);
 8001e94:	f107 0314 	add.w	r3, r7, #20
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4815      	ldr	r0, [pc, #84]	; (8001ef0 <MX_GPIO_Init+0x1bc>)
 8001e9c:	f001 fbe4 	bl	8003668 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	2006      	movs	r0, #6
 8001ea6:	f001 fb08 	bl	80034ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001eaa:	2006      	movs	r0, #6
 8001eac:	f001 fb21 	bl	80034f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	2009      	movs	r0, #9
 8001eb6:	f001 fb00 	bl	80034ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001eba:	2009      	movs	r0, #9
 8001ebc:	f001 fb19 	bl	80034f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	200a      	movs	r0, #10
 8001ec6:	f001 faf8 	bl	80034ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001eca:	200a      	movs	r0, #10
 8001ecc:	f001 fb11 	bl	80034f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	2017      	movs	r0, #23
 8001ed6:	f001 faf0 	bl	80034ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001eda:	2017      	movs	r0, #23
 8001edc:	f001 fb09 	bl	80034f2 <HAL_NVIC_EnableIRQ>

}
 8001ee0:	bf00      	nop
 8001ee2:	3728      	adds	r7, #40	; 0x28
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40020800 	.word	0x40020800
 8001ef0:	40020400 	.word	0x40020400
 8001ef4:	40020000 	.word	0x40020000

08001ef8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	80fb      	strh	r3, [r7, #6]
	if( GPIO_Pin == Z_END_STOP_Pin ){
 8001f02:	88fb      	ldrh	r3, [r7, #6]
 8001f04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f08:	d150      	bne.n	8001fac <HAL_GPIO_EXTI_Callback+0xb4>
		 * Disable the interrupt for Z_END_STOP
		 *
		 */


		if(Home_Pass == 0){
 8001f0a:	4b69      	ldr	r3, [pc, #420]	; (80020b0 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d115      	bne.n	8001f3e <HAL_GPIO_EXTI_Callback+0x46>
			// first pass
			Home_Pass = 1;
 8001f12:	4b67      	ldr	r3, [pc, #412]	; (80020b0 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001f14:	2201      	movs	r2, #1
 8001f16:	701a      	strb	r2, [r3, #0]

			Homing_completion();
 8001f18:	f7ff f95a 	bl	80011d0 <Homing_completion>

			move((int32_t ) (steps_per_millimeters * 0.25));
 8001f1c:	2000      	movs	r0, #0
 8001f1e:	f000 f9bb 	bl	8002298 <move>
			runToPosition();
 8001f22:	f000 fe37 	bl	8002b94 <runToPosition>
			//setting speed again to intiate the HOMING
			//otherwise _stepintervel became zero
			setSpeed(-1*home_speed); //MOVING IN ccw
 8001f26:	4b63      	ldr	r3, [pc, #396]	; (80020b4 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	425b      	negs	r3, r3
 8001f2c:	ee07 3a90 	vmov	s15, r3
 8001f30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f34:	eeb0 0a67 	vmov.f32	s0, s15
 8001f38:	f000 fd26 	bl	8002988 <setSpeed>
			return;
 8001f3c:	e0b5      	b.n	80020aa <HAL_GPIO_EXTI_Callback+0x1b2>
		}
		else if(Home_Pass == 1){
 8001f3e:	4b5c      	ldr	r3, [pc, #368]	; (80020b0 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d10c      	bne.n	8001f60 <HAL_GPIO_EXTI_Callback+0x68>

			HOMED = true;
 8001f46:	4b5c      	ldr	r3, [pc, #368]	; (80020b8 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8001f48:	2201      	movs	r2, #1
 8001f4a:	701a      	strb	r2, [r3, #0]
			Home_Pass = 0;
 8001f4c:	4b58      	ldr	r3, [pc, #352]	; (80020b0 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	701a      	strb	r2, [r3, #0]

			move((int32_t ) (steps_per_millimeters * 0.25));
 8001f52:	2000      	movs	r0, #0
 8001f54:	f000 f9a0 	bl	8002298 <move>
			runToPosition();
 8001f58:	f000 fe1c 	bl	8002b94 <runToPosition>
			Homing_completion();
 8001f5c:	f7ff f938 	bl	80011d0 <Homing_completion>

		}


		Exec_command = 0; //stop the motor
 8001f60:	4b56      	ldr	r3, [pc, #344]	; (80020bc <HAL_GPIO_EXTI_Callback+0x1c4>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	701a      	strb	r2, [r3, #0]
		memset(RxBuffer,0,sizeof(RxBuffer));
 8001f66:	2232      	movs	r2, #50	; 0x32
 8001f68:	2100      	movs	r1, #0
 8001f6a:	4855      	ldr	r0, [pc, #340]	; (80020c0 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8001f6c:	f004 fad8 	bl	8006520 <memset>

		//homing configuration
		Homing_completion();
 8001f70:	f7ff f92e 	bl	80011d0 <Homing_completion>
		//disabling the Interrupt for End stop

		//Set encoder counting to zero
		__HAL_TIM_SET_COUNTER(&htim2,0);
 8001f74:	4b53      	ldr	r3, [pc, #332]	; (80020c4 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	625a      	str	r2, [r3, #36]	; 0x24

		HAL_NVIC_DisableIRQ(Z_END_STOP_EXTI_IRQn);
 8001f7c:	2017      	movs	r0, #23
 8001f7e:	f001 fac6 	bl	800350e <HAL_NVIC_DisableIRQ>

		//Sending completion
		memset(sending_data,0,sizeof(sending_data));
 8001f82:	2232      	movs	r2, #50	; 0x32
 8001f84:	2100      	movs	r1, #0
 8001f86:	4850      	ldr	r0, [pc, #320]	; (80020c8 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8001f88:	f004 faca 	bl	8006520 <memset>
		sprintf(sending_data,"Homed \n");
 8001f8c:	494f      	ldr	r1, [pc, #316]	; (80020cc <HAL_GPIO_EXTI_Callback+0x1d4>)
 8001f8e:	484e      	ldr	r0, [pc, #312]	; (80020c8 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8001f90:	f004 ff38 	bl	8006e04 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*)sending_data,strlen(sending_data),HAL_MAX_DELAY);
 8001f94:	484c      	ldr	r0, [pc, #304]	; (80020c8 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8001f96:	f7fe f945 	bl	8000224 <strlen>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa2:	4949      	ldr	r1, [pc, #292]	; (80020c8 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8001fa4:	484a      	ldr	r0, [pc, #296]	; (80020d0 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8001fa6:	f003 fa66 	bl	8005476 <HAL_UART_Transmit>

		return;
 8001faa:	e07e      	b.n	80020aa <HAL_GPIO_EXTI_Callback+0x1b2>

		}
	else if(GPIO_Pin == Camera_input_Pin){
 8001fac:	88fb      	ldrh	r3, [r7, #6]
 8001fae:	2b08      	cmp	r3, #8
 8001fb0:	d150      	bne.n	8002054 <HAL_GPIO_EXTI_Callback+0x15c>
		//Camera pulse detected

		//checking which operation have to do

		if(flag == 0){
 8001fb2:	4b48      	ldr	r3, [pc, #288]	; (80020d4 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d118      	bne.n	8001fec <HAL_GPIO_EXTI_Callback+0xf4>
		// PC in homing mode so sending encoder data to PC
		// for every one camera click encoder will be send to PC through UART
		memset(sending_data,0,sizeof(sending_data));
 8001fba:	2232      	movs	r2, #50	; 0x32
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	4842      	ldr	r0, [pc, #264]	; (80020c8 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8001fc0:	f004 faae 	bl	8006520 <memset>
		sprintf(sending_data,"%ld\n",(int32_t)__HAL_TIM_GET_COUNTER(&htim2) );
 8001fc4:	4b3f      	ldr	r3, [pc, #252]	; (80020c4 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fca:	461a      	mov	r2, r3
 8001fcc:	4942      	ldr	r1, [pc, #264]	; (80020d8 <HAL_GPIO_EXTI_Callback+0x1e0>)
 8001fce:	483e      	ldr	r0, [pc, #248]	; (80020c8 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8001fd0:	f004 ff18 	bl	8006e04 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*)sending_data,strlen(sending_data),HAL_MAX_DELAY);
 8001fd4:	483c      	ldr	r0, [pc, #240]	; (80020c8 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8001fd6:	f7fe f925 	bl	8000224 <strlen>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe2:	4939      	ldr	r1, [pc, #228]	; (80020c8 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8001fe4:	483a      	ldr	r0, [pc, #232]	; (80020d0 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8001fe6:	f003 fa46 	bl	8005476 <HAL_UART_Transmit>
 8001fea:	e05e      	b.n	80020aa <HAL_GPIO_EXTI_Callback+0x1b2>
		}

		else if(flag == 1){
 8001fec:	4b39      	ldr	r3, [pc, #228]	; (80020d4 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d159      	bne.n	80020a8 <HAL_GPIO_EXTI_Callback+0x1b0>
			//PC in data capturing mode so toggle the led
			 switch(count){
 8001ff4:	4b39      	ldr	r3, [pc, #228]	; (80020dc <HAL_GPIO_EXTI_Callback+0x1e4>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d01f      	beq.n	800203c <HAL_GPIO_EXTI_Callback+0x144>
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	dc54      	bgt.n	80020aa <HAL_GPIO_EXTI_Callback+0x1b2>
 8002000:	2b00      	cmp	r3, #0
 8002002:	d002      	beq.n	800200a <HAL_GPIO_EXTI_Callback+0x112>
 8002004:	2b01      	cmp	r3, #1
 8002006:	d00a      	beq.n	800201e <HAL_GPIO_EXTI_Callback+0x126>
 8002008:	e04f      	b.n	80020aa <HAL_GPIO_EXTI_Callback+0x1b2>

			 case 0 :
				 // turning off all LEDs
				 stop_function(LED3);
 800200a:	2034      	movs	r0, #52	; 0x34
 800200c:	f7ff fb06 	bl	800161c <stop_function>
				 // incrementing count to change the LED color in next time
				 count++;
 8002010:	4b32      	ldr	r3, [pc, #200]	; (80020dc <HAL_GPIO_EXTI_Callback+0x1e4>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	3301      	adds	r3, #1
 8002016:	b2da      	uxtb	r2, r3
 8002018:	4b30      	ldr	r3, [pc, #192]	; (80020dc <HAL_GPIO_EXTI_Callback+0x1e4>)
 800201a:	701a      	strb	r2, [r3, #0]
				 break;
 800201c:	e045      	b.n	80020aa <HAL_GPIO_EXTI_Callback+0x1b2>
			 case 1:
				 //turning on 2nd LED only
				 stop_function(LED1);
 800201e:	2031      	movs	r0, #49	; 0x31
 8002020:	f7ff fafc 	bl	800161c <stop_function>
				 send_function(LED2,&ch2_buff1,&ch2_buff2);
 8002024:	4a2e      	ldr	r2, [pc, #184]	; (80020e0 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8002026:	492f      	ldr	r1, [pc, #188]	; (80020e4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8002028:	2032      	movs	r0, #50	; 0x32
 800202a:	f7ff fac5 	bl	80015b8 <send_function>
				 count++;// incrementing count to change the LED color in next time
 800202e:	4b2b      	ldr	r3, [pc, #172]	; (80020dc <HAL_GPIO_EXTI_Callback+0x1e4>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	3301      	adds	r3, #1
 8002034:	b2da      	uxtb	r2, r3
 8002036:	4b29      	ldr	r3, [pc, #164]	; (80020dc <HAL_GPIO_EXTI_Callback+0x1e4>)
 8002038:	701a      	strb	r2, [r3, #0]
				 break;
 800203a:	e036      	b.n	80020aa <HAL_GPIO_EXTI_Callback+0x1b2>
			 case 2:
				 //turning on 3rd LED only
				 stop_function(LED2); // turn off LED 2
 800203c:	2032      	movs	r0, #50	; 0x32
 800203e:	f7ff faed 	bl	800161c <stop_function>
				 send_function(LED3,&ch3_buff1,&ch3_buff2);// turn on LED 3
 8002042:	4a29      	ldr	r2, [pc, #164]	; (80020e8 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8002044:	4929      	ldr	r1, [pc, #164]	; (80020ec <HAL_GPIO_EXTI_Callback+0x1f4>)
 8002046:	2034      	movs	r0, #52	; 0x34
 8002048:	f7ff fab6 	bl	80015b8 <send_function>
				 count = 0;// set count to zero to Off the LED in next time
 800204c:	4b23      	ldr	r3, [pc, #140]	; (80020dc <HAL_GPIO_EXTI_Callback+0x1e4>)
 800204e:	2200      	movs	r2, #0
 8002050:	701a      	strb	r2, [r3, #0]
				 break;
 8002052:	e02a      	b.n	80020aa <HAL_GPIO_EXTI_Callback+0x1b2>

		}
	}


	else if( GPIO_Pin == Z_reference_Pin ){
 8002054:	88fb      	ldrh	r3, [r7, #6]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d113      	bne.n	8002082 <HAL_GPIO_EXTI_Callback+0x18a>
	// Z_reference_detected.

		// pulse for end stop
		HAL_GPIO_WritePin(End_stop_GPIO_Port, End_stop_Pin, GPIO_PIN_RESET);
 800205a:	2200      	movs	r2, #0
 800205c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002060:	4823      	ldr	r0, [pc, #140]	; (80020f0 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8002062:	f001 fc95 	bl	8003990 <HAL_GPIO_WritePin>
		__delay_ms(100); // custom delay function
 8002066:	2064      	movs	r0, #100	; 0x64
 8002068:	f000 f8ae 	bl	80021c8 <__delay_ms>
		HAL_GPIO_WritePin(End_stop_GPIO_Port, End_stop_Pin, GPIO_PIN_SET);
 800206c:	2201      	movs	r2, #1
 800206e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002072:	481f      	ldr	r0, [pc, #124]	; (80020f0 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8002074:	f001 fc8c 	bl	8003990 <HAL_GPIO_WritePin>
		//homing completed

		//Set encoder counting to zero
		__HAL_TIM_SET_COUNTER(&htim2,0);
 8002078:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <HAL_GPIO_EXTI_Callback+0x1cc>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2200      	movs	r2, #0
 800207e:	625a      	str	r2, [r3, #36]	; 0x24
 8002080:	e013      	b.n	80020aa <HAL_GPIO_EXTI_Callback+0x1b2>
	}

	else if(GPIO_Pin == Q_limit_Pin){
 8002082:	88fb      	ldrh	r3, [r7, #6]
 8002084:	2b20      	cmp	r3, #32
 8002086:	d110      	bne.n	80020aa <HAL_GPIO_EXTI_Callback+0x1b2>
	// Q_limit detected ( Lower Limit)
		//pulse for end stop
		HAL_GPIO_WritePin(End_stop_GPIO_Port, End_stop_Pin, GPIO_PIN_RESET);
 8002088:	2200      	movs	r2, #0
 800208a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800208e:	4818      	ldr	r0, [pc, #96]	; (80020f0 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8002090:	f001 fc7e 	bl	8003990 <HAL_GPIO_WritePin>
		__delay_ms(100);
 8002094:	2064      	movs	r0, #100	; 0x64
 8002096:	f000 f897 	bl	80021c8 <__delay_ms>
		HAL_GPIO_WritePin(End_stop_GPIO_Port, End_stop_Pin, GPIO_PIN_SET);
 800209a:	2201      	movs	r2, #1
 800209c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020a0:	4813      	ldr	r0, [pc, #76]	; (80020f0 <HAL_GPIO_EXTI_Callback+0x1f8>)
 80020a2:	f001 fc75 	bl	8003990 <HAL_GPIO_WritePin>
 80020a6:	e000      	b.n	80020aa <HAL_GPIO_EXTI_Callback+0x1b2>
		}
 80020a8:	bf00      	nop

	else if(GPIO_Pin == P_limit_Pin){
	// P_limit detected(Upper Limit)
	}

}
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	20000490 	.word	0x20000490
 80020b4:	2000004c 	.word	0x2000004c
 80020b8:	20000491 	.word	0x20000491
 80020bc:	20000483 	.word	0x20000483
 80020c0:	20000450 	.word	0x20000450
 80020c4:	20000334 	.word	0x20000334
 80020c8:	20000010 	.word	0x20000010
 80020cc:	0800abd4 	.word	0x0800abd4
 80020d0:	2000040c 	.word	0x2000040c
 80020d4:	20000492 	.word	0x20000492
 80020d8:	0800abdc 	.word	0x0800abdc
 80020dc:	20000250 	.word	0x20000250
 80020e0:	200002d7 	.word	0x200002d7
 80020e4:	200002d6 	.word	0x200002d6
 80020e8:	200002d9 	.word	0x200002d9
 80020ec:	200002d8 	.word	0x200002d8
 80020f0:	40020400 	.word	0x40020400

080020f4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]

	if(huart == &huart2){
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a2a      	ldr	r2, [pc, #168]	; (80021a8 <HAL_UART_RxCpltCallback+0xb4>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d14d      	bne.n	80021a0 <HAL_UART_RxCpltCallback+0xac>
    /* Receive one byte in the receive data register */
//    uint8_t rxByte = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);

    /* Check if the received character is a /r or buffer is full */
    if (rxByte == '\r' || RxIndex == 50 - 1) // 50 is buffer length
 8002104:	4b29      	ldr	r3, [pc, #164]	; (80021ac <HAL_UART_RxCpltCallback+0xb8>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b0d      	cmp	r3, #13
 800210a:	d003      	beq.n	8002114 <HAL_UART_RxCpltCallback+0x20>
 800210c:	4b28      	ldr	r3, [pc, #160]	; (80021b0 <HAL_UART_RxCpltCallback+0xbc>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b31      	cmp	r3, #49	; 0x31
 8002112:	d111      	bne.n	8002138 <HAL_UART_RxCpltCallback+0x44>
    {
        /* Set flag to indicate command is complete */
        Exec_command = 1;
 8002114:	4b27      	ldr	r3, [pc, #156]	; (80021b4 <HAL_UART_RxCpltCallback+0xc0>)
 8002116:	2201      	movs	r2, #1
 8002118:	701a      	strb	r2, [r3, #0]

        /* Add null character to terminate string */
        RxBuffer[RxIndex] = 0;
 800211a:	4b25      	ldr	r3, [pc, #148]	; (80021b0 <HAL_UART_RxCpltCallback+0xbc>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	461a      	mov	r2, r3
 8002120:	4b25      	ldr	r3, [pc, #148]	; (80021b8 <HAL_UART_RxCpltCallback+0xc4>)
 8002122:	2100      	movs	r1, #0
 8002124:	5499      	strb	r1, [r3, r2]

        /* Resetting RxIndex to zero */
        RxIndex = 0;
 8002126:	4b22      	ldr	r3, [pc, #136]	; (80021b0 <HAL_UART_RxCpltCallback+0xbc>)
 8002128:	2200      	movs	r2, #0
 800212a:	701a      	strb	r2, [r3, #0]

        /* Restart the UART Interrupt */
		HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 800212c:	2201      	movs	r2, #1
 800212e:	491f      	ldr	r1, [pc, #124]	; (80021ac <HAL_UART_RxCpltCallback+0xb8>)
 8002130:	481d      	ldr	r0, [pc, #116]	; (80021a8 <HAL_UART_RxCpltCallback+0xb4>)
 8002132:	f003 fa32 	bl	800559a <HAL_UART_Receive_IT>
 8002136:	e033      	b.n	80021a0 <HAL_UART_RxCpltCallback+0xac>
    }

    else
    {
    	/****** Special Character Checking ***********/
    	if(rxByte == 'e' ){
 8002138:	4b1c      	ldr	r3, [pc, #112]	; (80021ac <HAL_UART_RxCpltCallback+0xb8>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b65      	cmp	r3, #101	; 0x65
 800213e:	d11d      	bne.n	800217c <HAL_UART_RxCpltCallback+0x88>
		//sending encoder value through UART

		memset(sending_data,0,sizeof(sending_data));
 8002140:	2232      	movs	r2, #50	; 0x32
 8002142:	2100      	movs	r1, #0
 8002144:	481d      	ldr	r0, [pc, #116]	; (80021bc <HAL_UART_RxCpltCallback+0xc8>)
 8002146:	f004 f9eb 	bl	8006520 <memset>
		sprintf(sending_data,"%ld\n",__HAL_TIM_GET_COUNTER(&htim2) );
 800214a:	4b1d      	ldr	r3, [pc, #116]	; (80021c0 <HAL_UART_RxCpltCallback+0xcc>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002150:	461a      	mov	r2, r3
 8002152:	491c      	ldr	r1, [pc, #112]	; (80021c4 <HAL_UART_RxCpltCallback+0xd0>)
 8002154:	4819      	ldr	r0, [pc, #100]	; (80021bc <HAL_UART_RxCpltCallback+0xc8>)
 8002156:	f004 fe55 	bl	8006e04 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*)sending_data,strlen(sending_data),HAL_MAX_DELAY);
 800215a:	4818      	ldr	r0, [pc, #96]	; (80021bc <HAL_UART_RxCpltCallback+0xc8>)
 800215c:	f7fe f862 	bl	8000224 <strlen>
 8002160:	4603      	mov	r3, r0
 8002162:	b29a      	uxth	r2, r3
 8002164:	f04f 33ff 	mov.w	r3, #4294967295
 8002168:	4914      	ldr	r1, [pc, #80]	; (80021bc <HAL_UART_RxCpltCallback+0xc8>)
 800216a:	480f      	ldr	r0, [pc, #60]	; (80021a8 <HAL_UART_RxCpltCallback+0xb4>)
 800216c:	f003 f983 	bl	8005476 <HAL_UART_Transmit>


		 /* Restart the UART Interrupt */
		HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 8002170:	2201      	movs	r2, #1
 8002172:	490e      	ldr	r1, [pc, #56]	; (80021ac <HAL_UART_RxCpltCallback+0xb8>)
 8002174:	480c      	ldr	r0, [pc, #48]	; (80021a8 <HAL_UART_RxCpltCallback+0xb4>)
 8002176:	f003 fa10 	bl	800559a <HAL_UART_Receive_IT>

		return;
 800217a:	e011      	b.n	80021a0 <HAL_UART_RxCpltCallback+0xac>
    	}

        /* Add the character to the buffer */
        RxBuffer[RxIndex] = rxByte;
 800217c:	4b0c      	ldr	r3, [pc, #48]	; (80021b0 <HAL_UART_RxCpltCallback+0xbc>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	461a      	mov	r2, r3
 8002182:	4b0a      	ldr	r3, [pc, #40]	; (80021ac <HAL_UART_RxCpltCallback+0xb8>)
 8002184:	7819      	ldrb	r1, [r3, #0]
 8002186:	4b0c      	ldr	r3, [pc, #48]	; (80021b8 <HAL_UART_RxCpltCallback+0xc4>)
 8002188:	5499      	strb	r1, [r3, r2]
        RxIndex++;
 800218a:	4b09      	ldr	r3, [pc, #36]	; (80021b0 <HAL_UART_RxCpltCallback+0xbc>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	3301      	adds	r3, #1
 8002190:	b2da      	uxtb	r2, r3
 8002192:	4b07      	ldr	r3, [pc, #28]	; (80021b0 <HAL_UART_RxCpltCallback+0xbc>)
 8002194:	701a      	strb	r2, [r3, #0]

        /* Restart the UART Interrupt */
        HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 8002196:	2201      	movs	r2, #1
 8002198:	4904      	ldr	r1, [pc, #16]	; (80021ac <HAL_UART_RxCpltCallback+0xb8>)
 800219a:	4803      	ldr	r0, [pc, #12]	; (80021a8 <HAL_UART_RxCpltCallback+0xb4>)
 800219c:	f003 f9fd 	bl	800559a <HAL_UART_Receive_IT>

    }

	}
}
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	2000040c 	.word	0x2000040c
 80021ac:	20000484 	.word	0x20000484
 80021b0:	20000482 	.word	0x20000482
 80021b4:	20000483 	.word	0x20000483
 80021b8:	20000450 	.word	0x20000450
 80021bc:	20000010 	.word	0x20000010
 80021c0:	20000334 	.word	0x20000334
 80021c4:	0800abdc 	.word	0x0800abdc

080021c8 <__delay_ms>:



void __delay_ms(int32_t k){
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
	int32_t i,j;
	for(i=0;i<k;i++)
 80021d0:	2300      	movs	r3, #0
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	e00d      	b.n	80021f2 <__delay_ms+0x2a>
		for(j=0;j<3000;j++){}
 80021d6:	2300      	movs	r3, #0
 80021d8:	60bb      	str	r3, [r7, #8]
 80021da:	e002      	b.n	80021e2 <__delay_ms+0x1a>
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	3301      	adds	r3, #1
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80021e8:	4293      	cmp	r3, r2
 80021ea:	ddf7      	ble.n	80021dc <__delay_ms+0x14>
	for(i=0;i<k;i++)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	3301      	adds	r3, #1
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	dbed      	blt.n	80021d6 <__delay_ms+0xe>
}
 80021fa:	bf00      	nop
 80021fc:	bf00      	nop
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800220c:	b672      	cpsid	i
}
 800220e:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  //sending the ready status
	memset(sending_data,0,sizeof(sending_data));
 8002210:	2232      	movs	r2, #50	; 0x32
 8002212:	2100      	movs	r1, #0
 8002214:	4809      	ldr	r0, [pc, #36]	; (800223c <Error_Handler+0x34>)
 8002216:	f004 f983 	bl	8006520 <memset>
	sprintf(sending_data,"ERROR");
 800221a:	4909      	ldr	r1, [pc, #36]	; (8002240 <Error_Handler+0x38>)
 800221c:	4807      	ldr	r0, [pc, #28]	; (800223c <Error_Handler+0x34>)
 800221e:	f004 fdf1 	bl	8006e04 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)sending_data,strlen(sending_data),HAL_MAX_DELAY);
 8002222:	4806      	ldr	r0, [pc, #24]	; (800223c <Error_Handler+0x34>)
 8002224:	f7fd fffe 	bl	8000224 <strlen>
 8002228:	4603      	mov	r3, r0
 800222a:	b29a      	uxth	r2, r3
 800222c:	f04f 33ff 	mov.w	r3, #4294967295
 8002230:	4902      	ldr	r1, [pc, #8]	; (800223c <Error_Handler+0x34>)
 8002232:	4804      	ldr	r0, [pc, #16]	; (8002244 <Error_Handler+0x3c>)
 8002234:	f003 f91f 	bl	8005476 <HAL_UART_Transmit>
	memset(sending_data,0,sizeof(sending_data));
 8002238:	e7ea      	b.n	8002210 <Error_Handler+0x8>
 800223a:	bf00      	nop
 800223c:	20000010 	.word	0x20000010
 8002240:	0800abe4 	.word	0x0800abe4
 8002244:	2000040c 	.word	0x2000040c

08002248 <moveTo>:




void moveTo(int32_t absolute)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
	absolute  = (absolute<min_pos) ? min_pos :( (absolute<max_pos) ? absolute : max_pos );
 8002250:	4b0e      	ldr	r3, [pc, #56]	; (800228c <moveTo+0x44>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	429a      	cmp	r2, r3
 8002258:	db06      	blt.n	8002268 <moveTo+0x20>
 800225a:	4b0d      	ldr	r3, [pc, #52]	; (8002290 <moveTo+0x48>)
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4293      	cmp	r3, r2
 8002262:	bfa8      	it	ge
 8002264:	4613      	movge	r3, r2
 8002266:	e001      	b.n	800226c <moveTo+0x24>
 8002268:	4b08      	ldr	r3, [pc, #32]	; (800228c <moveTo+0x44>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	607b      	str	r3, [r7, #4]
    if (_targetPos != absolute)
 800226e:	4b09      	ldr	r3, [pc, #36]	; (8002294 <moveTo+0x4c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	429a      	cmp	r2, r3
 8002276:	d004      	beq.n	8002282 <moveTo+0x3a>
    {
	_targetPos = absolute;
 8002278:	4a06      	ldr	r2, [pc, #24]	; (8002294 <moveTo+0x4c>)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6013      	str	r3, [r2, #0]
	computeNewSpeed();
 800227e:	f000 f92b 	bl	80024d8 <computeNewSpeed>
	// compute new n?
    }
}
 8002282:	bf00      	nop
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	20000488 	.word	0x20000488
 8002290:	20000048 	.word	0x20000048
 8002294:	200004b8 	.word	0x200004b8

08002298 <move>:

void move(int32_t relative)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
    moveTo(_currentPos + relative);
 80022a0:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <move+0x20>)
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4413      	add	r3, r2
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff ffcd 	bl	8002248 <moveTo>
}
 80022ae:	bf00      	nop
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	200004b4 	.word	0x200004b4

080022bc <stepper_setup>:

void stepper_setup(GPIO_TypeDef*_step_port,uint16_t _step_pin, GPIO_TypeDef*  _dir_port,uint16_t _dir_pin ){
 80022bc:	b480      	push	{r7}
 80022be:	b087      	sub	sp, #28
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	607a      	str	r2, [r7, #4]
 80022c6:	461a      	mov	r2, r3
 80022c8:	460b      	mov	r3, r1
 80022ca:	817b      	strh	r3, [r7, #10]
 80022cc:	4613      	mov	r3, r2
 80022ce:	813b      	strh	r3, [r7, #8]


	step_port = _step_port;
 80022d0:	4a33      	ldr	r2, [pc, #204]	; (80023a0 <stepper_setup+0xe4>)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6013      	str	r3, [r2, #0]
	step_pin = _step_pin;
 80022d6:	4a33      	ldr	r2, [pc, #204]	; (80023a4 <stepper_setup+0xe8>)
 80022d8:	897b      	ldrh	r3, [r7, #10]
 80022da:	8013      	strh	r3, [r2, #0]
	dir_port = _dir_port;
 80022dc:	4a32      	ldr	r2, [pc, #200]	; (80023a8 <stepper_setup+0xec>)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6013      	str	r3, [r2, #0]
	dir_pin = _dir_pin;
 80022e2:	4a32      	ldr	r2, [pc, #200]	; (80023ac <stepper_setup+0xf0>)
 80022e4:	893b      	ldrh	r3, [r7, #8]
 80022e6:	8013      	strh	r3, [r2, #0]


	_stepInterval = 0;
 80022e8:	4b31      	ldr	r3, [pc, #196]	; (80023b0 <stepper_setup+0xf4>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
	_minPulseWidth = 1;
 80022ee:	4b31      	ldr	r3, [pc, #196]	; (80023b4 <stepper_setup+0xf8>)
 80022f0:	2201      	movs	r2, #1
 80022f2:	601a      	str	r2, [r3, #0]
	_currentPos = 0;
 80022f4:	4b30      	ldr	r3, [pc, #192]	; (80023b8 <stepper_setup+0xfc>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
	_targetPos = 0;
 80022fa:	4b30      	ldr	r3, [pc, #192]	; (80023bc <stepper_setup+0x100>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
	_speed = 0.0;
 8002300:	4b2f      	ldr	r3, [pc, #188]	; (80023c0 <stepper_setup+0x104>)
 8002302:	f04f 0200 	mov.w	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
	_maxSpeed = 30.0;
 8002308:	4b2e      	ldr	r3, [pc, #184]	; (80023c4 <stepper_setup+0x108>)
 800230a:	4a2f      	ldr	r2, [pc, #188]	; (80023c8 <stepper_setup+0x10c>)
 800230c:	601a      	str	r2, [r3, #0]
	_acceleration = 0.0;
 800230e:	4b2f      	ldr	r3, [pc, #188]	; (80023cc <stepper_setup+0x110>)
 8002310:	f04f 0200 	mov.w	r2, #0
 8002314:	601a      	str	r2, [r3, #0]
	_sqrt_twoa = 1.0;
 8002316:	4b2e      	ldr	r3, [pc, #184]	; (80023d0 <stepper_setup+0x114>)
 8002318:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800231c:	601a      	str	r2, [r3, #0]
	_stepInterval = 0;
 800231e:	4b24      	ldr	r3, [pc, #144]	; (80023b0 <stepper_setup+0xf4>)
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
	_minPulseWidth = 1;
 8002324:	4b23      	ldr	r3, [pc, #140]	; (80023b4 <stepper_setup+0xf8>)
 8002326:	2201      	movs	r2, #1
 8002328:	601a      	str	r2, [r3, #0]
	_enablePin = 0xff;
 800232a:	4b2a      	ldr	r3, [pc, #168]	; (80023d4 <stepper_setup+0x118>)
 800232c:	22ff      	movs	r2, #255	; 0xff
 800232e:	701a      	strb	r2, [r3, #0]
	_lastStepTime = 0;
 8002330:	4b29      	ldr	r3, [pc, #164]	; (80023d8 <stepper_setup+0x11c>)
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]




	// NEW
	_n = 0;
 8002336:	4b29      	ldr	r3, [pc, #164]	; (80023dc <stepper_setup+0x120>)
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
	_c0 = 0.0;
 800233c:	4b28      	ldr	r3, [pc, #160]	; (80023e0 <stepper_setup+0x124>)
 800233e:	f04f 0200 	mov.w	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
	_cn = 0.0;
 8002344:	4b27      	ldr	r3, [pc, #156]	; (80023e4 <stepper_setup+0x128>)
 8002346:	f04f 0200 	mov.w	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
	_cmin = 1.0;
 800234c:	4b26      	ldr	r3, [pc, #152]	; (80023e8 <stepper_setup+0x12c>)
 800234e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002352:	601a      	str	r2, [r3, #0]
	_direction = DIRECTION_CCW;
 8002354:	4b25      	ldr	r3, [pc, #148]	; (80023ec <stepper_setup+0x130>)
 8002356:	2200      	movs	r2, #0
 8002358:	701a      	strb	r2, [r3, #0]

	int i;
	for (i = 0; i < 4; i++)
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]
 800235e:	e007      	b.n	8002370 <stepper_setup+0xb4>
	_pinInverted[i] = 0;
 8002360:	4a23      	ldr	r2, [pc, #140]	; (80023f0 <stepper_setup+0x134>)
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	4413      	add	r3, r2
 8002366:	2200      	movs	r2, #0
 8002368:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 4; i++)
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	3301      	adds	r3, #1
 800236e:	617b      	str	r3, [r7, #20]
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	2b03      	cmp	r3, #3
 8002374:	ddf4      	ble.n	8002360 <stepper_setup+0xa4>


	for (i = 0; i < 4; i++)
 8002376:	2300      	movs	r3, #0
 8002378:	617b      	str	r3, [r7, #20]
 800237a:	e007      	b.n	800238c <stepper_setup+0xd0>
	_pinInverted[i] = 0;
 800237c:	4a1c      	ldr	r2, [pc, #112]	; (80023f0 <stepper_setup+0x134>)
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	4413      	add	r3, r2
 8002382:	2200      	movs	r2, #0
 8002384:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 4; i++)
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	3301      	adds	r3, #1
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	2b03      	cmp	r3, #3
 8002390:	ddf4      	ble.n	800237c <stepper_setup+0xc0>

}
 8002392:	bf00      	nop
 8002394:	bf00      	nop
 8002396:	371c      	adds	r7, #28
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	2000049c 	.word	0x2000049c
 80023a4:	200004a0 	.word	0x200004a0
 80023a8:	200004a4 	.word	0x200004a4
 80023ac:	200004a8 	.word	0x200004a8
 80023b0:	200004ac 	.word	0x200004ac
 80023b4:	200004d0 	.word	0x200004d0
 80023b8:	200004b4 	.word	0x200004b4
 80023bc:	200004b8 	.word	0x200004b8
 80023c0:	200004bc 	.word	0x200004bc
 80023c4:	200004c0 	.word	0x200004c0
 80023c8:	41f00000 	.word	0x41f00000
 80023cc:	200004c4 	.word	0x200004c4
 80023d0:	200004c8 	.word	0x200004c8
 80023d4:	200004d4 	.word	0x200004d4
 80023d8:	200004cc 	.word	0x200004cc
 80023dc:	200004d8 	.word	0x200004d8
 80023e0:	200004dc 	.word	0x200004dc
 80023e4:	200004e0 	.word	0x200004e0
 80023e8:	200004e4 	.word	0x200004e4
 80023ec:	200004aa 	.word	0x200004aa
 80023f0:	200004b0 	.word	0x200004b0

080023f4 <runSpeed>:


_Bool runSpeed()
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
    // Dont do anything unless we actually have a step interval
    if (!_stepInterval)
 80023fa:	4b12      	ldr	r3, [pc, #72]	; (8002444 <runSpeed+0x50>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <runSpeed+0x12>
	return false;
 8002402:	2300      	movs	r3, #0
 8002404:	e01a      	b.n	800243c <runSpeed+0x48>

    uint32_t time =  __HAL_TIM_GET_COUNTER(&htim6);
 8002406:	4b10      	ldr	r3, [pc, #64]	; (8002448 <runSpeed+0x54>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240c:	607b      	str	r3, [r7, #4]
    if (time  >= _stepInterval)
 800240e:	4b0d      	ldr	r3, [pc, #52]	; (8002444 <runSpeed+0x50>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	429a      	cmp	r2, r3
 8002416:	d310      	bcc.n	800243a <runSpeed+0x46>
//	{
//	    // Anticlockwise
//	    _currentPos -= 1;
//	}

	step(_currentPos);
 8002418:	4b0c      	ldr	r3, [pc, #48]	; (800244c <runSpeed+0x58>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f000 fb7d 	bl	8002b1c <step>
	_currentPos = __HAL_TIM_GET_COUNTER(&htim2);
 8002422:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <runSpeed+0x5c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002428:	461a      	mov	r2, r3
 800242a:	4b08      	ldr	r3, [pc, #32]	; (800244c <runSpeed+0x58>)
 800242c:	601a      	str	r2, [r3, #0]

	__HAL_TIM_SET_COUNTER(&htim6,0); //resetting the timer
 800242e:	4b06      	ldr	r3, [pc, #24]	; (8002448 <runSpeed+0x54>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2200      	movs	r2, #0
 8002434:	625a      	str	r2, [r3, #36]	; 0x24
	//_lastStepTime = time; // Caution: does not account for costs in step()

	return true;
 8002436:	2301      	movs	r3, #1
 8002438:	e000      	b.n	800243c <runSpeed+0x48>
    }
    else
    {
	return false;
 800243a:	2300      	movs	r3, #0
    }
}
 800243c:	4618      	mov	r0, r3
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	200004ac 	.word	0x200004ac
 8002448:	2000037c 	.word	0x2000037c
 800244c:	200004b4 	.word	0x200004b4
 8002450:	20000334 	.word	0x20000334

08002454 <distanceToGo>:

int32_t distanceToGo()
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
    return _targetPos - _currentPos;
 8002458:	4b04      	ldr	r3, [pc, #16]	; (800246c <distanceToGo+0x18>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	4b04      	ldr	r3, [pc, #16]	; (8002470 <distanceToGo+0x1c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	1ad3      	subs	r3, r2, r3
}
 8002462:	4618      	mov	r0, r3
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	200004b8 	.word	0x200004b8
 8002470:	200004b4 	.word	0x200004b4

08002474 <currentPosition>:
{
    return _targetPos;
}

int32_t currentPosition()
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
    return _currentPos;
 8002478:	4b03      	ldr	r3, [pc, #12]	; (8002488 <currentPosition+0x14>)
 800247a:	681b      	ldr	r3, [r3, #0]
}
 800247c:	4618      	mov	r0, r3
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	200004b4 	.word	0x200004b4

0800248c <setCurrentPosition>:

void setCurrentPosition(int32_t position)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
    _targetPos = _currentPos = position;
 8002494:	4a0b      	ldr	r2, [pc, #44]	; (80024c4 <setCurrentPosition+0x38>)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	4b0a      	ldr	r3, [pc, #40]	; (80024c4 <setCurrentPosition+0x38>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a0a      	ldr	r2, [pc, #40]	; (80024c8 <setCurrentPosition+0x3c>)
 80024a0:	6013      	str	r3, [r2, #0]
    _n = 0;
 80024a2:	4b0a      	ldr	r3, [pc, #40]	; (80024cc <setCurrentPosition+0x40>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
    _stepInterval = 0;
 80024a8:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <setCurrentPosition+0x44>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	601a      	str	r2, [r3, #0]
    _speed = 0.0;
 80024ae:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <setCurrentPosition+0x48>)
 80024b0:	f04f 0200 	mov.w	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
}
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	200004b4 	.word	0x200004b4
 80024c8:	200004b8 	.word	0x200004b8
 80024cc:	200004d8 	.word	0x200004d8
 80024d0:	200004ac 	.word	0x200004ac
 80024d4:	200004bc 	.word	0x200004bc

080024d8 <computeNewSpeed>:

uint32_t computeNewSpeed()
{
 80024d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80024dc:	b082      	sub	sp, #8
 80024de:	af00      	add	r7, sp, #0
    int32_t distanceTo = distanceToGo(); // +ve is clockwise from curent location
 80024e0:	f7ff ffb8 	bl	8002454 <distanceToGo>
 80024e4:	6078      	str	r0, [r7, #4]

    int32_t stepsToStop = (int32_t)((_speed * _speed) / (2.0 * _acceleration)); // Equation 16
 80024e6:	4b97      	ldr	r3, [pc, #604]	; (8002744 <computeNewSpeed+0x26c>)
 80024e8:	ed93 7a00 	vldr	s14, [r3]
 80024ec:	4b95      	ldr	r3, [pc, #596]	; (8002744 <computeNewSpeed+0x26c>)
 80024ee:	edd3 7a00 	vldr	s15, [r3]
 80024f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024f6:	ee17 0a90 	vmov	r0, s15
 80024fa:	f7fe f855 	bl	80005a8 <__aeabi_f2d>
 80024fe:	4604      	mov	r4, r0
 8002500:	460d      	mov	r5, r1
 8002502:	4b91      	ldr	r3, [pc, #580]	; (8002748 <computeNewSpeed+0x270>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f7fe f84e 	bl	80005a8 <__aeabi_f2d>
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	f7fd feec 	bl	80002ec <__adddf3>
 8002514:	4602      	mov	r2, r0
 8002516:	460b      	mov	r3, r1
 8002518:	4620      	mov	r0, r4
 800251a:	4629      	mov	r1, r5
 800251c:	f7fe f9c6 	bl	80008ac <__aeabi_ddiv>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	4610      	mov	r0, r2
 8002526:	4619      	mov	r1, r3
 8002528:	f7fe fb46 	bl	8000bb8 <__aeabi_d2iz>
 800252c:	4603      	mov	r3, r0
 800252e:	603b      	str	r3, [r7, #0]

    if (distanceTo == 0 && stepsToStop <= 1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10f      	bne.n	8002556 <computeNewSpeed+0x7e>
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	2b01      	cmp	r3, #1
 800253a:	dc0c      	bgt.n	8002556 <computeNewSpeed+0x7e>
    {
	// We are at the target and its time to stop
	_stepInterval = 0;
 800253c:	4b83      	ldr	r3, [pc, #524]	; (800274c <computeNewSpeed+0x274>)
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]
	_speed = 0.0;
 8002542:	4b80      	ldr	r3, [pc, #512]	; (8002744 <computeNewSpeed+0x26c>)
 8002544:	f04f 0200 	mov.w	r2, #0
 8002548:	601a      	str	r2, [r3, #0]
	_n = 0;
 800254a:	4b81      	ldr	r3, [pc, #516]	; (8002750 <computeNewSpeed+0x278>)
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
	return _stepInterval;
 8002550:	4b7e      	ldr	r3, [pc, #504]	; (800274c <computeNewSpeed+0x274>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	e0f0      	b.n	8002738 <computeNewSpeed+0x260>
    }

    if (distanceTo > 0)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	dd25      	ble.n	80025a8 <computeNewSpeed+0xd0>
    {
	// We are anti clockwise from the target
	// Need to go clockwise from here, maybe decelerate now
	if (_n > 0)
 800255c:	4b7c      	ldr	r3, [pc, #496]	; (8002750 <computeNewSpeed+0x278>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	dd0f      	ble.n	8002584 <computeNewSpeed+0xac>
	{
	    // Currently accelerating, need to decel now? Or maybe going the wrong way?
	    if ((stepsToStop >= distanceTo) || _direction == DIRECTION_CCW)
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	429a      	cmp	r2, r3
 800256a:	da06      	bge.n	800257a <computeNewSpeed+0xa2>
 800256c:	4b79      	ldr	r3, [pc, #484]	; (8002754 <computeNewSpeed+0x27c>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	f083 0301 	eor.w	r3, r3, #1
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d040      	beq.n	80025fc <computeNewSpeed+0x124>
		_n = -stepsToStop; // Start deceleration
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	425b      	negs	r3, r3
 800257e:	4a74      	ldr	r2, [pc, #464]	; (8002750 <computeNewSpeed+0x278>)
 8002580:	6013      	str	r3, [r2, #0]
 8002582:	e03b      	b.n	80025fc <computeNewSpeed+0x124>
	}
	else if (_n < 0)
 8002584:	4b72      	ldr	r3, [pc, #456]	; (8002750 <computeNewSpeed+0x278>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	da37      	bge.n	80025fc <computeNewSpeed+0x124>
	{
	    // Currently decelerating, need to accel again?
	    if ((stepsToStop < distanceTo) && _direction == DIRECTION_CW)
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	429a      	cmp	r2, r3
 8002592:	da33      	bge.n	80025fc <computeNewSpeed+0x124>
 8002594:	4b6f      	ldr	r3, [pc, #444]	; (8002754 <computeNewSpeed+0x27c>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d02f      	beq.n	80025fc <computeNewSpeed+0x124>
		_n = -_n; // Start accceleration
 800259c:	4b6c      	ldr	r3, [pc, #432]	; (8002750 <computeNewSpeed+0x278>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	425b      	negs	r3, r3
 80025a2:	4a6b      	ldr	r2, [pc, #428]	; (8002750 <computeNewSpeed+0x278>)
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	e029      	b.n	80025fc <computeNewSpeed+0x124>
	}
    }
    else if (distanceTo < 0)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	da26      	bge.n	80025fc <computeNewSpeed+0x124>
    {
	// We are clockwise from the target
	// Need to go anticlockwise from here, maybe decelerate
	if (_n > 0)
 80025ae:	4b68      	ldr	r3, [pc, #416]	; (8002750 <computeNewSpeed+0x278>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	dd0d      	ble.n	80025d2 <computeNewSpeed+0xfa>
	{
	    // Currently accelerating, need to decel now? Or maybe going the wrong way?
	    if ((stepsToStop >= -distanceTo) || _direction == DIRECTION_CW)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	425b      	negs	r3, r3
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	429a      	cmp	r2, r3
 80025be:	da03      	bge.n	80025c8 <computeNewSpeed+0xf0>
 80025c0:	4b64      	ldr	r3, [pc, #400]	; (8002754 <computeNewSpeed+0x27c>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d019      	beq.n	80025fc <computeNewSpeed+0x124>
		_n = -stepsToStop; // Start deceleration
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	425b      	negs	r3, r3
 80025cc:	4a60      	ldr	r2, [pc, #384]	; (8002750 <computeNewSpeed+0x278>)
 80025ce:	6013      	str	r3, [r2, #0]
 80025d0:	e014      	b.n	80025fc <computeNewSpeed+0x124>
	}
	else if (_n < 0)
 80025d2:	4b5f      	ldr	r3, [pc, #380]	; (8002750 <computeNewSpeed+0x278>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	da10      	bge.n	80025fc <computeNewSpeed+0x124>
	{
	    // Currently decelerating, need to accel again?
	    if ((stepsToStop < -distanceTo) && _direction == DIRECTION_CCW)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	425b      	negs	r3, r3
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	da0b      	bge.n	80025fc <computeNewSpeed+0x124>
 80025e4:	4b5b      	ldr	r3, [pc, #364]	; (8002754 <computeNewSpeed+0x27c>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	f083 0301 	eor.w	r3, r3, #1
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d004      	beq.n	80025fc <computeNewSpeed+0x124>
		_n = -_n; // Start accceleration
 80025f2:	4b57      	ldr	r3, [pc, #348]	; (8002750 <computeNewSpeed+0x278>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	425b      	negs	r3, r3
 80025f8:	4a55      	ldr	r2, [pc, #340]	; (8002750 <computeNewSpeed+0x278>)
 80025fa:	6013      	str	r3, [r2, #0]
	}
    }

    // Need to accelerate or decelerate
    if (_n == 0)
 80025fc:	4b54      	ldr	r3, [pc, #336]	; (8002750 <computeNewSpeed+0x278>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10c      	bne.n	800261e <computeNewSpeed+0x146>
    {
	// First step from stopped
	_cn = _c0;
 8002604:	4b54      	ldr	r3, [pc, #336]	; (8002758 <computeNewSpeed+0x280>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a54      	ldr	r2, [pc, #336]	; (800275c <computeNewSpeed+0x284>)
 800260a:	6013      	str	r3, [r2, #0]
	_direction = (distanceTo > 0) ? DIRECTION_CW : DIRECTION_CCW;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	bfcc      	ite	gt
 8002612:	2301      	movgt	r3, #1
 8002614:	2300      	movle	r3, #0
 8002616:	b2da      	uxtb	r2, r3
 8002618:	4b4e      	ldr	r3, [pc, #312]	; (8002754 <computeNewSpeed+0x27c>)
 800261a:	701a      	strb	r2, [r3, #0]
 800261c:	e04d      	b.n	80026ba <computeNewSpeed+0x1e2>
    }
    else
    {
	// Subsequent step. Works for accel (n is +_ve) and decel (n is -ve).
	_cn = _cn - ((2.0 * _cn) / ((4.0 * _n) + 1)); // Equation 13
 800261e:	4b4f      	ldr	r3, [pc, #316]	; (800275c <computeNewSpeed+0x284>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f7fd ffc0 	bl	80005a8 <__aeabi_f2d>
 8002628:	4604      	mov	r4, r0
 800262a:	460d      	mov	r5, r1
 800262c:	4b4b      	ldr	r3, [pc, #300]	; (800275c <computeNewSpeed+0x284>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4618      	mov	r0, r3
 8002632:	f7fd ffb9 	bl	80005a8 <__aeabi_f2d>
 8002636:	4602      	mov	r2, r0
 8002638:	460b      	mov	r3, r1
 800263a:	f7fd fe57 	bl	80002ec <__adddf3>
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	4690      	mov	r8, r2
 8002644:	4699      	mov	r9, r3
 8002646:	4b42      	ldr	r3, [pc, #264]	; (8002750 <computeNewSpeed+0x278>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f7fd ff9a 	bl	8000584 <__aeabi_i2d>
 8002650:	f04f 0200 	mov.w	r2, #0
 8002654:	4b42      	ldr	r3, [pc, #264]	; (8002760 <computeNewSpeed+0x288>)
 8002656:	f7fd ffff 	bl	8000658 <__aeabi_dmul>
 800265a:	4602      	mov	r2, r0
 800265c:	460b      	mov	r3, r1
 800265e:	4610      	mov	r0, r2
 8002660:	4619      	mov	r1, r3
 8002662:	f04f 0200 	mov.w	r2, #0
 8002666:	4b3f      	ldr	r3, [pc, #252]	; (8002764 <computeNewSpeed+0x28c>)
 8002668:	f7fd fe40 	bl	80002ec <__adddf3>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	4640      	mov	r0, r8
 8002672:	4649      	mov	r1, r9
 8002674:	f7fe f91a 	bl	80008ac <__aeabi_ddiv>
 8002678:	4602      	mov	r2, r0
 800267a:	460b      	mov	r3, r1
 800267c:	4620      	mov	r0, r4
 800267e:	4629      	mov	r1, r5
 8002680:	f7fd fe32 	bl	80002e8 <__aeabi_dsub>
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	4610      	mov	r0, r2
 800268a:	4619      	mov	r1, r3
 800268c:	f7fe fadc 	bl	8000c48 <__aeabi_d2f>
 8002690:	4603      	mov	r3, r0
 8002692:	4a32      	ldr	r2, [pc, #200]	; (800275c <computeNewSpeed+0x284>)
 8002694:	6013      	str	r3, [r2, #0]
	_cn = _cn >_cmin ? _cn:_cmin; // max(_cn,_cmin)
 8002696:	4b31      	ldr	r3, [pc, #196]	; (800275c <computeNewSpeed+0x284>)
 8002698:	ed93 7a00 	vldr	s14, [r3]
 800269c:	4b32      	ldr	r3, [pc, #200]	; (8002768 <computeNewSpeed+0x290>)
 800269e:	edd3 7a00 	vldr	s15, [r3]
 80026a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026aa:	dd02      	ble.n	80026b2 <computeNewSpeed+0x1da>
 80026ac:	4b2b      	ldr	r3, [pc, #172]	; (800275c <computeNewSpeed+0x284>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	e001      	b.n	80026b6 <computeNewSpeed+0x1de>
 80026b2:	4b2d      	ldr	r3, [pc, #180]	; (8002768 <computeNewSpeed+0x290>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a29      	ldr	r2, [pc, #164]	; (800275c <computeNewSpeed+0x284>)
 80026b8:	6013      	str	r3, [r2, #0]
    }
    _n++;
 80026ba:	4b25      	ldr	r3, [pc, #148]	; (8002750 <computeNewSpeed+0x278>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	3301      	adds	r3, #1
 80026c0:	4a23      	ldr	r2, [pc, #140]	; (8002750 <computeNewSpeed+0x278>)
 80026c2:	6013      	str	r3, [r2, #0]
    _stepInterval = _cn;
 80026c4:	4b25      	ldr	r3, [pc, #148]	; (800275c <computeNewSpeed+0x284>)
 80026c6:	edd3 7a00 	vldr	s15, [r3]
 80026ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026ce:	ee17 2a90 	vmov	r2, s15
 80026d2:	4b1e      	ldr	r3, [pc, #120]	; (800274c <computeNewSpeed+0x274>)
 80026d4:	601a      	str	r2, [r3, #0]
    _speed = 1000000.0 / _cn;
 80026d6:	4b21      	ldr	r3, [pc, #132]	; (800275c <computeNewSpeed+0x284>)
 80026d8:	ed93 7a00 	vldr	s14, [r3]
 80026dc:	eddf 6a23 	vldr	s13, [pc, #140]	; 800276c <computeNewSpeed+0x294>
 80026e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026e4:	4b17      	ldr	r3, [pc, #92]	; (8002744 <computeNewSpeed+0x26c>)
 80026e6:	edc3 7a00 	vstr	s15, [r3]
    if (_direction == DIRECTION_CCW)
 80026ea:	4b1a      	ldr	r3, [pc, #104]	; (8002754 <computeNewSpeed+0x27c>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	f083 0301 	eor.w	r3, r3, #1
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d007      	beq.n	8002708 <computeNewSpeed+0x230>
	_speed = -_speed;
 80026f8:	4b12      	ldr	r3, [pc, #72]	; (8002744 <computeNewSpeed+0x26c>)
 80026fa:	edd3 7a00 	vldr	s15, [r3]
 80026fe:	eef1 7a67 	vneg.f32	s15, s15
 8002702:	4b10      	ldr	r3, [pc, #64]	; (8002744 <computeNewSpeed+0x26c>)
 8002704:	edc3 7a00 	vstr	s15, [r3]

#if debug

    // transmit the encoder value and step interval value
//    sending_var = _speed;
    sending_var = *((uint32_t*)&_speed) ;
 8002708:	4b0e      	ldr	r3, [pc, #56]	; (8002744 <computeNewSpeed+0x26c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a18      	ldr	r2, [pc, #96]	; (8002770 <computeNewSpeed+0x298>)
 800270e:	6013      	str	r3, [r2, #0]

    HAL_UART_Transmit(&huart2, (uint8_t*)&sending_var , sizeof(sending_var), HAL_MAX_DELAY);
 8002710:	f04f 33ff 	mov.w	r3, #4294967295
 8002714:	2204      	movs	r2, #4
 8002716:	4916      	ldr	r1, [pc, #88]	; (8002770 <computeNewSpeed+0x298>)
 8002718:	4816      	ldr	r0, [pc, #88]	; (8002774 <computeNewSpeed+0x29c>)
 800271a:	f002 feac 	bl	8005476 <HAL_UART_Transmit>

    sending_var = *((uint32_t*)&_currentPos) ;
 800271e:	4b16      	ldr	r3, [pc, #88]	; (8002778 <computeNewSpeed+0x2a0>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a13      	ldr	r2, [pc, #76]	; (8002770 <computeNewSpeed+0x298>)
 8002724:	6013      	str	r3, [r2, #0]

    HAL_UART_Transmit(&huart2, (uint8_t*)&sending_var, sizeof(sending_var), HAL_MAX_DELAY);
 8002726:	f04f 33ff 	mov.w	r3, #4294967295
 800272a:	2204      	movs	r2, #4
 800272c:	4910      	ldr	r1, [pc, #64]	; (8002770 <computeNewSpeed+0x298>)
 800272e:	4811      	ldr	r0, [pc, #68]	; (8002774 <computeNewSpeed+0x29c>)
 8002730:	f002 fea1 	bl	8005476 <HAL_UART_Transmit>
    Serial.println(_stepInterval);
    Serial.println(distanceTo);
    Serial.println(stepsToStop);
    Serial.println("-----");
#endif
    return _stepInterval;
 8002734:	4b05      	ldr	r3, [pc, #20]	; (800274c <computeNewSpeed+0x274>)
 8002736:	681b      	ldr	r3, [r3, #0]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002742:	bf00      	nop
 8002744:	200004bc 	.word	0x200004bc
 8002748:	200004c4 	.word	0x200004c4
 800274c:	200004ac 	.word	0x200004ac
 8002750:	200004d8 	.word	0x200004d8
 8002754:	200004aa 	.word	0x200004aa
 8002758:	200004dc 	.word	0x200004dc
 800275c:	200004e0 	.word	0x200004e0
 8002760:	40100000 	.word	0x40100000
 8002764:	3ff00000 	.word	0x3ff00000
 8002768:	200004e4 	.word	0x200004e4
 800276c:	49742400 	.word	0x49742400
 8002770:	20000494 	.word	0x20000494
 8002774:	2000040c 	.word	0x2000040c
 8002778:	200004b4 	.word	0x200004b4

0800277c <run>:
// Run the motor to implement speed and acceleration in order to proceed to the target position
// You must call this at least once per step, preferably in your main loop
// If the motor is in the desired position, the cost is very small
// returns true if the motor is still running to the target position.
_Bool run()
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
    if (runSpeed())
 8002780:	f7ff fe38 	bl	80023f4 <runSpeed>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <run+0x12>
	computeNewSpeed();
 800278a:	f7ff fea5 	bl	80024d8 <computeNewSpeed>
    return _speed != 0.0 || distanceToGo() != 0;
 800278e:	4b0a      	ldr	r3, [pc, #40]	; (80027b8 <run+0x3c>)
 8002790:	edd3 7a00 	vldr	s15, [r3]
 8002794:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800279c:	d104      	bne.n	80027a8 <run+0x2c>
 800279e:	f7ff fe59 	bl	8002454 <distanceToGo>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <run+0x30>
 80027a8:	2301      	movs	r3, #1
 80027aa:	e000      	b.n	80027ae <run+0x32>
 80027ac:	2300      	movs	r3, #0
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	b2db      	uxtb	r3, r3
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	200004bc 	.word	0x200004bc

080027bc <setMaxSpeed>:


void setMaxSpeed(float speed)
{
 80027bc:	b5b0      	push	{r4, r5, r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	ed87 0a01 	vstr	s0, [r7, #4]
    if (speed < 0.0)
 80027c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80027ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027d2:	d505      	bpl.n	80027e0 <setMaxSpeed+0x24>
       speed = -speed;
 80027d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80027d8:	eef1 7a67 	vneg.f32	s15, s15
 80027dc:	edc7 7a01 	vstr	s15, [r7, #4]
    if (_maxSpeed != speed)
 80027e0:	4b22      	ldr	r3, [pc, #136]	; (800286c <setMaxSpeed+0xb0>)
 80027e2:	edd3 7a00 	vldr	s15, [r3]
 80027e6:	ed97 7a01 	vldr	s14, [r7, #4]
 80027ea:	eeb4 7a67 	vcmp.f32	s14, s15
 80027ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027f2:	d037      	beq.n	8002864 <setMaxSpeed+0xa8>
    {
	_maxSpeed = speed;
 80027f4:	4a1d      	ldr	r2, [pc, #116]	; (800286c <setMaxSpeed+0xb0>)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6013      	str	r3, [r2, #0]
	_cmin = 1000000.0 / speed;
 80027fa:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8002870 <setMaxSpeed+0xb4>
 80027fe:	ed97 7a01 	vldr	s14, [r7, #4]
 8002802:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002806:	4b1b      	ldr	r3, [pc, #108]	; (8002874 <setMaxSpeed+0xb8>)
 8002808:	edc3 7a00 	vstr	s15, [r3]
	// Recompute _n from current speed and adjust speed if accelerating or cruising
	if (_n > 0)
 800280c:	4b1a      	ldr	r3, [pc, #104]	; (8002878 <setMaxSpeed+0xbc>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	dd27      	ble.n	8002864 <setMaxSpeed+0xa8>
	{
	    _n = (int32_t)((_speed * _speed) / (2.0 * _acceleration)); // Equation 16
 8002814:	4b19      	ldr	r3, [pc, #100]	; (800287c <setMaxSpeed+0xc0>)
 8002816:	ed93 7a00 	vldr	s14, [r3]
 800281a:	4b18      	ldr	r3, [pc, #96]	; (800287c <setMaxSpeed+0xc0>)
 800281c:	edd3 7a00 	vldr	s15, [r3]
 8002820:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002824:	ee17 0a90 	vmov	r0, s15
 8002828:	f7fd febe 	bl	80005a8 <__aeabi_f2d>
 800282c:	4604      	mov	r4, r0
 800282e:	460d      	mov	r5, r1
 8002830:	4b13      	ldr	r3, [pc, #76]	; (8002880 <setMaxSpeed+0xc4>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f7fd feb7 	bl	80005a8 <__aeabi_f2d>
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	f7fd fd55 	bl	80002ec <__adddf3>
 8002842:	4602      	mov	r2, r0
 8002844:	460b      	mov	r3, r1
 8002846:	4620      	mov	r0, r4
 8002848:	4629      	mov	r1, r5
 800284a:	f7fe f82f 	bl	80008ac <__aeabi_ddiv>
 800284e:	4602      	mov	r2, r0
 8002850:	460b      	mov	r3, r1
 8002852:	4610      	mov	r0, r2
 8002854:	4619      	mov	r1, r3
 8002856:	f7fe f9af 	bl	8000bb8 <__aeabi_d2iz>
 800285a:	4603      	mov	r3, r0
 800285c:	4a06      	ldr	r2, [pc, #24]	; (8002878 <setMaxSpeed+0xbc>)
 800285e:	6013      	str	r3, [r2, #0]
	    computeNewSpeed();
 8002860:	f7ff fe3a 	bl	80024d8 <computeNewSpeed>
	}
    }
}
 8002864:	bf00      	nop
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bdb0      	pop	{r4, r5, r7, pc}
 800286c:	200004c0 	.word	0x200004c0
 8002870:	49742400 	.word	0x49742400
 8002874:	200004e4 	.word	0x200004e4
 8002878:	200004d8 	.word	0x200004d8
 800287c:	200004bc 	.word	0x200004bc
 8002880:	200004c4 	.word	0x200004c4
 8002884:	00000000 	.word	0x00000000

08002888 <setAcceleration>:
{
    return _maxSpeed;
}

void setAcceleration(float acceleration)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	ed87 0a01 	vstr	s0, [r7, #4]
    if (acceleration == 0.0)
 8002892:	edd7 7a01 	vldr	s15, [r7, #4]
 8002896:	eef5 7a40 	vcmp.f32	s15, #0.0
 800289a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800289e:	d05f      	beq.n	8002960 <setAcceleration+0xd8>
	return;
    if (acceleration < 0.0)
 80028a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80028a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ac:	d505      	bpl.n	80028ba <setAcceleration+0x32>
      acceleration = -acceleration;
 80028ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80028b2:	eef1 7a67 	vneg.f32	s15, s15
 80028b6:	edc7 7a01 	vstr	s15, [r7, #4]
    if (_acceleration != acceleration)
 80028ba:	4b2f      	ldr	r3, [pc, #188]	; (8002978 <setAcceleration+0xf0>)
 80028bc:	edd3 7a00 	vldr	s15, [r3]
 80028c0:	ed97 7a01 	vldr	s14, [r7, #4]
 80028c4:	eeb4 7a67 	vcmp.f32	s14, s15
 80028c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028cc:	d049      	beq.n	8002962 <setAcceleration+0xda>
    {
	// Recompute _n per Equation 17
	_n = _n * (_acceleration / acceleration);
 80028ce:	4b2b      	ldr	r3, [pc, #172]	; (800297c <setAcceleration+0xf4>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	ee07 3a90 	vmov	s15, r3
 80028d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028da:	4b27      	ldr	r3, [pc, #156]	; (8002978 <setAcceleration+0xf0>)
 80028dc:	ed93 6a00 	vldr	s12, [r3]
 80028e0:	edd7 6a01 	vldr	s13, [r7, #4]
 80028e4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80028e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028f0:	ee17 2a90 	vmov	r2, s15
 80028f4:	4b21      	ldr	r3, [pc, #132]	; (800297c <setAcceleration+0xf4>)
 80028f6:	601a      	str	r2, [r3, #0]
	// New c0 per Equation 7, with correction per Equation 15
	_c0 = 0.676 * sqrt(2.0 / acceleration) * 1000000.0; // Equation 15
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f7fd fe55 	bl	80005a8 <__aeabi_f2d>
 80028fe:	4602      	mov	r2, r0
 8002900:	460b      	mov	r3, r1
 8002902:	f04f 0000 	mov.w	r0, #0
 8002906:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800290a:	f7fd ffcf 	bl	80008ac <__aeabi_ddiv>
 800290e:	4602      	mov	r2, r0
 8002910:	460b      	mov	r3, r1
 8002912:	ec43 2b17 	vmov	d7, r2, r3
 8002916:	eeb0 0a47 	vmov.f32	s0, s14
 800291a:	eef0 0a67 	vmov.f32	s1, s15
 800291e:	f008 f843 	bl	800a9a8 <sqrt>
 8002922:	ec51 0b10 	vmov	r0, r1, d0
 8002926:	a310      	add	r3, pc, #64	; (adr r3, 8002968 <setAcceleration+0xe0>)
 8002928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800292c:	f7fd fe94 	bl	8000658 <__aeabi_dmul>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4610      	mov	r0, r2
 8002936:	4619      	mov	r1, r3
 8002938:	a30d      	add	r3, pc, #52	; (adr r3, 8002970 <setAcceleration+0xe8>)
 800293a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800293e:	f7fd fe8b 	bl	8000658 <__aeabi_dmul>
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	4610      	mov	r0, r2
 8002948:	4619      	mov	r1, r3
 800294a:	f7fe f97d 	bl	8000c48 <__aeabi_d2f>
 800294e:	4603      	mov	r3, r0
 8002950:	4a0b      	ldr	r2, [pc, #44]	; (8002980 <setAcceleration+0xf8>)
 8002952:	6013      	str	r3, [r2, #0]
	_acceleration = acceleration;
 8002954:	4a08      	ldr	r2, [pc, #32]	; (8002978 <setAcceleration+0xf0>)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6013      	str	r3, [r2, #0]
	computeNewSpeed();
 800295a:	f7ff fdbd 	bl	80024d8 <computeNewSpeed>
 800295e:	e000      	b.n	8002962 <setAcceleration+0xda>
	return;
 8002960:	bf00      	nop
    }
}
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	c083126f 	.word	0xc083126f
 800296c:	3fe5a1ca 	.word	0x3fe5a1ca
 8002970:	00000000 	.word	0x00000000
 8002974:	412e8480 	.word	0x412e8480
 8002978:	200004c4 	.word	0x200004c4
 800297c:	200004d8 	.word	0x200004d8
 8002980:	200004dc 	.word	0x200004dc
 8002984:	00000000 	.word	0x00000000

08002988 <setSpeed>:
{
    return _acceleration;
}

void setSpeed(float speed)
{
 8002988:	b5b0      	push	{r4, r5, r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	ed87 0a01 	vstr	s0, [r7, #4]
    if (speed == _speed)
 8002992:	4b33      	ldr	r3, [pc, #204]	; (8002a60 <setSpeed+0xd8>)
 8002994:	edd3 7a00 	vldr	s15, [r3]
 8002998:	ed97 7a01 	vldr	s14, [r7, #4]
 800299c:	eeb4 7a67 	vcmp.f32	s14, s15
 80029a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029a4:	d054      	beq.n	8002a50 <setSpeed+0xc8>
        return;
    speed = (speed) > (-_maxSpeed) ? ( (speed < _maxSpeed)?(speed):(_maxSpeed) ) : (-_maxSpeed) ; //constrain(speed, -_maxSpeed, _maxSpeed);
 80029a6:	4b2f      	ldr	r3, [pc, #188]	; (8002a64 <setSpeed+0xdc>)
 80029a8:	edd3 7a00 	vldr	s15, [r3]
 80029ac:	eef1 7a67 	vneg.f32	s15, s15
 80029b0:	ed97 7a01 	vldr	s14, [r7, #4]
 80029b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029bc:	dd10      	ble.n	80029e0 <setSpeed+0x58>
 80029be:	4b29      	ldr	r3, [pc, #164]	; (8002a64 <setSpeed+0xdc>)
 80029c0:	edd3 7a00 	vldr	s15, [r3]
 80029c4:	ed97 7a01 	vldr	s14, [r7, #4]
 80029c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029d0:	d502      	bpl.n	80029d8 <setSpeed+0x50>
 80029d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80029d6:	e008      	b.n	80029ea <setSpeed+0x62>
 80029d8:	4b22      	ldr	r3, [pc, #136]	; (8002a64 <setSpeed+0xdc>)
 80029da:	edd3 7a00 	vldr	s15, [r3]
 80029de:	e004      	b.n	80029ea <setSpeed+0x62>
 80029e0:	4b20      	ldr	r3, [pc, #128]	; (8002a64 <setSpeed+0xdc>)
 80029e2:	edd3 7a00 	vldr	s15, [r3]
 80029e6:	eef1 7a67 	vneg.f32	s15, s15
 80029ea:	edc7 7a01 	vstr	s15, [r7, #4]

    if (speed == 0.0)
 80029ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80029f2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80029f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029fa:	d103      	bne.n	8002a04 <setSpeed+0x7c>
	_stepInterval = 0;
 80029fc:	4b1a      	ldr	r3, [pc, #104]	; (8002a68 <setSpeed+0xe0>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	e021      	b.n	8002a48 <setSpeed+0xc0>
    else
    {
	_stepInterval = fabs(1000000.0 / speed);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f7fd fdcf 	bl	80005a8 <__aeabi_f2d>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	a112      	add	r1, pc, #72	; (adr r1, 8002a58 <setSpeed+0xd0>)
 8002a10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a14:	f7fd ff4a 	bl	80008ac <__aeabi_ddiv>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	4614      	mov	r4, r2
 8002a1e:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8002a22:	4620      	mov	r0, r4
 8002a24:	4629      	mov	r1, r5
 8002a26:	f7fe f8ef 	bl	8000c08 <__aeabi_d2uiz>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	4a0e      	ldr	r2, [pc, #56]	; (8002a68 <setSpeed+0xe0>)
 8002a2e:	6013      	str	r3, [r2, #0]
	_direction = (speed > 0.0) ? DIRECTION_CW : DIRECTION_CCW;
 8002a30:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a3c:	bfcc      	ite	gt
 8002a3e:	2301      	movgt	r3, #1
 8002a40:	2300      	movle	r3, #0
 8002a42:	b2da      	uxtb	r2, r3
 8002a44:	4b09      	ldr	r3, [pc, #36]	; (8002a6c <setSpeed+0xe4>)
 8002a46:	701a      	strb	r2, [r3, #0]
    }
    _speed = speed;
 8002a48:	4a05      	ldr	r2, [pc, #20]	; (8002a60 <setSpeed+0xd8>)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6013      	str	r3, [r2, #0]
 8002a4e:	e000      	b.n	8002a52 <setSpeed+0xca>
        return;
 8002a50:	bf00      	nop
    //added
//    computeNewSpeed();
}
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bdb0      	pop	{r4, r5, r7, pc}
 8002a58:	00000000 	.word	0x00000000
 8002a5c:	412e8480 	.word	0x412e8480
 8002a60:	200004bc 	.word	0x200004bc
 8002a64:	200004c0 	.word	0x200004c0
 8002a68:	200004ac 	.word	0x200004ac
 8002a6c:	200004aa 	.word	0x200004aa

08002a70 <setOutputPins>:

void setOutputPins(uint8_t mask)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	4603      	mov	r3, r0
 8002a78:	71fb      	strb	r3, [r7, #7]
    uint8_t numpins = 2;
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	73bb      	strb	r3, [r7, #14]

    uint8_t i;
    for (i = 0; i < numpins; i++)
 8002a7e:	2300      	movs	r3, #0
 8002a80:	73fb      	strb	r3, [r7, #15]
 8002a82:	e038      	b.n	8002af6 <setOutputPins+0x86>
    	if(i==1){ //step pin
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d119      	bne.n	8002abe <setOutputPins+0x4e>
    		HAL_GPIO_WritePin( step_port, step_pin, (mask & (1 << i)) ? ( 1  ^ _pinInverted[i]) : (0 ^ _pinInverted[i]) );
 8002a8a:	4b1f      	ldr	r3, [pc, #124]	; (8002b08 <setOutputPins+0x98>)
 8002a8c:	6818      	ldr	r0, [r3, #0]
 8002a8e:	4b1f      	ldr	r3, [pc, #124]	; (8002b0c <setOutputPins+0x9c>)
 8002a90:	8819      	ldrh	r1, [r3, #0]
 8002a92:	79fa      	ldrb	r2, [r7, #7]
 8002a94:	7bfb      	ldrb	r3, [r7, #15]
 8002a96:	fa42 f303 	asr.w	r3, r2, r3
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d006      	beq.n	8002ab0 <setOutputPins+0x40>
 8002aa2:	7bfb      	ldrb	r3, [r7, #15]
 8002aa4:	4a1a      	ldr	r2, [pc, #104]	; (8002b10 <setOutputPins+0xa0>)
 8002aa6:	5cd3      	ldrb	r3, [r2, r3]
 8002aa8:	f083 0301 	eor.w	r3, r3, #1
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	e002      	b.n	8002ab6 <setOutputPins+0x46>
 8002ab0:	7bfb      	ldrb	r3, [r7, #15]
 8002ab2:	4a17      	ldr	r2, [pc, #92]	; (8002b10 <setOutputPins+0xa0>)
 8002ab4:	5cd3      	ldrb	r3, [r2, r3]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	f000 ff6a 	bl	8003990 <HAL_GPIO_WritePin>
 8002abc:	e018      	b.n	8002af0 <setOutputPins+0x80>
    	}
    	else{
    		HAL_GPIO_WritePin( dir_port, dir_pin, (mask & (1 << i)) ? ( 1  ^ _pinInverted[i]) : (0 ^ _pinInverted[i]) );
 8002abe:	4b15      	ldr	r3, [pc, #84]	; (8002b14 <setOutputPins+0xa4>)
 8002ac0:	6818      	ldr	r0, [r3, #0]
 8002ac2:	4b15      	ldr	r3, [pc, #84]	; (8002b18 <setOutputPins+0xa8>)
 8002ac4:	8819      	ldrh	r1, [r3, #0]
 8002ac6:	79fa      	ldrb	r2, [r7, #7]
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
 8002aca:	fa42 f303 	asr.w	r3, r2, r3
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d006      	beq.n	8002ae4 <setOutputPins+0x74>
 8002ad6:	7bfb      	ldrb	r3, [r7, #15]
 8002ad8:	4a0d      	ldr	r2, [pc, #52]	; (8002b10 <setOutputPins+0xa0>)
 8002ada:	5cd3      	ldrb	r3, [r2, r3]
 8002adc:	f083 0301 	eor.w	r3, r3, #1
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	e002      	b.n	8002aea <setOutputPins+0x7a>
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
 8002ae6:	4a0a      	ldr	r2, [pc, #40]	; (8002b10 <setOutputPins+0xa0>)
 8002ae8:	5cd3      	ldrb	r3, [r2, r3]
 8002aea:	461a      	mov	r2, r3
 8002aec:	f000 ff50 	bl	8003990 <HAL_GPIO_WritePin>
    for (i = 0; i < numpins; i++)
 8002af0:	7bfb      	ldrb	r3, [r7, #15]
 8002af2:	3301      	adds	r3, #1
 8002af4:	73fb      	strb	r3, [r7, #15]
 8002af6:	7bfa      	ldrb	r2, [r7, #15]
 8002af8:	7bbb      	ldrb	r3, [r7, #14]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d3c2      	bcc.n	8002a84 <setOutputPins+0x14>
    	}
}
 8002afe:	bf00      	nop
 8002b00:	bf00      	nop
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	2000049c 	.word	0x2000049c
 8002b0c:	200004a0 	.word	0x200004a0
 8002b10:	200004b0 	.word	0x200004b0
 8002b14:	200004a4 	.word	0x200004a4
 8002b18:	200004a8 	.word	0x200004a8

08002b1c <step>:
float speed()
{
    return _speed;
}

void step(uint32_t step){
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]

	//making step with driver
	step1(step);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 f805 	bl	8002b34 <step1>

}
 8002b2a:	bf00      	nop
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
	...

08002b34 <step1>:

// 1 pin step function (ie for stepper drivers)
// This is passed the current step number (0 to 7)
// Subclasses can override
void step1(uint32_t step)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
	(void)(step); // Unused

	// _pin[0] is step, _pin[1] is direction
	setOutputPins(_direction ? 0b10 : 0b00); // Set direction first else get rogue pulses
 8002b3c:	4b13      	ldr	r3, [pc, #76]	; (8002b8c <step1+0x58>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <step1+0x14>
 8002b44:	2302      	movs	r3, #2
 8002b46:	e000      	b.n	8002b4a <step1+0x16>
 8002b48:	2300      	movs	r3, #0
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff ff90 	bl	8002a70 <setOutputPins>
	setOutputPins(_direction ? 0b11 : 0b01); // step HIGH
 8002b50:	4b0e      	ldr	r3, [pc, #56]	; (8002b8c <step1+0x58>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <step1+0x28>
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e000      	b.n	8002b5e <step1+0x2a>
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff ff86 	bl	8002a70 <setOutputPins>
	// Caution 200ns setup time
	// Delay the minimum allowed pulse width

	delay_us(_minPulseWidth);
 8002b64:	4b0a      	ldr	r3, [pc, #40]	; (8002b90 <step1+0x5c>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 f868 	bl	8002c40 <delay_us>
	setOutputPins(_direction ? 0b10 : 0b00); // step LOW
 8002b70:	4b06      	ldr	r3, [pc, #24]	; (8002b8c <step1+0x58>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <step1+0x48>
 8002b78:	2302      	movs	r3, #2
 8002b7a:	e000      	b.n	8002b7e <step1+0x4a>
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7ff ff76 	bl	8002a70 <setOutputPins>
}
 8002b84:	bf00      	nop
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	200004aa 	.word	0x200004aa
 8002b90:	200004d0 	.word	0x200004d0

08002b94 <runToPosition>:
    _pinInverted[1] = directionInvert;
    _enableInverted = enableInvert;
}

void runToPosition()
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
    while (run());
 8002b98:	bf00      	nop
 8002b9a:	f7ff fdef 	bl	800277c <run>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1fa      	bne.n	8002b9a <runToPosition+0x6>
//	YIELD; // Let system housekeeping occur
}
 8002ba4:	bf00      	nop
 8002ba6:	bf00      	nop
 8002ba8:	bd80      	pop	{r7, pc}
	...

08002bac <stop>:
    moveTo(position);
    runToPosition();
}

void stop()
{
 8002bac:	b5b0      	push	{r4, r5, r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
    if (_speed != 0.0)
 8002bb2:	4b21      	ldr	r3, [pc, #132]	; (8002c38 <stop+0x8c>)
 8002bb4:	edd3 7a00 	vldr	s15, [r3]
 8002bb8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc0:	d036      	beq.n	8002c30 <stop+0x84>
    {
	int32_t stepsToStop = (int32_t)((_speed * _speed) / (2.0 * _acceleration)) + 1; // Equation 16 (+integer rounding)
 8002bc2:	4b1d      	ldr	r3, [pc, #116]	; (8002c38 <stop+0x8c>)
 8002bc4:	ed93 7a00 	vldr	s14, [r3]
 8002bc8:	4b1b      	ldr	r3, [pc, #108]	; (8002c38 <stop+0x8c>)
 8002bca:	edd3 7a00 	vldr	s15, [r3]
 8002bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bd2:	ee17 0a90 	vmov	r0, s15
 8002bd6:	f7fd fce7 	bl	80005a8 <__aeabi_f2d>
 8002bda:	4604      	mov	r4, r0
 8002bdc:	460d      	mov	r5, r1
 8002bde:	4b17      	ldr	r3, [pc, #92]	; (8002c3c <stop+0x90>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fd fce0 	bl	80005a8 <__aeabi_f2d>
 8002be8:	4602      	mov	r2, r0
 8002bea:	460b      	mov	r3, r1
 8002bec:	f7fd fb7e 	bl	80002ec <__adddf3>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	4620      	mov	r0, r4
 8002bf6:	4629      	mov	r1, r5
 8002bf8:	f7fd fe58 	bl	80008ac <__aeabi_ddiv>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	460b      	mov	r3, r1
 8002c00:	4610      	mov	r0, r2
 8002c02:	4619      	mov	r1, r3
 8002c04:	f7fd ffd8 	bl	8000bb8 <__aeabi_d2iz>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	607b      	str	r3, [r7, #4]
	if (_speed > 0)
 8002c0e:	4b0a      	ldr	r3, [pc, #40]	; (8002c38 <stop+0x8c>)
 8002c10:	edd3 7a00 	vldr	s15, [r3]
 8002c14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c1c:	dd03      	ble.n	8002c26 <stop+0x7a>
	    move(stepsToStop);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7ff fb3a 	bl	8002298 <move>
	else
	    move(-stepsToStop);
    }
}
 8002c24:	e004      	b.n	8002c30 <stop+0x84>
	    move(-stepsToStop);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	425b      	negs	r3, r3
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7ff fb34 	bl	8002298 <move>
}
 8002c30:	bf00      	nop
 8002c32:	3708      	adds	r7, #8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bdb0      	pop	{r4, r5, r7, pc}
 8002c38:	200004bc 	.word	0x200004bc
 8002c3c:	200004c4 	.word	0x200004c4

08002c40 <delay_us>:
}



/*********** Helper Functions ************/
void delay_us (uint16_t us){
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	4603      	mov	r3, r0
 8002c48:	80fb      	strh	r3, [r7, #6]
//{	__HAL_TIM_DISABLE
//	HAL_TIM_Base_Stop(&htim7);
	__HAL_TIM_SET_COUNTER(&htim7,0x0000);  // set the counter value a 0
 8002c4a:	4b0e      	ldr	r3, [pc, #56]	; (8002c84 <delay_us+0x44>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	625a      	str	r2, [r3, #36]	; 0x24

#if debug
	counter = __HAL_TIM_GET_COUNTER(&htim7);
 8002c52:	4b0c      	ldr	r3, [pc, #48]	; (8002c84 <delay_us+0x44>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <delay_us+0x48>)
 8002c5c:	801a      	strh	r2, [r3, #0]
#endif
//	HAL_TIM_Base_Start(&htim7);

	while (__HAL_TIM_GET_COUNTER(&htim7) < us);  // wait for the counter to reach the us input in the parameter
 8002c5e:	bf00      	nop
 8002c60:	4b08      	ldr	r3, [pc, #32]	; (8002c84 <delay_us+0x44>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c66:	88fb      	ldrh	r3, [r7, #6]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d3f9      	bcc.n	8002c60 <delay_us+0x20>
#if debug
	counter = __HAL_TIM_GET_COUNTER(&htim7);
 8002c6c:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <delay_us+0x44>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	4b04      	ldr	r3, [pc, #16]	; (8002c88 <delay_us+0x48>)
 8002c76:	801a      	strh	r2, [r3, #0]
#endif
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr
 8002c84:	200003c4 	.word	0x200003c4
 8002c88:	20000498 	.word	0x20000498

08002c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c92:	2300      	movs	r3, #0
 8002c94:	607b      	str	r3, [r7, #4]
 8002c96:	4b10      	ldr	r3, [pc, #64]	; (8002cd8 <HAL_MspInit+0x4c>)
 8002c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9a:	4a0f      	ldr	r2, [pc, #60]	; (8002cd8 <HAL_MspInit+0x4c>)
 8002c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ca2:	4b0d      	ldr	r3, [pc, #52]	; (8002cd8 <HAL_MspInit+0x4c>)
 8002ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002caa:	607b      	str	r3, [r7, #4]
 8002cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cae:	2300      	movs	r3, #0
 8002cb0:	603b      	str	r3, [r7, #0]
 8002cb2:	4b09      	ldr	r3, [pc, #36]	; (8002cd8 <HAL_MspInit+0x4c>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	4a08      	ldr	r2, [pc, #32]	; (8002cd8 <HAL_MspInit+0x4c>)
 8002cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002cbe:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <HAL_MspInit+0x4c>)
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc6:	603b      	str	r3, [r7, #0]
 8002cc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	40023800 	.word	0x40023800

08002cdc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b08a      	sub	sp, #40	; 0x28
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce4:	f107 0314 	add.w	r3, r7, #20
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	605a      	str	r2, [r3, #4]
 8002cee:	609a      	str	r2, [r3, #8]
 8002cf0:	60da      	str	r2, [r3, #12]
 8002cf2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a19      	ldr	r2, [pc, #100]	; (8002d60 <HAL_SPI_MspInit+0x84>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d12b      	bne.n	8002d56 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002cfe:	2300      	movs	r3, #0
 8002d00:	613b      	str	r3, [r7, #16]
 8002d02:	4b18      	ldr	r3, [pc, #96]	; (8002d64 <HAL_SPI_MspInit+0x88>)
 8002d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d06:	4a17      	ldr	r2, [pc, #92]	; (8002d64 <HAL_SPI_MspInit+0x88>)
 8002d08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d0e:	4b15      	ldr	r3, [pc, #84]	; (8002d64 <HAL_SPI_MspInit+0x88>)
 8002d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d16:	613b      	str	r3, [r7, #16]
 8002d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	4b11      	ldr	r3, [pc, #68]	; (8002d64 <HAL_SPI_MspInit+0x88>)
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d22:	4a10      	ldr	r2, [pc, #64]	; (8002d64 <HAL_SPI_MspInit+0x88>)
 8002d24:	f043 0301 	orr.w	r3, r3, #1
 8002d28:	6313      	str	r3, [r2, #48]	; 0x30
 8002d2a:	4b0e      	ldr	r3, [pc, #56]	; (8002d64 <HAL_SPI_MspInit+0x88>)
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_Clk_Pin|SPI_MOSI_Pin;
 8002d36:	23a0      	movs	r3, #160	; 0xa0
 8002d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d42:	2303      	movs	r3, #3
 8002d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d46:	2305      	movs	r3, #5
 8002d48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d4a:	f107 0314 	add.w	r3, r7, #20
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4805      	ldr	r0, [pc, #20]	; (8002d68 <HAL_SPI_MspInit+0x8c>)
 8002d52:	f000 fc89 	bl	8003668 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002d56:	bf00      	nop
 8002d58:	3728      	adds	r7, #40	; 0x28
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40013000 	.word	0x40013000
 8002d64:	40023800 	.word	0x40023800
 8002d68:	40020000 	.word	0x40020000

08002d6c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b08a      	sub	sp, #40	; 0x28
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d74:	f107 0314 	add.w	r3, r7, #20
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	605a      	str	r2, [r3, #4]
 8002d7e:	609a      	str	r2, [r3, #8]
 8002d80:	60da      	str	r2, [r3, #12]
 8002d82:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d8c:	d133      	bne.n	8002df6 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d8e:	2300      	movs	r3, #0
 8002d90:	613b      	str	r3, [r7, #16]
 8002d92:	4b1b      	ldr	r3, [pc, #108]	; (8002e00 <HAL_TIM_Encoder_MspInit+0x94>)
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	4a1a      	ldr	r2, [pc, #104]	; (8002e00 <HAL_TIM_Encoder_MspInit+0x94>)
 8002d98:	f043 0301 	orr.w	r3, r3, #1
 8002d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d9e:	4b18      	ldr	r3, [pc, #96]	; (8002e00 <HAL_TIM_Encoder_MspInit+0x94>)
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	613b      	str	r3, [r7, #16]
 8002da8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002daa:	2300      	movs	r3, #0
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	4b14      	ldr	r3, [pc, #80]	; (8002e00 <HAL_TIM_Encoder_MspInit+0x94>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	4a13      	ldr	r2, [pc, #76]	; (8002e00 <HAL_TIM_Encoder_MspInit+0x94>)
 8002db4:	f043 0301 	orr.w	r3, r3, #1
 8002db8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dba:	4b11      	ldr	r3, [pc, #68]	; (8002e00 <HAL_TIM_Encoder_MspInit+0x94>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = A_signal_Pin|B_signal_Pin;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dca:	2302      	movs	r3, #2
 8002dcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dda:	f107 0314 	add.w	r3, r7, #20
 8002dde:	4619      	mov	r1, r3
 8002de0:	4808      	ldr	r0, [pc, #32]	; (8002e04 <HAL_TIM_Encoder_MspInit+0x98>)
 8002de2:	f000 fc41 	bl	8003668 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002de6:	2200      	movs	r2, #0
 8002de8:	2100      	movs	r1, #0
 8002dea:	201c      	movs	r0, #28
 8002dec:	f000 fb65 	bl	80034ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002df0:	201c      	movs	r0, #28
 8002df2:	f000 fb7e 	bl	80034f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002df6:	bf00      	nop
 8002df8:	3728      	adds	r7, #40	; 0x28
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	40023800 	.word	0x40023800
 8002e04:	40020000 	.word	0x40020000

08002e08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a15      	ldr	r2, [pc, #84]	; (8002e6c <HAL_TIM_Base_MspInit+0x64>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d10e      	bne.n	8002e38 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60fb      	str	r3, [r7, #12]
 8002e1e:	4b14      	ldr	r3, [pc, #80]	; (8002e70 <HAL_TIM_Base_MspInit+0x68>)
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	4a13      	ldr	r2, [pc, #76]	; (8002e70 <HAL_TIM_Base_MspInit+0x68>)
 8002e24:	f043 0310 	orr.w	r3, r3, #16
 8002e28:	6413      	str	r3, [r2, #64]	; 0x40
 8002e2a:	4b11      	ldr	r3, [pc, #68]	; (8002e70 <HAL_TIM_Base_MspInit+0x68>)
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	f003 0310 	and.w	r3, r3, #16
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002e36:	e012      	b.n	8002e5e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM7)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a0d      	ldr	r2, [pc, #52]	; (8002e74 <HAL_TIM_Base_MspInit+0x6c>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d10d      	bne.n	8002e5e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002e42:	2300      	movs	r3, #0
 8002e44:	60bb      	str	r3, [r7, #8]
 8002e46:	4b0a      	ldr	r3, [pc, #40]	; (8002e70 <HAL_TIM_Base_MspInit+0x68>)
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	4a09      	ldr	r2, [pc, #36]	; (8002e70 <HAL_TIM_Base_MspInit+0x68>)
 8002e4c:	f043 0320 	orr.w	r3, r3, #32
 8002e50:	6413      	str	r3, [r2, #64]	; 0x40
 8002e52:	4b07      	ldr	r3, [pc, #28]	; (8002e70 <HAL_TIM_Base_MspInit+0x68>)
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	f003 0320 	and.w	r3, r3, #32
 8002e5a:	60bb      	str	r3, [r7, #8]
 8002e5c:	68bb      	ldr	r3, [r7, #8]
}
 8002e5e:	bf00      	nop
 8002e60:	3714      	adds	r7, #20
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	40001000 	.word	0x40001000
 8002e70:	40023800 	.word	0x40023800
 8002e74:	40001400 	.word	0x40001400

08002e78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b08a      	sub	sp, #40	; 0x28
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e80:	f107 0314 	add.w	r3, r7, #20
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	605a      	str	r2, [r3, #4]
 8002e8a:	609a      	str	r2, [r3, #8]
 8002e8c:	60da      	str	r2, [r3, #12]
 8002e8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a1d      	ldr	r2, [pc, #116]	; (8002f0c <HAL_UART_MspInit+0x94>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d133      	bne.n	8002f02 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	613b      	str	r3, [r7, #16]
 8002e9e:	4b1c      	ldr	r3, [pc, #112]	; (8002f10 <HAL_UART_MspInit+0x98>)
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	4a1b      	ldr	r2, [pc, #108]	; (8002f10 <HAL_UART_MspInit+0x98>)
 8002ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eaa:	4b19      	ldr	r3, [pc, #100]	; (8002f10 <HAL_UART_MspInit+0x98>)
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb2:	613b      	str	r3, [r7, #16]
 8002eb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60fb      	str	r3, [r7, #12]
 8002eba:	4b15      	ldr	r3, [pc, #84]	; (8002f10 <HAL_UART_MspInit+0x98>)
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	4a14      	ldr	r2, [pc, #80]	; (8002f10 <HAL_UART_MspInit+0x98>)
 8002ec0:	f043 0301 	orr.w	r3, r3, #1
 8002ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ec6:	4b12      	ldr	r3, [pc, #72]	; (8002f10 <HAL_UART_MspInit+0x98>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002ed2:	230c      	movs	r3, #12
 8002ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eda:	2300      	movs	r3, #0
 8002edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ee2:	2307      	movs	r3, #7
 8002ee4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ee6:	f107 0314 	add.w	r3, r7, #20
 8002eea:	4619      	mov	r1, r3
 8002eec:	4809      	ldr	r0, [pc, #36]	; (8002f14 <HAL_UART_MspInit+0x9c>)
 8002eee:	f000 fbbb 	bl	8003668 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	2026      	movs	r0, #38	; 0x26
 8002ef8:	f000 fadf 	bl	80034ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002efc:	2026      	movs	r0, #38	; 0x26
 8002efe:	f000 faf8 	bl	80034f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002f02:	bf00      	nop
 8002f04:	3728      	adds	r7, #40	; 0x28
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40004400 	.word	0x40004400
 8002f10:	40023800 	.word	0x40023800
 8002f14:	40020000 	.word	0x40020000

08002f18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f1c:	e7fe      	b.n	8002f1c <NMI_Handler+0x4>

08002f1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f22:	e7fe      	b.n	8002f22 <HardFault_Handler+0x4>

08002f24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f28:	e7fe      	b.n	8002f28 <MemManage_Handler+0x4>

08002f2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f2e:	e7fe      	b.n	8002f2e <BusFault_Handler+0x4>

08002f30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f34:	e7fe      	b.n	8002f34 <UsageFault_Handler+0x4>

08002f36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f36:	b480      	push	{r7}
 8002f38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f3a:	bf00      	nop
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f48:	bf00      	nop
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f52:	b480      	push	{r7}
 8002f54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f56:	bf00      	nop
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f64:	f000 f98a 	bl	800327c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f68:	bf00      	nop
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Z_reference_Pin);
 8002f70:	2001      	movs	r0, #1
 8002f72:	f000 fd27 	bl	80039c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002f76:	bf00      	nop
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Camera_input_Pin);
 8002f7e:	2008      	movs	r0, #8
 8002f80:	f000 fd20 	bl	80039c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002f84:	bf00      	nop
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(P_limit_Pin);
 8002f8c:	2010      	movs	r0, #16
 8002f8e:	f000 fd19 	bl	80039c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002f92:	bf00      	nop
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Q_limit_Pin);
 8002f9a:	2020      	movs	r0, #32
 8002f9c:	f000 fd12 	bl	80039c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Z_END_STOP_Pin);
 8002fa0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002fa4:	f000 fd0e 	bl	80039c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002fa8:	bf00      	nop
 8002faa:	bd80      	pop	{r7, pc}

08002fac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002fb0:	4802      	ldr	r0, [pc, #8]	; (8002fbc <TIM2_IRQHandler+0x10>)
 8002fb2:	f001 ff83 	bl	8004ebc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002fb6:	bf00      	nop
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	20000334 	.word	0x20000334

08002fc0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002fc4:	4802      	ldr	r0, [pc, #8]	; (8002fd0 <USART2_IRQHandler+0x10>)
 8002fc6:	f002 fb19 	bl	80055fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002fca:	bf00      	nop
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	2000040c 	.word	0x2000040c

08002fd4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
	return 1;
 8002fd8:	2301      	movs	r3, #1
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <_kill>:

int _kill(int pid, int sig)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002fee:	f003 fa6d 	bl	80064cc <__errno>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2216      	movs	r2, #22
 8002ff6:	601a      	str	r2, [r3, #0]
	return -1;
 8002ff8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3708      	adds	r7, #8
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <_exit>:

void _exit (int status)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800300c:	f04f 31ff 	mov.w	r1, #4294967295
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f7ff ffe7 	bl	8002fe4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003016:	e7fe      	b.n	8003016 <_exit+0x12>

08003018 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003024:	2300      	movs	r3, #0
 8003026:	617b      	str	r3, [r7, #20]
 8003028:	e00a      	b.n	8003040 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800302a:	f3af 8000 	nop.w
 800302e:	4601      	mov	r1, r0
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	1c5a      	adds	r2, r3, #1
 8003034:	60ba      	str	r2, [r7, #8]
 8003036:	b2ca      	uxtb	r2, r1
 8003038:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	3301      	adds	r3, #1
 800303e:	617b      	str	r3, [r7, #20]
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	429a      	cmp	r2, r3
 8003046:	dbf0      	blt.n	800302a <_read+0x12>
	}

return len;
 8003048:	687b      	ldr	r3, [r7, #4]
}
 800304a:	4618      	mov	r0, r3
 800304c:	3718      	adds	r7, #24
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b086      	sub	sp, #24
 8003056:	af00      	add	r7, sp, #0
 8003058:	60f8      	str	r0, [r7, #12]
 800305a:	60b9      	str	r1, [r7, #8]
 800305c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800305e:	2300      	movs	r3, #0
 8003060:	617b      	str	r3, [r7, #20]
 8003062:	e009      	b.n	8003078 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	1c5a      	adds	r2, r3, #1
 8003068:	60ba      	str	r2, [r7, #8]
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	4618      	mov	r0, r3
 800306e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	3301      	adds	r3, #1
 8003076:	617b      	str	r3, [r7, #20]
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	429a      	cmp	r2, r3
 800307e:	dbf1      	blt.n	8003064 <_write+0x12>
	}
	return len;
 8003080:	687b      	ldr	r3, [r7, #4]
}
 8003082:	4618      	mov	r0, r3
 8003084:	3718      	adds	r7, #24
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <_close>:

int _close(int file)
{
 800308a:	b480      	push	{r7}
 800308c:	b083      	sub	sp, #12
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
	return -1;
 8003092:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003096:	4618      	mov	r0, r3
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
 80030aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030b2:	605a      	str	r2, [r3, #4]
	return 0;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <_isatty>:

int _isatty(int file)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
	return 1;
 80030ca:	2301      	movs	r3, #1
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
	return 0;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3714      	adds	r7, #20
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
	...

080030f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b086      	sub	sp, #24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030fc:	4a14      	ldr	r2, [pc, #80]	; (8003150 <_sbrk+0x5c>)
 80030fe:	4b15      	ldr	r3, [pc, #84]	; (8003154 <_sbrk+0x60>)
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003108:	4b13      	ldr	r3, [pc, #76]	; (8003158 <_sbrk+0x64>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d102      	bne.n	8003116 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003110:	4b11      	ldr	r3, [pc, #68]	; (8003158 <_sbrk+0x64>)
 8003112:	4a12      	ldr	r2, [pc, #72]	; (800315c <_sbrk+0x68>)
 8003114:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003116:	4b10      	ldr	r3, [pc, #64]	; (8003158 <_sbrk+0x64>)
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4413      	add	r3, r2
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	429a      	cmp	r2, r3
 8003122:	d207      	bcs.n	8003134 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003124:	f003 f9d2 	bl	80064cc <__errno>
 8003128:	4603      	mov	r3, r0
 800312a:	220c      	movs	r2, #12
 800312c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800312e:	f04f 33ff 	mov.w	r3, #4294967295
 8003132:	e009      	b.n	8003148 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003134:	4b08      	ldr	r3, [pc, #32]	; (8003158 <_sbrk+0x64>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800313a:	4b07      	ldr	r3, [pc, #28]	; (8003158 <_sbrk+0x64>)
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4413      	add	r3, r2
 8003142:	4a05      	ldr	r2, [pc, #20]	; (8003158 <_sbrk+0x64>)
 8003144:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003146:	68fb      	ldr	r3, [r7, #12]
}
 8003148:	4618      	mov	r0, r3
 800314a:	3718      	adds	r7, #24
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	20020000 	.word	0x20020000
 8003154:	00000400 	.word	0x00000400
 8003158:	200004e8 	.word	0x200004e8
 800315c:	20000500 	.word	0x20000500

08003160 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003164:	4b06      	ldr	r3, [pc, #24]	; (8003180 <SystemInit+0x20>)
 8003166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800316a:	4a05      	ldr	r2, [pc, #20]	; (8003180 <SystemInit+0x20>)
 800316c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003170:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003174:	bf00      	nop
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	e000ed00 	.word	0xe000ed00

08003184 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003184:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003188:	480d      	ldr	r0, [pc, #52]	; (80031c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800318a:	490e      	ldr	r1, [pc, #56]	; (80031c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800318c:	4a0e      	ldr	r2, [pc, #56]	; (80031c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800318e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003190:	e002      	b.n	8003198 <LoopCopyDataInit>

08003192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003196:	3304      	adds	r3, #4

08003198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800319a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800319c:	d3f9      	bcc.n	8003192 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800319e:	4a0b      	ldr	r2, [pc, #44]	; (80031cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80031a0:	4c0b      	ldr	r4, [pc, #44]	; (80031d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80031a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031a4:	e001      	b.n	80031aa <LoopFillZerobss>

080031a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031a8:	3204      	adds	r2, #4

080031aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031ac:	d3fb      	bcc.n	80031a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80031ae:	f7ff ffd7 	bl	8003160 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031b2:	f003 f991 	bl	80064d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031b6:	f7fe fb6f 	bl	8001898 <main>
  bx  lr    
 80031ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80031bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80031c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031c4:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 80031c8:	0800b110 	.word	0x0800b110
  ldr r2, =_sbss
 80031cc:	20000234 	.word	0x20000234
  ldr r4, =_ebss
 80031d0:	20000500 	.word	0x20000500

080031d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031d4:	e7fe      	b.n	80031d4 <ADC_IRQHandler>
	...

080031d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031dc:	4b0e      	ldr	r3, [pc, #56]	; (8003218 <HAL_Init+0x40>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a0d      	ldr	r2, [pc, #52]	; (8003218 <HAL_Init+0x40>)
 80031e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031e8:	4b0b      	ldr	r3, [pc, #44]	; (8003218 <HAL_Init+0x40>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a0a      	ldr	r2, [pc, #40]	; (8003218 <HAL_Init+0x40>)
 80031ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031f4:	4b08      	ldr	r3, [pc, #32]	; (8003218 <HAL_Init+0x40>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a07      	ldr	r2, [pc, #28]	; (8003218 <HAL_Init+0x40>)
 80031fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003200:	2003      	movs	r0, #3
 8003202:	f000 f94f 	bl	80034a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003206:	2000      	movs	r0, #0
 8003208:	f000 f808 	bl	800321c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800320c:	f7ff fd3e 	bl	8002c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40023c00 	.word	0x40023c00

0800321c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003224:	4b12      	ldr	r3, [pc, #72]	; (8003270 <HAL_InitTick+0x54>)
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	4b12      	ldr	r3, [pc, #72]	; (8003274 <HAL_InitTick+0x58>)
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	4619      	mov	r1, r3
 800322e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003232:	fbb3 f3f1 	udiv	r3, r3, r1
 8003236:	fbb2 f3f3 	udiv	r3, r2, r3
 800323a:	4618      	mov	r0, r3
 800323c:	f000 f975 	bl	800352a <HAL_SYSTICK_Config>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e00e      	b.n	8003268 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2b0f      	cmp	r3, #15
 800324e:	d80a      	bhi.n	8003266 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003250:	2200      	movs	r2, #0
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	f04f 30ff 	mov.w	r0, #4294967295
 8003258:	f000 f92f 	bl	80034ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800325c:	4a06      	ldr	r2, [pc, #24]	; (8003278 <HAL_InitTick+0x5c>)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003262:	2300      	movs	r3, #0
 8003264:	e000      	b.n	8003268 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
}
 8003268:	4618      	mov	r0, r3
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	20000054 	.word	0x20000054
 8003274:	2000005c 	.word	0x2000005c
 8003278:	20000058 	.word	0x20000058

0800327c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003280:	4b06      	ldr	r3, [pc, #24]	; (800329c <HAL_IncTick+0x20>)
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	461a      	mov	r2, r3
 8003286:	4b06      	ldr	r3, [pc, #24]	; (80032a0 <HAL_IncTick+0x24>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4413      	add	r3, r2
 800328c:	4a04      	ldr	r2, [pc, #16]	; (80032a0 <HAL_IncTick+0x24>)
 800328e:	6013      	str	r3, [r2, #0]
}
 8003290:	bf00      	nop
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	2000005c 	.word	0x2000005c
 80032a0:	200004ec 	.word	0x200004ec

080032a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  return uwTick;
 80032a8:	4b03      	ldr	r3, [pc, #12]	; (80032b8 <HAL_GetTick+0x14>)
 80032aa:	681b      	ldr	r3, [r3, #0]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	200004ec 	.word	0x200004ec

080032bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032cc:	4b0c      	ldr	r3, [pc, #48]	; (8003300 <__NVIC_SetPriorityGrouping+0x44>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032d8:	4013      	ands	r3, r2
 80032da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032ee:	4a04      	ldr	r2, [pc, #16]	; (8003300 <__NVIC_SetPriorityGrouping+0x44>)
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	60d3      	str	r3, [r2, #12]
}
 80032f4:	bf00      	nop
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	e000ed00 	.word	0xe000ed00

08003304 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003308:	4b04      	ldr	r3, [pc, #16]	; (800331c <__NVIC_GetPriorityGrouping+0x18>)
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	0a1b      	lsrs	r3, r3, #8
 800330e:	f003 0307 	and.w	r3, r3, #7
}
 8003312:	4618      	mov	r0, r3
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	e000ed00 	.word	0xe000ed00

08003320 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	4603      	mov	r3, r0
 8003328:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800332a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332e:	2b00      	cmp	r3, #0
 8003330:	db0b      	blt.n	800334a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003332:	79fb      	ldrb	r3, [r7, #7]
 8003334:	f003 021f 	and.w	r2, r3, #31
 8003338:	4907      	ldr	r1, [pc, #28]	; (8003358 <__NVIC_EnableIRQ+0x38>)
 800333a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333e:	095b      	lsrs	r3, r3, #5
 8003340:	2001      	movs	r0, #1
 8003342:	fa00 f202 	lsl.w	r2, r0, r2
 8003346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800334a:	bf00      	nop
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	e000e100 	.word	0xe000e100

0800335c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	4603      	mov	r3, r0
 8003364:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336a:	2b00      	cmp	r3, #0
 800336c:	db12      	blt.n	8003394 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800336e:	79fb      	ldrb	r3, [r7, #7]
 8003370:	f003 021f 	and.w	r2, r3, #31
 8003374:	490a      	ldr	r1, [pc, #40]	; (80033a0 <__NVIC_DisableIRQ+0x44>)
 8003376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337a:	095b      	lsrs	r3, r3, #5
 800337c:	2001      	movs	r0, #1
 800337e:	fa00 f202 	lsl.w	r2, r0, r2
 8003382:	3320      	adds	r3, #32
 8003384:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003388:	f3bf 8f4f 	dsb	sy
}
 800338c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800338e:	f3bf 8f6f 	isb	sy
}
 8003392:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr
 80033a0:	e000e100 	.word	0xe000e100

080033a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	4603      	mov	r3, r0
 80033ac:	6039      	str	r1, [r7, #0]
 80033ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	db0a      	blt.n	80033ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	b2da      	uxtb	r2, r3
 80033bc:	490c      	ldr	r1, [pc, #48]	; (80033f0 <__NVIC_SetPriority+0x4c>)
 80033be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c2:	0112      	lsls	r2, r2, #4
 80033c4:	b2d2      	uxtb	r2, r2
 80033c6:	440b      	add	r3, r1
 80033c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033cc:	e00a      	b.n	80033e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	4908      	ldr	r1, [pc, #32]	; (80033f4 <__NVIC_SetPriority+0x50>)
 80033d4:	79fb      	ldrb	r3, [r7, #7]
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	3b04      	subs	r3, #4
 80033dc:	0112      	lsls	r2, r2, #4
 80033de:	b2d2      	uxtb	r2, r2
 80033e0:	440b      	add	r3, r1
 80033e2:	761a      	strb	r2, [r3, #24]
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr
 80033f0:	e000e100 	.word	0xe000e100
 80033f4:	e000ed00 	.word	0xe000ed00

080033f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b089      	sub	sp, #36	; 0x24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f003 0307 	and.w	r3, r3, #7
 800340a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	f1c3 0307 	rsb	r3, r3, #7
 8003412:	2b04      	cmp	r3, #4
 8003414:	bf28      	it	cs
 8003416:	2304      	movcs	r3, #4
 8003418:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	3304      	adds	r3, #4
 800341e:	2b06      	cmp	r3, #6
 8003420:	d902      	bls.n	8003428 <NVIC_EncodePriority+0x30>
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	3b03      	subs	r3, #3
 8003426:	e000      	b.n	800342a <NVIC_EncodePriority+0x32>
 8003428:	2300      	movs	r3, #0
 800342a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800342c:	f04f 32ff 	mov.w	r2, #4294967295
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	fa02 f303 	lsl.w	r3, r2, r3
 8003436:	43da      	mvns	r2, r3
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	401a      	ands	r2, r3
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003440:	f04f 31ff 	mov.w	r1, #4294967295
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	fa01 f303 	lsl.w	r3, r1, r3
 800344a:	43d9      	mvns	r1, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003450:	4313      	orrs	r3, r2
         );
}
 8003452:	4618      	mov	r0, r3
 8003454:	3724      	adds	r7, #36	; 0x24
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
	...

08003460 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	3b01      	subs	r3, #1
 800346c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003470:	d301      	bcc.n	8003476 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003472:	2301      	movs	r3, #1
 8003474:	e00f      	b.n	8003496 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003476:	4a0a      	ldr	r2, [pc, #40]	; (80034a0 <SysTick_Config+0x40>)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	3b01      	subs	r3, #1
 800347c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800347e:	210f      	movs	r1, #15
 8003480:	f04f 30ff 	mov.w	r0, #4294967295
 8003484:	f7ff ff8e 	bl	80033a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003488:	4b05      	ldr	r3, [pc, #20]	; (80034a0 <SysTick_Config+0x40>)
 800348a:	2200      	movs	r2, #0
 800348c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800348e:	4b04      	ldr	r3, [pc, #16]	; (80034a0 <SysTick_Config+0x40>)
 8003490:	2207      	movs	r2, #7
 8003492:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	e000e010 	.word	0xe000e010

080034a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f7ff ff05 	bl	80032bc <__NVIC_SetPriorityGrouping>
}
 80034b2:	bf00      	nop
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b086      	sub	sp, #24
 80034be:	af00      	add	r7, sp, #0
 80034c0:	4603      	mov	r3, r0
 80034c2:	60b9      	str	r1, [r7, #8]
 80034c4:	607a      	str	r2, [r7, #4]
 80034c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034c8:	2300      	movs	r3, #0
 80034ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034cc:	f7ff ff1a 	bl	8003304 <__NVIC_GetPriorityGrouping>
 80034d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	68b9      	ldr	r1, [r7, #8]
 80034d6:	6978      	ldr	r0, [r7, #20]
 80034d8:	f7ff ff8e 	bl	80033f8 <NVIC_EncodePriority>
 80034dc:	4602      	mov	r2, r0
 80034de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034e2:	4611      	mov	r1, r2
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7ff ff5d 	bl	80033a4 <__NVIC_SetPriority>
}
 80034ea:	bf00      	nop
 80034ec:	3718      	adds	r7, #24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b082      	sub	sp, #8
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	4603      	mov	r3, r0
 80034fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003500:	4618      	mov	r0, r3
 8003502:	f7ff ff0d 	bl	8003320 <__NVIC_EnableIRQ>
}
 8003506:	bf00      	nop
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b082      	sub	sp, #8
 8003512:	af00      	add	r7, sp, #0
 8003514:	4603      	mov	r3, r0
 8003516:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff ff1d 	bl	800335c <__NVIC_DisableIRQ>
}
 8003522:	bf00      	nop
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b082      	sub	sp, #8
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7ff ff94 	bl	8003460 <SysTick_Config>
 8003538:	4603      	mov	r3, r0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b084      	sub	sp, #16
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800354e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003550:	f7ff fea8 	bl	80032a4 <HAL_GetTick>
 8003554:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d008      	beq.n	8003574 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2280      	movs	r2, #128	; 0x80
 8003566:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e052      	b.n	800361a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0216 	bic.w	r2, r2, #22
 8003582:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	695a      	ldr	r2, [r3, #20]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003592:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003598:	2b00      	cmp	r3, #0
 800359a:	d103      	bne.n	80035a4 <HAL_DMA_Abort+0x62>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d007      	beq.n	80035b4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f022 0208 	bic.w	r2, r2, #8
 80035b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f022 0201 	bic.w	r2, r2, #1
 80035c2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035c4:	e013      	b.n	80035ee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035c6:	f7ff fe6d 	bl	80032a4 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b05      	cmp	r3, #5
 80035d2:	d90c      	bls.n	80035ee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2220      	movs	r2, #32
 80035d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2203      	movs	r2, #3
 80035de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e015      	b.n	800361a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1e4      	bne.n	80035c6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003600:	223f      	movs	r2, #63	; 0x3f
 8003602:	409a      	lsls	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003622:	b480      	push	{r7}
 8003624:	b083      	sub	sp, #12
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d004      	beq.n	8003640 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2280      	movs	r2, #128	; 0x80
 800363a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e00c      	b.n	800365a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2205      	movs	r2, #5
 8003644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 0201 	bic.w	r2, r2, #1
 8003656:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
	...

08003668 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003668:	b480      	push	{r7}
 800366a:	b089      	sub	sp, #36	; 0x24
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003672:	2300      	movs	r3, #0
 8003674:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003676:	2300      	movs	r3, #0
 8003678:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800367a:	2300      	movs	r3, #0
 800367c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800367e:	2300      	movs	r3, #0
 8003680:	61fb      	str	r3, [r7, #28]
 8003682:	e165      	b.n	8003950 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003684:	2201      	movs	r2, #1
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	4013      	ands	r3, r2
 8003696:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	429a      	cmp	r2, r3
 800369e:	f040 8154 	bne.w	800394a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f003 0303 	and.w	r3, r3, #3
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d005      	beq.n	80036ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d130      	bne.n	800371c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	005b      	lsls	r3, r3, #1
 80036c4:	2203      	movs	r2, #3
 80036c6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ca:	43db      	mvns	r3, r3
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	4013      	ands	r3, r2
 80036d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	68da      	ldr	r2, [r3, #12]
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	fa02 f303 	lsl.w	r3, r2, r3
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036f0:	2201      	movs	r2, #1
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	43db      	mvns	r3, r3
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	4013      	ands	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	091b      	lsrs	r3, r3, #4
 8003706:	f003 0201 	and.w	r2, r3, #1
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	4313      	orrs	r3, r2
 8003714:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f003 0303 	and.w	r3, r3, #3
 8003724:	2b03      	cmp	r3, #3
 8003726:	d017      	beq.n	8003758 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	2203      	movs	r2, #3
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	43db      	mvns	r3, r3
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	4013      	ands	r3, r2
 800373e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	4313      	orrs	r3, r2
 8003750:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f003 0303 	and.w	r3, r3, #3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d123      	bne.n	80037ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	08da      	lsrs	r2, r3, #3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	3208      	adds	r2, #8
 800376c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003770:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	220f      	movs	r2, #15
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	43db      	mvns	r3, r3
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	4013      	ands	r3, r2
 8003786:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	691a      	ldr	r2, [r3, #16]
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	f003 0307 	and.w	r3, r3, #7
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	4313      	orrs	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	08da      	lsrs	r2, r3, #3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	3208      	adds	r2, #8
 80037a6:	69b9      	ldr	r1, [r7, #24]
 80037a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	2203      	movs	r2, #3
 80037b8:	fa02 f303 	lsl.w	r3, r2, r3
 80037bc:	43db      	mvns	r3, r3
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	4013      	ands	r3, r2
 80037c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f003 0203 	and.w	r2, r3, #3
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 80ae 	beq.w	800394a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ee:	2300      	movs	r3, #0
 80037f0:	60fb      	str	r3, [r7, #12]
 80037f2:	4b5d      	ldr	r3, [pc, #372]	; (8003968 <HAL_GPIO_Init+0x300>)
 80037f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f6:	4a5c      	ldr	r2, [pc, #368]	; (8003968 <HAL_GPIO_Init+0x300>)
 80037f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037fc:	6453      	str	r3, [r2, #68]	; 0x44
 80037fe:	4b5a      	ldr	r3, [pc, #360]	; (8003968 <HAL_GPIO_Init+0x300>)
 8003800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800380a:	4a58      	ldr	r2, [pc, #352]	; (800396c <HAL_GPIO_Init+0x304>)
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	089b      	lsrs	r3, r3, #2
 8003810:	3302      	adds	r3, #2
 8003812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003816:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	f003 0303 	and.w	r3, r3, #3
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	220f      	movs	r2, #15
 8003822:	fa02 f303 	lsl.w	r3, r2, r3
 8003826:	43db      	mvns	r3, r3
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	4013      	ands	r3, r2
 800382c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a4f      	ldr	r2, [pc, #316]	; (8003970 <HAL_GPIO_Init+0x308>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d025      	beq.n	8003882 <HAL_GPIO_Init+0x21a>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a4e      	ldr	r2, [pc, #312]	; (8003974 <HAL_GPIO_Init+0x30c>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d01f      	beq.n	800387e <HAL_GPIO_Init+0x216>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a4d      	ldr	r2, [pc, #308]	; (8003978 <HAL_GPIO_Init+0x310>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d019      	beq.n	800387a <HAL_GPIO_Init+0x212>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a4c      	ldr	r2, [pc, #304]	; (800397c <HAL_GPIO_Init+0x314>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d013      	beq.n	8003876 <HAL_GPIO_Init+0x20e>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a4b      	ldr	r2, [pc, #300]	; (8003980 <HAL_GPIO_Init+0x318>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d00d      	beq.n	8003872 <HAL_GPIO_Init+0x20a>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a4a      	ldr	r2, [pc, #296]	; (8003984 <HAL_GPIO_Init+0x31c>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d007      	beq.n	800386e <HAL_GPIO_Init+0x206>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a49      	ldr	r2, [pc, #292]	; (8003988 <HAL_GPIO_Init+0x320>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d101      	bne.n	800386a <HAL_GPIO_Init+0x202>
 8003866:	2306      	movs	r3, #6
 8003868:	e00c      	b.n	8003884 <HAL_GPIO_Init+0x21c>
 800386a:	2307      	movs	r3, #7
 800386c:	e00a      	b.n	8003884 <HAL_GPIO_Init+0x21c>
 800386e:	2305      	movs	r3, #5
 8003870:	e008      	b.n	8003884 <HAL_GPIO_Init+0x21c>
 8003872:	2304      	movs	r3, #4
 8003874:	e006      	b.n	8003884 <HAL_GPIO_Init+0x21c>
 8003876:	2303      	movs	r3, #3
 8003878:	e004      	b.n	8003884 <HAL_GPIO_Init+0x21c>
 800387a:	2302      	movs	r3, #2
 800387c:	e002      	b.n	8003884 <HAL_GPIO_Init+0x21c>
 800387e:	2301      	movs	r3, #1
 8003880:	e000      	b.n	8003884 <HAL_GPIO_Init+0x21c>
 8003882:	2300      	movs	r3, #0
 8003884:	69fa      	ldr	r2, [r7, #28]
 8003886:	f002 0203 	and.w	r2, r2, #3
 800388a:	0092      	lsls	r2, r2, #2
 800388c:	4093      	lsls	r3, r2
 800388e:	69ba      	ldr	r2, [r7, #24]
 8003890:	4313      	orrs	r3, r2
 8003892:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003894:	4935      	ldr	r1, [pc, #212]	; (800396c <HAL_GPIO_Init+0x304>)
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	089b      	lsrs	r3, r3, #2
 800389a:	3302      	adds	r3, #2
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038a2:	4b3a      	ldr	r3, [pc, #232]	; (800398c <HAL_GPIO_Init+0x324>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	43db      	mvns	r3, r3
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	4013      	ands	r3, r2
 80038b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038c6:	4a31      	ldr	r2, [pc, #196]	; (800398c <HAL_GPIO_Init+0x324>)
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038cc:	4b2f      	ldr	r3, [pc, #188]	; (800398c <HAL_GPIO_Init+0x324>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	43db      	mvns	r3, r3
 80038d6:	69ba      	ldr	r2, [r7, #24]
 80038d8:	4013      	ands	r3, r2
 80038da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d003      	beq.n	80038f0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038f0:	4a26      	ldr	r2, [pc, #152]	; (800398c <HAL_GPIO_Init+0x324>)
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038f6:	4b25      	ldr	r3, [pc, #148]	; (800398c <HAL_GPIO_Init+0x324>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	43db      	mvns	r3, r3
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	4013      	ands	r3, r2
 8003904:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	4313      	orrs	r3, r2
 8003918:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800391a:	4a1c      	ldr	r2, [pc, #112]	; (800398c <HAL_GPIO_Init+0x324>)
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003920:	4b1a      	ldr	r3, [pc, #104]	; (800398c <HAL_GPIO_Init+0x324>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	43db      	mvns	r3, r3
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	4013      	ands	r3, r2
 800392e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d003      	beq.n	8003944 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	4313      	orrs	r3, r2
 8003942:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003944:	4a11      	ldr	r2, [pc, #68]	; (800398c <HAL_GPIO_Init+0x324>)
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	3301      	adds	r3, #1
 800394e:	61fb      	str	r3, [r7, #28]
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	2b0f      	cmp	r3, #15
 8003954:	f67f ae96 	bls.w	8003684 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003958:	bf00      	nop
 800395a:	bf00      	nop
 800395c:	3724      	adds	r7, #36	; 0x24
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	40023800 	.word	0x40023800
 800396c:	40013800 	.word	0x40013800
 8003970:	40020000 	.word	0x40020000
 8003974:	40020400 	.word	0x40020400
 8003978:	40020800 	.word	0x40020800
 800397c:	40020c00 	.word	0x40020c00
 8003980:	40021000 	.word	0x40021000
 8003984:	40021400 	.word	0x40021400
 8003988:	40021800 	.word	0x40021800
 800398c:	40013c00 	.word	0x40013c00

08003990 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	460b      	mov	r3, r1
 800399a:	807b      	strh	r3, [r7, #2]
 800399c:	4613      	mov	r3, r2
 800399e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039a0:	787b      	ldrb	r3, [r7, #1]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039a6:	887a      	ldrh	r2, [r7, #2]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039ac:	e003      	b.n	80039b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039ae:	887b      	ldrh	r3, [r7, #2]
 80039b0:	041a      	lsls	r2, r3, #16
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	619a      	str	r2, [r3, #24]
}
 80039b6:	bf00      	nop
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
	...

080039c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	4603      	mov	r3, r0
 80039cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80039ce:	4b08      	ldr	r3, [pc, #32]	; (80039f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039d0:	695a      	ldr	r2, [r3, #20]
 80039d2:	88fb      	ldrh	r3, [r7, #6]
 80039d4:	4013      	ands	r3, r2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d006      	beq.n	80039e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80039da:	4a05      	ldr	r2, [pc, #20]	; (80039f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039dc:	88fb      	ldrh	r3, [r7, #6]
 80039de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80039e0:	88fb      	ldrh	r3, [r7, #6]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7fe fa88 	bl	8001ef8 <HAL_GPIO_EXTI_Callback>
  }
}
 80039e8:	bf00      	nop
 80039ea:	3708      	adds	r7, #8
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	40013c00 	.word	0x40013c00

080039f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d101      	bne.n	8003a08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e0cc      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a08:	4b68      	ldr	r3, [pc, #416]	; (8003bac <HAL_RCC_ClockConfig+0x1b8>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 030f 	and.w	r3, r3, #15
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d90c      	bls.n	8003a30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a16:	4b65      	ldr	r3, [pc, #404]	; (8003bac <HAL_RCC_ClockConfig+0x1b8>)
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	b2d2      	uxtb	r2, r2
 8003a1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a1e:	4b63      	ldr	r3, [pc, #396]	; (8003bac <HAL_RCC_ClockConfig+0x1b8>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 030f 	and.w	r3, r3, #15
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d001      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e0b8      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d020      	beq.n	8003a7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0304 	and.w	r3, r3, #4
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d005      	beq.n	8003a54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a48:	4b59      	ldr	r3, [pc, #356]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	4a58      	ldr	r2, [pc, #352]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0308 	and.w	r3, r3, #8
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d005      	beq.n	8003a6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a60:	4b53      	ldr	r3, [pc, #332]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	4a52      	ldr	r2, [pc, #328]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a6c:	4b50      	ldr	r3, [pc, #320]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	494d      	ldr	r1, [pc, #308]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d044      	beq.n	8003b14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d107      	bne.n	8003aa2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a92:	4b47      	ldr	r3, [pc, #284]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d119      	bne.n	8003ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e07f      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d003      	beq.n	8003ab2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aae:	2b03      	cmp	r3, #3
 8003ab0:	d107      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ab2:	4b3f      	ldr	r3, [pc, #252]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d109      	bne.n	8003ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e06f      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ac2:	4b3b      	ldr	r3, [pc, #236]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e067      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ad2:	4b37      	ldr	r3, [pc, #220]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f023 0203 	bic.w	r2, r3, #3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	4934      	ldr	r1, [pc, #208]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ae4:	f7ff fbde 	bl	80032a4 <HAL_GetTick>
 8003ae8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aea:	e00a      	b.n	8003b02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aec:	f7ff fbda 	bl	80032a4 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e04f      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b02:	4b2b      	ldr	r3, [pc, #172]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 020c 	and.w	r2, r3, #12
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d1eb      	bne.n	8003aec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b14:	4b25      	ldr	r3, [pc, #148]	; (8003bac <HAL_RCC_ClockConfig+0x1b8>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 030f 	and.w	r3, r3, #15
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d20c      	bcs.n	8003b3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b22:	4b22      	ldr	r3, [pc, #136]	; (8003bac <HAL_RCC_ClockConfig+0x1b8>)
 8003b24:	683a      	ldr	r2, [r7, #0]
 8003b26:	b2d2      	uxtb	r2, r2
 8003b28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b2a:	4b20      	ldr	r3, [pc, #128]	; (8003bac <HAL_RCC_ClockConfig+0x1b8>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 030f 	and.w	r3, r3, #15
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d001      	beq.n	8003b3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e032      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0304 	and.w	r3, r3, #4
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d008      	beq.n	8003b5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b48:	4b19      	ldr	r3, [pc, #100]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	4916      	ldr	r1, [pc, #88]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0308 	and.w	r3, r3, #8
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d009      	beq.n	8003b7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b66:	4b12      	ldr	r3, [pc, #72]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	490e      	ldr	r1, [pc, #56]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b7a:	f000 f855 	bl	8003c28 <HAL_RCC_GetSysClockFreq>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	4b0b      	ldr	r3, [pc, #44]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	091b      	lsrs	r3, r3, #4
 8003b86:	f003 030f 	and.w	r3, r3, #15
 8003b8a:	490a      	ldr	r1, [pc, #40]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b8c:	5ccb      	ldrb	r3, [r1, r3]
 8003b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b92:	4a09      	ldr	r2, [pc, #36]	; (8003bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b96:	4b09      	ldr	r3, [pc, #36]	; (8003bbc <HAL_RCC_ClockConfig+0x1c8>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7ff fb3e 	bl	800321c <HAL_InitTick>

  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	40023c00 	.word	0x40023c00
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	0800abec 	.word	0x0800abec
 8003bb8:	20000054 	.word	0x20000054
 8003bbc:	20000058 	.word	0x20000058

08003bc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bc4:	4b03      	ldr	r3, [pc, #12]	; (8003bd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	20000054 	.word	0x20000054

08003bd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bdc:	f7ff fff0 	bl	8003bc0 <HAL_RCC_GetHCLKFreq>
 8003be0:	4602      	mov	r2, r0
 8003be2:	4b05      	ldr	r3, [pc, #20]	; (8003bf8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	0a9b      	lsrs	r3, r3, #10
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	4903      	ldr	r1, [pc, #12]	; (8003bfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bee:	5ccb      	ldrb	r3, [r1, r3]
 8003bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	0800abfc 	.word	0x0800abfc

08003c00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c04:	f7ff ffdc 	bl	8003bc0 <HAL_RCC_GetHCLKFreq>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	4b05      	ldr	r3, [pc, #20]	; (8003c20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	0b5b      	lsrs	r3, r3, #13
 8003c10:	f003 0307 	and.w	r3, r3, #7
 8003c14:	4903      	ldr	r1, [pc, #12]	; (8003c24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c16:	5ccb      	ldrb	r3, [r1, r3]
 8003c18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	40023800 	.word	0x40023800
 8003c24:	0800abfc 	.word	0x0800abfc

08003c28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c2c:	b0ae      	sub	sp, #184	; 0xb8
 8003c2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003c30:	2300      	movs	r3, #0
 8003c32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003c36:	2300      	movs	r3, #0
 8003c38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003c42:	2300      	movs	r3, #0
 8003c44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c4e:	4bcb      	ldr	r3, [pc, #812]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f003 030c 	and.w	r3, r3, #12
 8003c56:	2b0c      	cmp	r3, #12
 8003c58:	f200 8206 	bhi.w	8004068 <HAL_RCC_GetSysClockFreq+0x440>
 8003c5c:	a201      	add	r2, pc, #4	; (adr r2, 8003c64 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c62:	bf00      	nop
 8003c64:	08003c99 	.word	0x08003c99
 8003c68:	08004069 	.word	0x08004069
 8003c6c:	08004069 	.word	0x08004069
 8003c70:	08004069 	.word	0x08004069
 8003c74:	08003ca1 	.word	0x08003ca1
 8003c78:	08004069 	.word	0x08004069
 8003c7c:	08004069 	.word	0x08004069
 8003c80:	08004069 	.word	0x08004069
 8003c84:	08003ca9 	.word	0x08003ca9
 8003c88:	08004069 	.word	0x08004069
 8003c8c:	08004069 	.word	0x08004069
 8003c90:	08004069 	.word	0x08004069
 8003c94:	08003e99 	.word	0x08003e99
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c98:	4bb9      	ldr	r3, [pc, #740]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x358>)
 8003c9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003c9e:	e1e7      	b.n	8004070 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ca0:	4bb8      	ldr	r3, [pc, #736]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003ca2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003ca6:	e1e3      	b.n	8004070 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ca8:	4bb4      	ldr	r3, [pc, #720]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cb4:	4bb1      	ldr	r3, [pc, #708]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d071      	beq.n	8003da4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cc0:	4bae      	ldr	r3, [pc, #696]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	099b      	lsrs	r3, r3, #6
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ccc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003cd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cd8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003cdc:	2300      	movs	r3, #0
 8003cde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003ce2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003ce6:	4622      	mov	r2, r4
 8003ce8:	462b      	mov	r3, r5
 8003cea:	f04f 0000 	mov.w	r0, #0
 8003cee:	f04f 0100 	mov.w	r1, #0
 8003cf2:	0159      	lsls	r1, r3, #5
 8003cf4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cf8:	0150      	lsls	r0, r2, #5
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	4621      	mov	r1, r4
 8003d00:	1a51      	subs	r1, r2, r1
 8003d02:	6439      	str	r1, [r7, #64]	; 0x40
 8003d04:	4629      	mov	r1, r5
 8003d06:	eb63 0301 	sbc.w	r3, r3, r1
 8003d0a:	647b      	str	r3, [r7, #68]	; 0x44
 8003d0c:	f04f 0200 	mov.w	r2, #0
 8003d10:	f04f 0300 	mov.w	r3, #0
 8003d14:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003d18:	4649      	mov	r1, r9
 8003d1a:	018b      	lsls	r3, r1, #6
 8003d1c:	4641      	mov	r1, r8
 8003d1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d22:	4641      	mov	r1, r8
 8003d24:	018a      	lsls	r2, r1, #6
 8003d26:	4641      	mov	r1, r8
 8003d28:	1a51      	subs	r1, r2, r1
 8003d2a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d2c:	4649      	mov	r1, r9
 8003d2e:	eb63 0301 	sbc.w	r3, r3, r1
 8003d32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d34:	f04f 0200 	mov.w	r2, #0
 8003d38:	f04f 0300 	mov.w	r3, #0
 8003d3c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003d40:	4649      	mov	r1, r9
 8003d42:	00cb      	lsls	r3, r1, #3
 8003d44:	4641      	mov	r1, r8
 8003d46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d4a:	4641      	mov	r1, r8
 8003d4c:	00ca      	lsls	r2, r1, #3
 8003d4e:	4610      	mov	r0, r2
 8003d50:	4619      	mov	r1, r3
 8003d52:	4603      	mov	r3, r0
 8003d54:	4622      	mov	r2, r4
 8003d56:	189b      	adds	r3, r3, r2
 8003d58:	633b      	str	r3, [r7, #48]	; 0x30
 8003d5a:	462b      	mov	r3, r5
 8003d5c:	460a      	mov	r2, r1
 8003d5e:	eb42 0303 	adc.w	r3, r2, r3
 8003d62:	637b      	str	r3, [r7, #52]	; 0x34
 8003d64:	f04f 0200 	mov.w	r2, #0
 8003d68:	f04f 0300 	mov.w	r3, #0
 8003d6c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003d70:	4629      	mov	r1, r5
 8003d72:	024b      	lsls	r3, r1, #9
 8003d74:	4621      	mov	r1, r4
 8003d76:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d7a:	4621      	mov	r1, r4
 8003d7c:	024a      	lsls	r2, r1, #9
 8003d7e:	4610      	mov	r0, r2
 8003d80:	4619      	mov	r1, r3
 8003d82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d86:	2200      	movs	r2, #0
 8003d88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d8c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003d90:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003d94:	f7fc ffa8 	bl	8000ce8 <__aeabi_uldivmod>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003da2:	e067      	b.n	8003e74 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003da4:	4b75      	ldr	r3, [pc, #468]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	099b      	lsrs	r3, r3, #6
 8003daa:	2200      	movs	r2, #0
 8003dac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003db0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003db4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003db8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dbc:	67bb      	str	r3, [r7, #120]	; 0x78
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003dc2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003dc6:	4622      	mov	r2, r4
 8003dc8:	462b      	mov	r3, r5
 8003dca:	f04f 0000 	mov.w	r0, #0
 8003dce:	f04f 0100 	mov.w	r1, #0
 8003dd2:	0159      	lsls	r1, r3, #5
 8003dd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dd8:	0150      	lsls	r0, r2, #5
 8003dda:	4602      	mov	r2, r0
 8003ddc:	460b      	mov	r3, r1
 8003dde:	4621      	mov	r1, r4
 8003de0:	1a51      	subs	r1, r2, r1
 8003de2:	62b9      	str	r1, [r7, #40]	; 0x28
 8003de4:	4629      	mov	r1, r5
 8003de6:	eb63 0301 	sbc.w	r3, r3, r1
 8003dea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dec:	f04f 0200 	mov.w	r2, #0
 8003df0:	f04f 0300 	mov.w	r3, #0
 8003df4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003df8:	4649      	mov	r1, r9
 8003dfa:	018b      	lsls	r3, r1, #6
 8003dfc:	4641      	mov	r1, r8
 8003dfe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e02:	4641      	mov	r1, r8
 8003e04:	018a      	lsls	r2, r1, #6
 8003e06:	4641      	mov	r1, r8
 8003e08:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e0c:	4649      	mov	r1, r9
 8003e0e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e12:	f04f 0200 	mov.w	r2, #0
 8003e16:	f04f 0300 	mov.w	r3, #0
 8003e1a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e1e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e26:	4692      	mov	sl, r2
 8003e28:	469b      	mov	fp, r3
 8003e2a:	4623      	mov	r3, r4
 8003e2c:	eb1a 0303 	adds.w	r3, sl, r3
 8003e30:	623b      	str	r3, [r7, #32]
 8003e32:	462b      	mov	r3, r5
 8003e34:	eb4b 0303 	adc.w	r3, fp, r3
 8003e38:	627b      	str	r3, [r7, #36]	; 0x24
 8003e3a:	f04f 0200 	mov.w	r2, #0
 8003e3e:	f04f 0300 	mov.w	r3, #0
 8003e42:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003e46:	4629      	mov	r1, r5
 8003e48:	028b      	lsls	r3, r1, #10
 8003e4a:	4621      	mov	r1, r4
 8003e4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e50:	4621      	mov	r1, r4
 8003e52:	028a      	lsls	r2, r1, #10
 8003e54:	4610      	mov	r0, r2
 8003e56:	4619      	mov	r1, r3
 8003e58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	673b      	str	r3, [r7, #112]	; 0x70
 8003e60:	677a      	str	r2, [r7, #116]	; 0x74
 8003e62:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003e66:	f7fc ff3f 	bl	8000ce8 <__aeabi_uldivmod>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	4613      	mov	r3, r2
 8003e70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e74:	4b41      	ldr	r3, [pc, #260]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	0c1b      	lsrs	r3, r3, #16
 8003e7a:	f003 0303 	and.w	r3, r3, #3
 8003e7e:	3301      	adds	r3, #1
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003e86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003e96:	e0eb      	b.n	8004070 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e98:	4b38      	ldr	r3, [pc, #224]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ea0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ea4:	4b35      	ldr	r3, [pc, #212]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d06b      	beq.n	8003f88 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eb0:	4b32      	ldr	r3, [pc, #200]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	099b      	lsrs	r3, r3, #6
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003eba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ebc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ec2:	663b      	str	r3, [r7, #96]	; 0x60
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	667b      	str	r3, [r7, #100]	; 0x64
 8003ec8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003ecc:	4622      	mov	r2, r4
 8003ece:	462b      	mov	r3, r5
 8003ed0:	f04f 0000 	mov.w	r0, #0
 8003ed4:	f04f 0100 	mov.w	r1, #0
 8003ed8:	0159      	lsls	r1, r3, #5
 8003eda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ede:	0150      	lsls	r0, r2, #5
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	4621      	mov	r1, r4
 8003ee6:	1a51      	subs	r1, r2, r1
 8003ee8:	61b9      	str	r1, [r7, #24]
 8003eea:	4629      	mov	r1, r5
 8003eec:	eb63 0301 	sbc.w	r3, r3, r1
 8003ef0:	61fb      	str	r3, [r7, #28]
 8003ef2:	f04f 0200 	mov.w	r2, #0
 8003ef6:	f04f 0300 	mov.w	r3, #0
 8003efa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003efe:	4659      	mov	r1, fp
 8003f00:	018b      	lsls	r3, r1, #6
 8003f02:	4651      	mov	r1, sl
 8003f04:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f08:	4651      	mov	r1, sl
 8003f0a:	018a      	lsls	r2, r1, #6
 8003f0c:	4651      	mov	r1, sl
 8003f0e:	ebb2 0801 	subs.w	r8, r2, r1
 8003f12:	4659      	mov	r1, fp
 8003f14:	eb63 0901 	sbc.w	r9, r3, r1
 8003f18:	f04f 0200 	mov.w	r2, #0
 8003f1c:	f04f 0300 	mov.w	r3, #0
 8003f20:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f24:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f28:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f2c:	4690      	mov	r8, r2
 8003f2e:	4699      	mov	r9, r3
 8003f30:	4623      	mov	r3, r4
 8003f32:	eb18 0303 	adds.w	r3, r8, r3
 8003f36:	613b      	str	r3, [r7, #16]
 8003f38:	462b      	mov	r3, r5
 8003f3a:	eb49 0303 	adc.w	r3, r9, r3
 8003f3e:	617b      	str	r3, [r7, #20]
 8003f40:	f04f 0200 	mov.w	r2, #0
 8003f44:	f04f 0300 	mov.w	r3, #0
 8003f48:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003f4c:	4629      	mov	r1, r5
 8003f4e:	024b      	lsls	r3, r1, #9
 8003f50:	4621      	mov	r1, r4
 8003f52:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f56:	4621      	mov	r1, r4
 8003f58:	024a      	lsls	r2, r1, #9
 8003f5a:	4610      	mov	r0, r2
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f62:	2200      	movs	r2, #0
 8003f64:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f66:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003f68:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f6c:	f7fc febc 	bl	8000ce8 <__aeabi_uldivmod>
 8003f70:	4602      	mov	r2, r0
 8003f72:	460b      	mov	r3, r1
 8003f74:	4613      	mov	r3, r2
 8003f76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f7a:	e065      	b.n	8004048 <HAL_RCC_GetSysClockFreq+0x420>
 8003f7c:	40023800 	.word	0x40023800
 8003f80:	00f42400 	.word	0x00f42400
 8003f84:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f88:	4b3d      	ldr	r3, [pc, #244]	; (8004080 <HAL_RCC_GetSysClockFreq+0x458>)
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	099b      	lsrs	r3, r3, #6
 8003f8e:	2200      	movs	r2, #0
 8003f90:	4618      	mov	r0, r3
 8003f92:	4611      	mov	r1, r2
 8003f94:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f98:	653b      	str	r3, [r7, #80]	; 0x50
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	657b      	str	r3, [r7, #84]	; 0x54
 8003f9e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003fa2:	4642      	mov	r2, r8
 8003fa4:	464b      	mov	r3, r9
 8003fa6:	f04f 0000 	mov.w	r0, #0
 8003faa:	f04f 0100 	mov.w	r1, #0
 8003fae:	0159      	lsls	r1, r3, #5
 8003fb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fb4:	0150      	lsls	r0, r2, #5
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	460b      	mov	r3, r1
 8003fba:	4641      	mov	r1, r8
 8003fbc:	1a51      	subs	r1, r2, r1
 8003fbe:	60b9      	str	r1, [r7, #8]
 8003fc0:	4649      	mov	r1, r9
 8003fc2:	eb63 0301 	sbc.w	r3, r3, r1
 8003fc6:	60fb      	str	r3, [r7, #12]
 8003fc8:	f04f 0200 	mov.w	r2, #0
 8003fcc:	f04f 0300 	mov.w	r3, #0
 8003fd0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003fd4:	4659      	mov	r1, fp
 8003fd6:	018b      	lsls	r3, r1, #6
 8003fd8:	4651      	mov	r1, sl
 8003fda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fde:	4651      	mov	r1, sl
 8003fe0:	018a      	lsls	r2, r1, #6
 8003fe2:	4651      	mov	r1, sl
 8003fe4:	1a54      	subs	r4, r2, r1
 8003fe6:	4659      	mov	r1, fp
 8003fe8:	eb63 0501 	sbc.w	r5, r3, r1
 8003fec:	f04f 0200 	mov.w	r2, #0
 8003ff0:	f04f 0300 	mov.w	r3, #0
 8003ff4:	00eb      	lsls	r3, r5, #3
 8003ff6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ffa:	00e2      	lsls	r2, r4, #3
 8003ffc:	4614      	mov	r4, r2
 8003ffe:	461d      	mov	r5, r3
 8004000:	4643      	mov	r3, r8
 8004002:	18e3      	adds	r3, r4, r3
 8004004:	603b      	str	r3, [r7, #0]
 8004006:	464b      	mov	r3, r9
 8004008:	eb45 0303 	adc.w	r3, r5, r3
 800400c:	607b      	str	r3, [r7, #4]
 800400e:	f04f 0200 	mov.w	r2, #0
 8004012:	f04f 0300 	mov.w	r3, #0
 8004016:	e9d7 4500 	ldrd	r4, r5, [r7]
 800401a:	4629      	mov	r1, r5
 800401c:	028b      	lsls	r3, r1, #10
 800401e:	4621      	mov	r1, r4
 8004020:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004024:	4621      	mov	r1, r4
 8004026:	028a      	lsls	r2, r1, #10
 8004028:	4610      	mov	r0, r2
 800402a:	4619      	mov	r1, r3
 800402c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004030:	2200      	movs	r2, #0
 8004032:	64bb      	str	r3, [r7, #72]	; 0x48
 8004034:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004036:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800403a:	f7fc fe55 	bl	8000ce8 <__aeabi_uldivmod>
 800403e:	4602      	mov	r2, r0
 8004040:	460b      	mov	r3, r1
 8004042:	4613      	mov	r3, r2
 8004044:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004048:	4b0d      	ldr	r3, [pc, #52]	; (8004080 <HAL_RCC_GetSysClockFreq+0x458>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	0f1b      	lsrs	r3, r3, #28
 800404e:	f003 0307 	and.w	r3, r3, #7
 8004052:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004056:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800405a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800405e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004062:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004066:	e003      	b.n	8004070 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004068:	4b06      	ldr	r3, [pc, #24]	; (8004084 <HAL_RCC_GetSysClockFreq+0x45c>)
 800406a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800406e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004070:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004074:	4618      	mov	r0, r3
 8004076:	37b8      	adds	r7, #184	; 0xb8
 8004078:	46bd      	mov	sp, r7
 800407a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800407e:	bf00      	nop
 8004080:	40023800 	.word	0x40023800
 8004084:	00f42400 	.word	0x00f42400

08004088 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e28d      	b.n	80045b6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f000 8083 	beq.w	80041ae <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80040a8:	4b94      	ldr	r3, [pc, #592]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f003 030c 	and.w	r3, r3, #12
 80040b0:	2b04      	cmp	r3, #4
 80040b2:	d019      	beq.n	80040e8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80040b4:	4b91      	ldr	r3, [pc, #580]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80040bc:	2b08      	cmp	r3, #8
 80040be:	d106      	bne.n	80040ce <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80040c0:	4b8e      	ldr	r3, [pc, #568]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040cc:	d00c      	beq.n	80040e8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040ce:	4b8b      	ldr	r3, [pc, #556]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80040d6:	2b0c      	cmp	r3, #12
 80040d8:	d112      	bne.n	8004100 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040da:	4b88      	ldr	r3, [pc, #544]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040e6:	d10b      	bne.n	8004100 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040e8:	4b84      	ldr	r3, [pc, #528]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d05b      	beq.n	80041ac <HAL_RCC_OscConfig+0x124>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d157      	bne.n	80041ac <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e25a      	b.n	80045b6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004108:	d106      	bne.n	8004118 <HAL_RCC_OscConfig+0x90>
 800410a:	4b7c      	ldr	r3, [pc, #496]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a7b      	ldr	r2, [pc, #492]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 8004110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004114:	6013      	str	r3, [r2, #0]
 8004116:	e01d      	b.n	8004154 <HAL_RCC_OscConfig+0xcc>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004120:	d10c      	bne.n	800413c <HAL_RCC_OscConfig+0xb4>
 8004122:	4b76      	ldr	r3, [pc, #472]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a75      	ldr	r2, [pc, #468]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 8004128:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800412c:	6013      	str	r3, [r2, #0]
 800412e:	4b73      	ldr	r3, [pc, #460]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a72      	ldr	r2, [pc, #456]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 8004134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004138:	6013      	str	r3, [r2, #0]
 800413a:	e00b      	b.n	8004154 <HAL_RCC_OscConfig+0xcc>
 800413c:	4b6f      	ldr	r3, [pc, #444]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a6e      	ldr	r2, [pc, #440]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 8004142:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004146:	6013      	str	r3, [r2, #0]
 8004148:	4b6c      	ldr	r3, [pc, #432]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a6b      	ldr	r2, [pc, #428]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 800414e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004152:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d013      	beq.n	8004184 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800415c:	f7ff f8a2 	bl	80032a4 <HAL_GetTick>
 8004160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004162:	e008      	b.n	8004176 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004164:	f7ff f89e 	bl	80032a4 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b64      	cmp	r3, #100	; 0x64
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e21f      	b.n	80045b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004176:	4b61      	ldr	r3, [pc, #388]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d0f0      	beq.n	8004164 <HAL_RCC_OscConfig+0xdc>
 8004182:	e014      	b.n	80041ae <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004184:	f7ff f88e 	bl	80032a4 <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800418c:	f7ff f88a 	bl	80032a4 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b64      	cmp	r3, #100	; 0x64
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e20b      	b.n	80045b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800419e:	4b57      	ldr	r3, [pc, #348]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1f0      	bne.n	800418c <HAL_RCC_OscConfig+0x104>
 80041aa:	e000      	b.n	80041ae <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d06f      	beq.n	800429a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80041ba:	4b50      	ldr	r3, [pc, #320]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 030c 	and.w	r3, r3, #12
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d017      	beq.n	80041f6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80041c6:	4b4d      	ldr	r3, [pc, #308]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80041ce:	2b08      	cmp	r3, #8
 80041d0:	d105      	bne.n	80041de <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80041d2:	4b4a      	ldr	r3, [pc, #296]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00b      	beq.n	80041f6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041de:	4b47      	ldr	r3, [pc, #284]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80041e6:	2b0c      	cmp	r3, #12
 80041e8:	d11c      	bne.n	8004224 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041ea:	4b44      	ldr	r3, [pc, #272]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d116      	bne.n	8004224 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041f6:	4b41      	ldr	r3, [pc, #260]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d005      	beq.n	800420e <HAL_RCC_OscConfig+0x186>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d001      	beq.n	800420e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e1d3      	b.n	80045b6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800420e:	4b3b      	ldr	r3, [pc, #236]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	00db      	lsls	r3, r3, #3
 800421c:	4937      	ldr	r1, [pc, #220]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 800421e:	4313      	orrs	r3, r2
 8004220:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004222:	e03a      	b.n	800429a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d020      	beq.n	800426e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800422c:	4b34      	ldr	r3, [pc, #208]	; (8004300 <HAL_RCC_OscConfig+0x278>)
 800422e:	2201      	movs	r2, #1
 8004230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004232:	f7ff f837 	bl	80032a4 <HAL_GetTick>
 8004236:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004238:	e008      	b.n	800424c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800423a:	f7ff f833 	bl	80032a4 <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	2b02      	cmp	r3, #2
 8004246:	d901      	bls.n	800424c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e1b4      	b.n	80045b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800424c:	4b2b      	ldr	r3, [pc, #172]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d0f0      	beq.n	800423a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004258:	4b28      	ldr	r3, [pc, #160]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	00db      	lsls	r3, r3, #3
 8004266:	4925      	ldr	r1, [pc, #148]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 8004268:	4313      	orrs	r3, r2
 800426a:	600b      	str	r3, [r1, #0]
 800426c:	e015      	b.n	800429a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800426e:	4b24      	ldr	r3, [pc, #144]	; (8004300 <HAL_RCC_OscConfig+0x278>)
 8004270:	2200      	movs	r2, #0
 8004272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004274:	f7ff f816 	bl	80032a4 <HAL_GetTick>
 8004278:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800427a:	e008      	b.n	800428e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800427c:	f7ff f812 	bl	80032a4 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e193      	b.n	80045b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800428e:	4b1b      	ldr	r3, [pc, #108]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1f0      	bne.n	800427c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0308 	and.w	r3, r3, #8
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d036      	beq.n	8004314 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d016      	beq.n	80042dc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042ae:	4b15      	ldr	r3, [pc, #84]	; (8004304 <HAL_RCC_OscConfig+0x27c>)
 80042b0:	2201      	movs	r2, #1
 80042b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b4:	f7fe fff6 	bl	80032a4 <HAL_GetTick>
 80042b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ba:	e008      	b.n	80042ce <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042bc:	f7fe fff2 	bl	80032a4 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e173      	b.n	80045b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ce:	4b0b      	ldr	r3, [pc, #44]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 80042d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d0f0      	beq.n	80042bc <HAL_RCC_OscConfig+0x234>
 80042da:	e01b      	b.n	8004314 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042dc:	4b09      	ldr	r3, [pc, #36]	; (8004304 <HAL_RCC_OscConfig+0x27c>)
 80042de:	2200      	movs	r2, #0
 80042e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e2:	f7fe ffdf 	bl	80032a4 <HAL_GetTick>
 80042e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042e8:	e00e      	b.n	8004308 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042ea:	f7fe ffdb 	bl	80032a4 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d907      	bls.n	8004308 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e15c      	b.n	80045b6 <HAL_RCC_OscConfig+0x52e>
 80042fc:	40023800 	.word	0x40023800
 8004300:	42470000 	.word	0x42470000
 8004304:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004308:	4b8a      	ldr	r3, [pc, #552]	; (8004534 <HAL_RCC_OscConfig+0x4ac>)
 800430a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1ea      	bne.n	80042ea <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b00      	cmp	r3, #0
 800431e:	f000 8097 	beq.w	8004450 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004322:	2300      	movs	r3, #0
 8004324:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004326:	4b83      	ldr	r3, [pc, #524]	; (8004534 <HAL_RCC_OscConfig+0x4ac>)
 8004328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10f      	bne.n	8004352 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004332:	2300      	movs	r3, #0
 8004334:	60bb      	str	r3, [r7, #8]
 8004336:	4b7f      	ldr	r3, [pc, #508]	; (8004534 <HAL_RCC_OscConfig+0x4ac>)
 8004338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433a:	4a7e      	ldr	r2, [pc, #504]	; (8004534 <HAL_RCC_OscConfig+0x4ac>)
 800433c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004340:	6413      	str	r3, [r2, #64]	; 0x40
 8004342:	4b7c      	ldr	r3, [pc, #496]	; (8004534 <HAL_RCC_OscConfig+0x4ac>)
 8004344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800434a:	60bb      	str	r3, [r7, #8]
 800434c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800434e:	2301      	movs	r3, #1
 8004350:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004352:	4b79      	ldr	r3, [pc, #484]	; (8004538 <HAL_RCC_OscConfig+0x4b0>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800435a:	2b00      	cmp	r3, #0
 800435c:	d118      	bne.n	8004390 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800435e:	4b76      	ldr	r3, [pc, #472]	; (8004538 <HAL_RCC_OscConfig+0x4b0>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a75      	ldr	r2, [pc, #468]	; (8004538 <HAL_RCC_OscConfig+0x4b0>)
 8004364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004368:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800436a:	f7fe ff9b 	bl	80032a4 <HAL_GetTick>
 800436e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004370:	e008      	b.n	8004384 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004372:	f7fe ff97 	bl	80032a4 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	2b02      	cmp	r3, #2
 800437e:	d901      	bls.n	8004384 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e118      	b.n	80045b6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004384:	4b6c      	ldr	r3, [pc, #432]	; (8004538 <HAL_RCC_OscConfig+0x4b0>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800438c:	2b00      	cmp	r3, #0
 800438e:	d0f0      	beq.n	8004372 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d106      	bne.n	80043a6 <HAL_RCC_OscConfig+0x31e>
 8004398:	4b66      	ldr	r3, [pc, #408]	; (8004534 <HAL_RCC_OscConfig+0x4ac>)
 800439a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439c:	4a65      	ldr	r2, [pc, #404]	; (8004534 <HAL_RCC_OscConfig+0x4ac>)
 800439e:	f043 0301 	orr.w	r3, r3, #1
 80043a2:	6713      	str	r3, [r2, #112]	; 0x70
 80043a4:	e01c      	b.n	80043e0 <HAL_RCC_OscConfig+0x358>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	2b05      	cmp	r3, #5
 80043ac:	d10c      	bne.n	80043c8 <HAL_RCC_OscConfig+0x340>
 80043ae:	4b61      	ldr	r3, [pc, #388]	; (8004534 <HAL_RCC_OscConfig+0x4ac>)
 80043b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b2:	4a60      	ldr	r2, [pc, #384]	; (8004534 <HAL_RCC_OscConfig+0x4ac>)
 80043b4:	f043 0304 	orr.w	r3, r3, #4
 80043b8:	6713      	str	r3, [r2, #112]	; 0x70
 80043ba:	4b5e      	ldr	r3, [pc, #376]	; (8004534 <HAL_RCC_OscConfig+0x4ac>)
 80043bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043be:	4a5d      	ldr	r2, [pc, #372]	; (8004534 <HAL_RCC_OscConfig+0x4ac>)
 80043c0:	f043 0301 	orr.w	r3, r3, #1
 80043c4:	6713      	str	r3, [r2, #112]	; 0x70
 80043c6:	e00b      	b.n	80043e0 <HAL_RCC_OscConfig+0x358>
 80043c8:	4b5a      	ldr	r3, [pc, #360]	; (8004534 <HAL_RCC_OscConfig+0x4ac>)
 80043ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043cc:	4a59      	ldr	r2, [pc, #356]	; (8004534 <HAL_RCC_OscConfig+0x4ac>)
 80043ce:	f023 0301 	bic.w	r3, r3, #1
 80043d2:	6713      	str	r3, [r2, #112]	; 0x70
 80043d4:	4b57      	ldr	r3, [pc, #348]	; (8004534 <HAL_RCC_OscConfig+0x4ac>)
 80043d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d8:	4a56      	ldr	r2, [pc, #344]	; (8004534 <HAL_RCC_OscConfig+0x4ac>)
 80043da:	f023 0304 	bic.w	r3, r3, #4
 80043de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d015      	beq.n	8004414 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e8:	f7fe ff5c 	bl	80032a4 <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ee:	e00a      	b.n	8004406 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043f0:	f7fe ff58 	bl	80032a4 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80043fe:	4293      	cmp	r3, r2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e0d7      	b.n	80045b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004406:	4b4b      	ldr	r3, [pc, #300]	; (8004534 <HAL_RCC_OscConfig+0x4ac>)
 8004408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d0ee      	beq.n	80043f0 <HAL_RCC_OscConfig+0x368>
 8004412:	e014      	b.n	800443e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004414:	f7fe ff46 	bl	80032a4 <HAL_GetTick>
 8004418:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800441a:	e00a      	b.n	8004432 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800441c:	f7fe ff42 	bl	80032a4 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	f241 3288 	movw	r2, #5000	; 0x1388
 800442a:	4293      	cmp	r3, r2
 800442c:	d901      	bls.n	8004432 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e0c1      	b.n	80045b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004432:	4b40      	ldr	r3, [pc, #256]	; (8004534 <HAL_RCC_OscConfig+0x4ac>)
 8004434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1ee      	bne.n	800441c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800443e:	7dfb      	ldrb	r3, [r7, #23]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d105      	bne.n	8004450 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004444:	4b3b      	ldr	r3, [pc, #236]	; (8004534 <HAL_RCC_OscConfig+0x4ac>)
 8004446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004448:	4a3a      	ldr	r2, [pc, #232]	; (8004534 <HAL_RCC_OscConfig+0x4ac>)
 800444a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800444e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	2b00      	cmp	r3, #0
 8004456:	f000 80ad 	beq.w	80045b4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800445a:	4b36      	ldr	r3, [pc, #216]	; (8004534 <HAL_RCC_OscConfig+0x4ac>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f003 030c 	and.w	r3, r3, #12
 8004462:	2b08      	cmp	r3, #8
 8004464:	d060      	beq.n	8004528 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	2b02      	cmp	r3, #2
 800446c:	d145      	bne.n	80044fa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800446e:	4b33      	ldr	r3, [pc, #204]	; (800453c <HAL_RCC_OscConfig+0x4b4>)
 8004470:	2200      	movs	r2, #0
 8004472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004474:	f7fe ff16 	bl	80032a4 <HAL_GetTick>
 8004478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800447a:	e008      	b.n	800448e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800447c:	f7fe ff12 	bl	80032a4 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b02      	cmp	r3, #2
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e093      	b.n	80045b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800448e:	4b29      	ldr	r3, [pc, #164]	; (8004534 <HAL_RCC_OscConfig+0x4ac>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1f0      	bne.n	800447c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	69da      	ldr	r2, [r3, #28]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	431a      	orrs	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	019b      	lsls	r3, r3, #6
 80044aa:	431a      	orrs	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b0:	085b      	lsrs	r3, r3, #1
 80044b2:	3b01      	subs	r3, #1
 80044b4:	041b      	lsls	r3, r3, #16
 80044b6:	431a      	orrs	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044bc:	061b      	lsls	r3, r3, #24
 80044be:	431a      	orrs	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c4:	071b      	lsls	r3, r3, #28
 80044c6:	491b      	ldr	r1, [pc, #108]	; (8004534 <HAL_RCC_OscConfig+0x4ac>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044cc:	4b1b      	ldr	r3, [pc, #108]	; (800453c <HAL_RCC_OscConfig+0x4b4>)
 80044ce:	2201      	movs	r2, #1
 80044d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d2:	f7fe fee7 	bl	80032a4 <HAL_GetTick>
 80044d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044d8:	e008      	b.n	80044ec <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044da:	f7fe fee3 	bl	80032a4 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d901      	bls.n	80044ec <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e064      	b.n	80045b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ec:	4b11      	ldr	r3, [pc, #68]	; (8004534 <HAL_RCC_OscConfig+0x4ac>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d0f0      	beq.n	80044da <HAL_RCC_OscConfig+0x452>
 80044f8:	e05c      	b.n	80045b4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044fa:	4b10      	ldr	r3, [pc, #64]	; (800453c <HAL_RCC_OscConfig+0x4b4>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004500:	f7fe fed0 	bl	80032a4 <HAL_GetTick>
 8004504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004506:	e008      	b.n	800451a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004508:	f7fe fecc 	bl	80032a4 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e04d      	b.n	80045b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800451a:	4b06      	ldr	r3, [pc, #24]	; (8004534 <HAL_RCC_OscConfig+0x4ac>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1f0      	bne.n	8004508 <HAL_RCC_OscConfig+0x480>
 8004526:	e045      	b.n	80045b4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d107      	bne.n	8004540 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e040      	b.n	80045b6 <HAL_RCC_OscConfig+0x52e>
 8004534:	40023800 	.word	0x40023800
 8004538:	40007000 	.word	0x40007000
 800453c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004540:	4b1f      	ldr	r3, [pc, #124]	; (80045c0 <HAL_RCC_OscConfig+0x538>)
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d030      	beq.n	80045b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004558:	429a      	cmp	r2, r3
 800455a:	d129      	bne.n	80045b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004566:	429a      	cmp	r2, r3
 8004568:	d122      	bne.n	80045b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004570:	4013      	ands	r3, r2
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004576:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004578:	4293      	cmp	r3, r2
 800457a:	d119      	bne.n	80045b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004586:	085b      	lsrs	r3, r3, #1
 8004588:	3b01      	subs	r3, #1
 800458a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800458c:	429a      	cmp	r2, r3
 800458e:	d10f      	bne.n	80045b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800459c:	429a      	cmp	r2, r3
 800459e:	d107      	bne.n	80045b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045aa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d001      	beq.n	80045b4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e000      	b.n	80045b6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3718      	adds	r7, #24
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	40023800 	.word	0x40023800

080045c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e07b      	b.n	80046ce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d108      	bne.n	80045f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045e6:	d009      	beq.n	80045fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	61da      	str	r2, [r3, #28]
 80045ee:	e005      	b.n	80045fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d106      	bne.n	800461c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f7fe fb60 	bl	8002cdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004632:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004644:	431a      	orrs	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800464e:	431a      	orrs	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	431a      	orrs	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	431a      	orrs	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800466c:	431a      	orrs	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	69db      	ldr	r3, [r3, #28]
 8004672:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004680:	ea42 0103 	orr.w	r1, r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004688:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	430a      	orrs	r2, r1
 8004692:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	0c1b      	lsrs	r3, r3, #16
 800469a:	f003 0104 	and.w	r1, r3, #4
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a2:	f003 0210 	and.w	r2, r3, #16
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	69da      	ldr	r2, [r3, #28]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3708      	adds	r7, #8
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b088      	sub	sp, #32
 80046da:	af00      	add	r7, sp, #0
 80046dc:	60f8      	str	r0, [r7, #12]
 80046de:	60b9      	str	r1, [r7, #8]
 80046e0:	603b      	str	r3, [r7, #0]
 80046e2:	4613      	mov	r3, r2
 80046e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80046e6:	2300      	movs	r3, #0
 80046e8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d101      	bne.n	80046f8 <HAL_SPI_Transmit+0x22>
 80046f4:	2302      	movs	r3, #2
 80046f6:	e126      	b.n	8004946 <HAL_SPI_Transmit+0x270>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004700:	f7fe fdd0 	bl	80032a4 <HAL_GetTick>
 8004704:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004706:	88fb      	ldrh	r3, [r7, #6]
 8004708:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b01      	cmp	r3, #1
 8004714:	d002      	beq.n	800471c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004716:	2302      	movs	r3, #2
 8004718:	77fb      	strb	r3, [r7, #31]
    goto error;
 800471a:	e10b      	b.n	8004934 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d002      	beq.n	8004728 <HAL_SPI_Transmit+0x52>
 8004722:	88fb      	ldrh	r3, [r7, #6]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d102      	bne.n	800472e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800472c:	e102      	b.n	8004934 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2203      	movs	r2, #3
 8004732:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	88fa      	ldrh	r2, [r7, #6]
 8004746:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	88fa      	ldrh	r2, [r7, #6]
 800474c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004774:	d10f      	bne.n	8004796 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004784:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004794:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a0:	2b40      	cmp	r3, #64	; 0x40
 80047a2:	d007      	beq.n	80047b4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047bc:	d14b      	bne.n	8004856 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d002      	beq.n	80047cc <HAL_SPI_Transmit+0xf6>
 80047c6:	8afb      	ldrh	r3, [r7, #22]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d13e      	bne.n	800484a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d0:	881a      	ldrh	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047dc:	1c9a      	adds	r2, r3, #2
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	3b01      	subs	r3, #1
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80047f0:	e02b      	b.n	800484a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f003 0302 	and.w	r3, r3, #2
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d112      	bne.n	8004826 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004804:	881a      	ldrh	r2, [r3, #0]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004810:	1c9a      	adds	r2, r3, #2
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800481a:	b29b      	uxth	r3, r3
 800481c:	3b01      	subs	r3, #1
 800481e:	b29a      	uxth	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	86da      	strh	r2, [r3, #54]	; 0x36
 8004824:	e011      	b.n	800484a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004826:	f7fe fd3d 	bl	80032a4 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	683a      	ldr	r2, [r7, #0]
 8004832:	429a      	cmp	r2, r3
 8004834:	d803      	bhi.n	800483e <HAL_SPI_Transmit+0x168>
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483c:	d102      	bne.n	8004844 <HAL_SPI_Transmit+0x16e>
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d102      	bne.n	800484a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004848:	e074      	b.n	8004934 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800484e:	b29b      	uxth	r3, r3
 8004850:	2b00      	cmp	r3, #0
 8004852:	d1ce      	bne.n	80047f2 <HAL_SPI_Transmit+0x11c>
 8004854:	e04c      	b.n	80048f0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d002      	beq.n	8004864 <HAL_SPI_Transmit+0x18e>
 800485e:	8afb      	ldrh	r3, [r7, #22]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d140      	bne.n	80048e6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	330c      	adds	r3, #12
 800486e:	7812      	ldrb	r2, [r2, #0]
 8004870:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004876:	1c5a      	adds	r2, r3, #1
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004880:	b29b      	uxth	r3, r3
 8004882:	3b01      	subs	r3, #1
 8004884:	b29a      	uxth	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800488a:	e02c      	b.n	80048e6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b02      	cmp	r3, #2
 8004898:	d113      	bne.n	80048c2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	330c      	adds	r3, #12
 80048a4:	7812      	ldrb	r2, [r2, #0]
 80048a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ac:	1c5a      	adds	r2, r3, #1
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	3b01      	subs	r3, #1
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	86da      	strh	r2, [r3, #54]	; 0x36
 80048c0:	e011      	b.n	80048e6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048c2:	f7fe fcef 	bl	80032a4 <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d803      	bhi.n	80048da <HAL_SPI_Transmit+0x204>
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d8:	d102      	bne.n	80048e0 <HAL_SPI_Transmit+0x20a>
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d102      	bne.n	80048e6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80048e4:	e026      	b.n	8004934 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1cd      	bne.n	800488c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	6839      	ldr	r1, [r7, #0]
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f000 f8b3 	bl	8004a60 <SPI_EndRxTxTransaction>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d002      	beq.n	8004906 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2220      	movs	r2, #32
 8004904:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10a      	bne.n	8004924 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800490e:	2300      	movs	r3, #0
 8004910:	613b      	str	r3, [r7, #16]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	613b      	str	r3, [r7, #16]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	613b      	str	r3, [r7, #16]
 8004922:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004928:	2b00      	cmp	r3, #0
 800492a:	d002      	beq.n	8004932 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	77fb      	strb	r3, [r7, #31]
 8004930:	e000      	b.n	8004934 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004932:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004944:	7ffb      	ldrb	r3, [r7, #31]
}
 8004946:	4618      	mov	r0, r3
 8004948:	3720      	adds	r7, #32
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
	...

08004950 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b088      	sub	sp, #32
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	603b      	str	r3, [r7, #0]
 800495c:	4613      	mov	r3, r2
 800495e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004960:	f7fe fca0 	bl	80032a4 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004968:	1a9b      	subs	r3, r3, r2
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	4413      	add	r3, r2
 800496e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004970:	f7fe fc98 	bl	80032a4 <HAL_GetTick>
 8004974:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004976:	4b39      	ldr	r3, [pc, #228]	; (8004a5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	015b      	lsls	r3, r3, #5
 800497c:	0d1b      	lsrs	r3, r3, #20
 800497e:	69fa      	ldr	r2, [r7, #28]
 8004980:	fb02 f303 	mul.w	r3, r2, r3
 8004984:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004986:	e054      	b.n	8004a32 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498e:	d050      	beq.n	8004a32 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004990:	f7fe fc88 	bl	80032a4 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	69fa      	ldr	r2, [r7, #28]
 800499c:	429a      	cmp	r2, r3
 800499e:	d902      	bls.n	80049a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d13d      	bne.n	8004a22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	685a      	ldr	r2, [r3, #4]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80049b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049be:	d111      	bne.n	80049e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049c8:	d004      	beq.n	80049d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049d2:	d107      	bne.n	80049e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049ec:	d10f      	bne.n	8004a0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049fc:	601a      	str	r2, [r3, #0]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e017      	b.n	8004a52 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d101      	bne.n	8004a2c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	689a      	ldr	r2, [r3, #8]
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	68ba      	ldr	r2, [r7, #8]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	bf0c      	ite	eq
 8004a42:	2301      	moveq	r3, #1
 8004a44:	2300      	movne	r3, #0
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	461a      	mov	r2, r3
 8004a4a:	79fb      	ldrb	r3, [r7, #7]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d19b      	bne.n	8004988 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3720      	adds	r7, #32
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	20000054 	.word	0x20000054

08004a60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b088      	sub	sp, #32
 8004a64:	af02      	add	r7, sp, #8
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004a6c:	4b1b      	ldr	r3, [pc, #108]	; (8004adc <SPI_EndRxTxTransaction+0x7c>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a1b      	ldr	r2, [pc, #108]	; (8004ae0 <SPI_EndRxTxTransaction+0x80>)
 8004a72:	fba2 2303 	umull	r2, r3, r2, r3
 8004a76:	0d5b      	lsrs	r3, r3, #21
 8004a78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a7c:	fb02 f303 	mul.w	r3, r2, r3
 8004a80:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a8a:	d112      	bne.n	8004ab2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	9300      	str	r3, [sp, #0]
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	2200      	movs	r2, #0
 8004a94:	2180      	movs	r1, #128	; 0x80
 8004a96:	68f8      	ldr	r0, [r7, #12]
 8004a98:	f7ff ff5a 	bl	8004950 <SPI_WaitFlagStateUntilTimeout>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d016      	beq.n	8004ad0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa6:	f043 0220 	orr.w	r2, r3, #32
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e00f      	b.n	8004ad2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00a      	beq.n	8004ace <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	3b01      	subs	r3, #1
 8004abc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ac8:	2b80      	cmp	r3, #128	; 0x80
 8004aca:	d0f2      	beq.n	8004ab2 <SPI_EndRxTxTransaction+0x52>
 8004acc:	e000      	b.n	8004ad0 <SPI_EndRxTxTransaction+0x70>
        break;
 8004ace:	bf00      	nop
  }

  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3718      	adds	r7, #24
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	20000054 	.word	0x20000054
 8004ae0:	165e9f81 	.word	0x165e9f81

08004ae4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e041      	b.n	8004b7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d106      	bne.n	8004b10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f7fe f97c 	bl	8002e08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2202      	movs	r2, #2
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	3304      	adds	r3, #4
 8004b20:	4619      	mov	r1, r3
 8004b22:	4610      	mov	r0, r2
 8004b24:	f000 fb04 	bl	8005130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3708      	adds	r7, #8
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
	...

08004b84 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d001      	beq.n	8004b9c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e046      	b.n	8004c2a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2202      	movs	r2, #2
 8004ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a23      	ldr	r2, [pc, #140]	; (8004c38 <HAL_TIM_Base_Start+0xb4>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d022      	beq.n	8004bf4 <HAL_TIM_Base_Start+0x70>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bb6:	d01d      	beq.n	8004bf4 <HAL_TIM_Base_Start+0x70>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a1f      	ldr	r2, [pc, #124]	; (8004c3c <HAL_TIM_Base_Start+0xb8>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d018      	beq.n	8004bf4 <HAL_TIM_Base_Start+0x70>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a1e      	ldr	r2, [pc, #120]	; (8004c40 <HAL_TIM_Base_Start+0xbc>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d013      	beq.n	8004bf4 <HAL_TIM_Base_Start+0x70>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a1c      	ldr	r2, [pc, #112]	; (8004c44 <HAL_TIM_Base_Start+0xc0>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d00e      	beq.n	8004bf4 <HAL_TIM_Base_Start+0x70>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a1b      	ldr	r2, [pc, #108]	; (8004c48 <HAL_TIM_Base_Start+0xc4>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d009      	beq.n	8004bf4 <HAL_TIM_Base_Start+0x70>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a19      	ldr	r2, [pc, #100]	; (8004c4c <HAL_TIM_Base_Start+0xc8>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d004      	beq.n	8004bf4 <HAL_TIM_Base_Start+0x70>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a18      	ldr	r2, [pc, #96]	; (8004c50 <HAL_TIM_Base_Start+0xcc>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d111      	bne.n	8004c18 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f003 0307 	and.w	r3, r3, #7
 8004bfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2b06      	cmp	r3, #6
 8004c04:	d010      	beq.n	8004c28 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f042 0201 	orr.w	r2, r2, #1
 8004c14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c16:	e007      	b.n	8004c28 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f042 0201 	orr.w	r2, r2, #1
 8004c26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3714      	adds	r7, #20
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	40010000 	.word	0x40010000
 8004c3c:	40000400 	.word	0x40000400
 8004c40:	40000800 	.word	0x40000800
 8004c44:	40000c00 	.word	0x40000c00
 8004c48:	40010400 	.word	0x40010400
 8004c4c:	40014000 	.word	0x40014000
 8004c50:	40001800 	.word	0x40001800

08004c54 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d101      	bne.n	8004c68 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e097      	b.n	8004d98 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d106      	bne.n	8004c82 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f7fe f875 	bl	8002d6c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2202      	movs	r2, #2
 8004c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	6812      	ldr	r2, [r2, #0]
 8004c94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c98:	f023 0307 	bic.w	r3, r3, #7
 8004c9c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	3304      	adds	r3, #4
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	4610      	mov	r0, r2
 8004caa:	f000 fa41 	bl	8005130 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	6a1b      	ldr	r3, [r3, #32]
 8004cc4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cd6:	f023 0303 	bic.w	r3, r3, #3
 8004cda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	689a      	ldr	r2, [r3, #8]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	021b      	lsls	r3, r3, #8
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004cf4:	f023 030c 	bic.w	r3, r3, #12
 8004cf8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	68da      	ldr	r2, [r3, #12]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	69db      	ldr	r3, [r3, #28]
 8004d0e:	021b      	lsls	r3, r3, #8
 8004d10:	4313      	orrs	r3, r2
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	011a      	lsls	r2, r3, #4
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	031b      	lsls	r3, r3, #12
 8004d24:	4313      	orrs	r3, r2
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004d32:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004d3a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	685a      	ldr	r2, [r3, #4]
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	695b      	ldr	r3, [r3, #20]
 8004d44:	011b      	lsls	r3, r3, #4
 8004d46:	4313      	orrs	r3, r2
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3718      	adds	r7, #24
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004db0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004db8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004dc0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004dc8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d110      	bne.n	8004df2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004dd0:	7bfb      	ldrb	r3, [r7, #15]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d102      	bne.n	8004ddc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004dd6:	7b7b      	ldrb	r3, [r7, #13]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d001      	beq.n	8004de0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e069      	b.n	8004eb4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2202      	movs	r2, #2
 8004de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2202      	movs	r2, #2
 8004dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004df0:	e031      	b.n	8004e56 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	2b04      	cmp	r3, #4
 8004df6:	d110      	bne.n	8004e1a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004df8:	7bbb      	ldrb	r3, [r7, #14]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d102      	bne.n	8004e04 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004dfe:	7b3b      	ldrb	r3, [r7, #12]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d001      	beq.n	8004e08 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e055      	b.n	8004eb4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2202      	movs	r2, #2
 8004e14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e18:	e01d      	b.n	8004e56 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e1a:	7bfb      	ldrb	r3, [r7, #15]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d108      	bne.n	8004e32 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e20:	7bbb      	ldrb	r3, [r7, #14]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d105      	bne.n	8004e32 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e26:	7b7b      	ldrb	r3, [r7, #13]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d102      	bne.n	8004e32 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e2c:	7b3b      	ldrb	r3, [r7, #12]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d001      	beq.n	8004e36 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e03e      	b.n	8004eb4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2202      	movs	r2, #2
 8004e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2202      	movs	r2, #2
 8004e42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2202      	movs	r2, #2
 8004e4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2202      	movs	r2, #2
 8004e52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d003      	beq.n	8004e64 <HAL_TIM_Encoder_Start+0xc4>
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	2b04      	cmp	r3, #4
 8004e60:	d008      	beq.n	8004e74 <HAL_TIM_Encoder_Start+0xd4>
 8004e62:	e00f      	b.n	8004e84 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	2100      	movs	r1, #0
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f000 f9ff 	bl	8005270 <TIM_CCxChannelCmd>
      break;
 8004e72:	e016      	b.n	8004ea2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	2104      	movs	r1, #4
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f000 f9f7 	bl	8005270 <TIM_CCxChannelCmd>
      break;
 8004e82:	e00e      	b.n	8004ea2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	2100      	movs	r1, #0
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f000 f9ef 	bl	8005270 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2201      	movs	r2, #1
 8004e98:	2104      	movs	r1, #4
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f000 f9e8 	bl	8005270 <TIM_CCxChannelCmd>
      break;
 8004ea0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f042 0201 	orr.w	r2, r2, #1
 8004eb0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	f003 0302 	and.w	r3, r3, #2
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d122      	bne.n	8004f18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	f003 0302 	and.w	r3, r3, #2
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d11b      	bne.n	8004f18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f06f 0202 	mvn.w	r2, #2
 8004ee8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2201      	movs	r2, #1
 8004eee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	f003 0303 	and.w	r3, r3, #3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d003      	beq.n	8004f06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 f8f8 	bl	80050f4 <HAL_TIM_IC_CaptureCallback>
 8004f04:	e005      	b.n	8004f12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 f8ea 	bl	80050e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 f8fb 	bl	8005108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	f003 0304 	and.w	r3, r3, #4
 8004f22:	2b04      	cmp	r3, #4
 8004f24:	d122      	bne.n	8004f6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	f003 0304 	and.w	r3, r3, #4
 8004f30:	2b04      	cmp	r3, #4
 8004f32:	d11b      	bne.n	8004f6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f06f 0204 	mvn.w	r2, #4
 8004f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2202      	movs	r2, #2
 8004f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f8ce 	bl	80050f4 <HAL_TIM_IC_CaptureCallback>
 8004f58:	e005      	b.n	8004f66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 f8c0 	bl	80050e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f000 f8d1 	bl	8005108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	f003 0308 	and.w	r3, r3, #8
 8004f76:	2b08      	cmp	r3, #8
 8004f78:	d122      	bne.n	8004fc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	f003 0308 	and.w	r3, r3, #8
 8004f84:	2b08      	cmp	r3, #8
 8004f86:	d11b      	bne.n	8004fc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f06f 0208 	mvn.w	r2, #8
 8004f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2204      	movs	r2, #4
 8004f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	69db      	ldr	r3, [r3, #28]
 8004f9e:	f003 0303 	and.w	r3, r3, #3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d003      	beq.n	8004fae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f8a4 	bl	80050f4 <HAL_TIM_IC_CaptureCallback>
 8004fac:	e005      	b.n	8004fba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 f896 	bl	80050e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 f8a7 	bl	8005108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	f003 0310 	and.w	r3, r3, #16
 8004fca:	2b10      	cmp	r3, #16
 8004fcc:	d122      	bne.n	8005014 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	f003 0310 	and.w	r3, r3, #16
 8004fd8:	2b10      	cmp	r3, #16
 8004fda:	d11b      	bne.n	8005014 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f06f 0210 	mvn.w	r2, #16
 8004fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2208      	movs	r2, #8
 8004fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	69db      	ldr	r3, [r3, #28]
 8004ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d003      	beq.n	8005002 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 f87a 	bl	80050f4 <HAL_TIM_IC_CaptureCallback>
 8005000:	e005      	b.n	800500e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 f86c 	bl	80050e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 f87d 	bl	8005108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b01      	cmp	r3, #1
 8005020:	d10e      	bne.n	8005040 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	f003 0301 	and.w	r3, r3, #1
 800502c:	2b01      	cmp	r3, #1
 800502e:	d107      	bne.n	8005040 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f06f 0201 	mvn.w	r2, #1
 8005038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f846 	bl	80050cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800504a:	2b80      	cmp	r3, #128	; 0x80
 800504c:	d10e      	bne.n	800506c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005058:	2b80      	cmp	r3, #128	; 0x80
 800505a:	d107      	bne.n	800506c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f9ae 	bl	80053c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005076:	2b40      	cmp	r3, #64	; 0x40
 8005078:	d10e      	bne.n	8005098 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005084:	2b40      	cmp	r3, #64	; 0x40
 8005086:	d107      	bne.n	8005098 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 f842 	bl	800511c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	f003 0320 	and.w	r3, r3, #32
 80050a2:	2b20      	cmp	r3, #32
 80050a4:	d10e      	bne.n	80050c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	f003 0320 	and.w	r3, r3, #32
 80050b0:	2b20      	cmp	r3, #32
 80050b2:	d107      	bne.n	80050c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f06f 0220 	mvn.w	r2, #32
 80050bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 f978 	bl	80053b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050c4:	bf00      	nop
 80050c6:	3708      	adds	r7, #8
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a40      	ldr	r2, [pc, #256]	; (8005244 <TIM_Base_SetConfig+0x114>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d013      	beq.n	8005170 <TIM_Base_SetConfig+0x40>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800514e:	d00f      	beq.n	8005170 <TIM_Base_SetConfig+0x40>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a3d      	ldr	r2, [pc, #244]	; (8005248 <TIM_Base_SetConfig+0x118>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d00b      	beq.n	8005170 <TIM_Base_SetConfig+0x40>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a3c      	ldr	r2, [pc, #240]	; (800524c <TIM_Base_SetConfig+0x11c>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d007      	beq.n	8005170 <TIM_Base_SetConfig+0x40>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a3b      	ldr	r2, [pc, #236]	; (8005250 <TIM_Base_SetConfig+0x120>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d003      	beq.n	8005170 <TIM_Base_SetConfig+0x40>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a3a      	ldr	r2, [pc, #232]	; (8005254 <TIM_Base_SetConfig+0x124>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d108      	bne.n	8005182 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005176:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	4313      	orrs	r3, r2
 8005180:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a2f      	ldr	r2, [pc, #188]	; (8005244 <TIM_Base_SetConfig+0x114>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d02b      	beq.n	80051e2 <TIM_Base_SetConfig+0xb2>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005190:	d027      	beq.n	80051e2 <TIM_Base_SetConfig+0xb2>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a2c      	ldr	r2, [pc, #176]	; (8005248 <TIM_Base_SetConfig+0x118>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d023      	beq.n	80051e2 <TIM_Base_SetConfig+0xb2>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a2b      	ldr	r2, [pc, #172]	; (800524c <TIM_Base_SetConfig+0x11c>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d01f      	beq.n	80051e2 <TIM_Base_SetConfig+0xb2>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a2a      	ldr	r2, [pc, #168]	; (8005250 <TIM_Base_SetConfig+0x120>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d01b      	beq.n	80051e2 <TIM_Base_SetConfig+0xb2>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a29      	ldr	r2, [pc, #164]	; (8005254 <TIM_Base_SetConfig+0x124>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d017      	beq.n	80051e2 <TIM_Base_SetConfig+0xb2>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a28      	ldr	r2, [pc, #160]	; (8005258 <TIM_Base_SetConfig+0x128>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d013      	beq.n	80051e2 <TIM_Base_SetConfig+0xb2>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a27      	ldr	r2, [pc, #156]	; (800525c <TIM_Base_SetConfig+0x12c>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d00f      	beq.n	80051e2 <TIM_Base_SetConfig+0xb2>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a26      	ldr	r2, [pc, #152]	; (8005260 <TIM_Base_SetConfig+0x130>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d00b      	beq.n	80051e2 <TIM_Base_SetConfig+0xb2>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a25      	ldr	r2, [pc, #148]	; (8005264 <TIM_Base_SetConfig+0x134>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d007      	beq.n	80051e2 <TIM_Base_SetConfig+0xb2>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a24      	ldr	r2, [pc, #144]	; (8005268 <TIM_Base_SetConfig+0x138>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d003      	beq.n	80051e2 <TIM_Base_SetConfig+0xb2>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a23      	ldr	r2, [pc, #140]	; (800526c <TIM_Base_SetConfig+0x13c>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d108      	bne.n	80051f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	4313      	orrs	r3, r2
 8005200:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	689a      	ldr	r2, [r3, #8]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a0a      	ldr	r2, [pc, #40]	; (8005244 <TIM_Base_SetConfig+0x114>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d003      	beq.n	8005228 <TIM_Base_SetConfig+0xf8>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a0c      	ldr	r2, [pc, #48]	; (8005254 <TIM_Base_SetConfig+0x124>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d103      	bne.n	8005230 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	691a      	ldr	r2, [r3, #16]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	615a      	str	r2, [r3, #20]
}
 8005236:	bf00      	nop
 8005238:	3714      	adds	r7, #20
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	40010000 	.word	0x40010000
 8005248:	40000400 	.word	0x40000400
 800524c:	40000800 	.word	0x40000800
 8005250:	40000c00 	.word	0x40000c00
 8005254:	40010400 	.word	0x40010400
 8005258:	40014000 	.word	0x40014000
 800525c:	40014400 	.word	0x40014400
 8005260:	40014800 	.word	0x40014800
 8005264:	40001800 	.word	0x40001800
 8005268:	40001c00 	.word	0x40001c00
 800526c:	40002000 	.word	0x40002000

08005270 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005270:	b480      	push	{r7}
 8005272:	b087      	sub	sp, #28
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	f003 031f 	and.w	r3, r3, #31
 8005282:	2201      	movs	r2, #1
 8005284:	fa02 f303 	lsl.w	r3, r2, r3
 8005288:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6a1a      	ldr	r2, [r3, #32]
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	43db      	mvns	r3, r3
 8005292:	401a      	ands	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6a1a      	ldr	r2, [r3, #32]
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	f003 031f 	and.w	r3, r3, #31
 80052a2:	6879      	ldr	r1, [r7, #4]
 80052a4:	fa01 f303 	lsl.w	r3, r1, r3
 80052a8:	431a      	orrs	r2, r3
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	621a      	str	r2, [r3, #32]
}
 80052ae:	bf00      	nop
 80052b0:	371c      	adds	r7, #28
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
	...

080052bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d101      	bne.n	80052d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052d0:	2302      	movs	r3, #2
 80052d2:	e05a      	b.n	800538a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2202      	movs	r2, #2
 80052e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	4313      	orrs	r3, r2
 8005304:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a21      	ldr	r2, [pc, #132]	; (8005398 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d022      	beq.n	800535e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005320:	d01d      	beq.n	800535e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a1d      	ldr	r2, [pc, #116]	; (800539c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d018      	beq.n	800535e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a1b      	ldr	r2, [pc, #108]	; (80053a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d013      	beq.n	800535e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a1a      	ldr	r2, [pc, #104]	; (80053a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d00e      	beq.n	800535e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a18      	ldr	r2, [pc, #96]	; (80053a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d009      	beq.n	800535e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a17      	ldr	r2, [pc, #92]	; (80053ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d004      	beq.n	800535e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a15      	ldr	r2, [pc, #84]	; (80053b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d10c      	bne.n	8005378 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005364:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	4313      	orrs	r3, r2
 800536e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3714      	adds	r7, #20
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	40010000 	.word	0x40010000
 800539c:	40000400 	.word	0x40000400
 80053a0:	40000800 	.word	0x40000800
 80053a4:	40000c00 	.word	0x40000c00
 80053a8:	40010400 	.word	0x40010400
 80053ac:	40014000 	.word	0x40014000
 80053b0:	40001800 	.word	0x40001800

080053b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053bc:	bf00      	nop
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d101      	bne.n	80053ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e03f      	b.n	800546e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d106      	bne.n	8005408 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f7fd fd38 	bl	8002e78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2224      	movs	r2, #36	; 0x24
 800540c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68da      	ldr	r2, [r3, #12]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800541e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 fddf 	bl	8005fe4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	691a      	ldr	r2, [r3, #16]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005434:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	695a      	ldr	r2, [r3, #20]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005444:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68da      	ldr	r2, [r3, #12]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005454:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2220      	movs	r2, #32
 8005460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2220      	movs	r2, #32
 8005468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3708      	adds	r7, #8
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}

08005476 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005476:	b580      	push	{r7, lr}
 8005478:	b08a      	sub	sp, #40	; 0x28
 800547a:	af02      	add	r7, sp, #8
 800547c:	60f8      	str	r0, [r7, #12]
 800547e:	60b9      	str	r1, [r7, #8]
 8005480:	603b      	str	r3, [r7, #0]
 8005482:	4613      	mov	r3, r2
 8005484:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005486:	2300      	movs	r3, #0
 8005488:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005490:	b2db      	uxtb	r3, r3
 8005492:	2b20      	cmp	r3, #32
 8005494:	d17c      	bne.n	8005590 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d002      	beq.n	80054a2 <HAL_UART_Transmit+0x2c>
 800549c:	88fb      	ldrh	r3, [r7, #6]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d101      	bne.n	80054a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e075      	b.n	8005592 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d101      	bne.n	80054b4 <HAL_UART_Transmit+0x3e>
 80054b0:	2302      	movs	r3, #2
 80054b2:	e06e      	b.n	8005592 <HAL_UART_Transmit+0x11c>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2221      	movs	r2, #33	; 0x21
 80054c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054ca:	f7fd feeb 	bl	80032a4 <HAL_GetTick>
 80054ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	88fa      	ldrh	r2, [r7, #6]
 80054d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	88fa      	ldrh	r2, [r7, #6]
 80054da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054e4:	d108      	bne.n	80054f8 <HAL_UART_Transmit+0x82>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d104      	bne.n	80054f8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80054ee:	2300      	movs	r3, #0
 80054f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	61bb      	str	r3, [r7, #24]
 80054f6:	e003      	b.n	8005500 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054fc:	2300      	movs	r3, #0
 80054fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005508:	e02a      	b.n	8005560 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	2200      	movs	r2, #0
 8005512:	2180      	movs	r1, #128	; 0x80
 8005514:	68f8      	ldr	r0, [r7, #12]
 8005516:	f000 fb1f 	bl	8005b58 <UART_WaitOnFlagUntilTimeout>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d001      	beq.n	8005524 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e036      	b.n	8005592 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d10b      	bne.n	8005542 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	881b      	ldrh	r3, [r3, #0]
 800552e:	461a      	mov	r2, r3
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005538:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	3302      	adds	r3, #2
 800553e:	61bb      	str	r3, [r7, #24]
 8005540:	e007      	b.n	8005552 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	781a      	ldrb	r2, [r3, #0]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	3301      	adds	r3, #1
 8005550:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005556:	b29b      	uxth	r3, r3
 8005558:	3b01      	subs	r3, #1
 800555a:	b29a      	uxth	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005564:	b29b      	uxth	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1cf      	bne.n	800550a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	9300      	str	r3, [sp, #0]
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	2200      	movs	r2, #0
 8005572:	2140      	movs	r1, #64	; 0x40
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f000 faef 	bl	8005b58 <UART_WaitOnFlagUntilTimeout>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d001      	beq.n	8005584 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e006      	b.n	8005592 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2220      	movs	r2, #32
 8005588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800558c:	2300      	movs	r3, #0
 800558e:	e000      	b.n	8005592 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005590:	2302      	movs	r3, #2
  }
}
 8005592:	4618      	mov	r0, r3
 8005594:	3720      	adds	r7, #32
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800559a:	b580      	push	{r7, lr}
 800559c:	b084      	sub	sp, #16
 800559e:	af00      	add	r7, sp, #0
 80055a0:	60f8      	str	r0, [r7, #12]
 80055a2:	60b9      	str	r1, [r7, #8]
 80055a4:	4613      	mov	r3, r2
 80055a6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	2b20      	cmp	r3, #32
 80055b2:	d11d      	bne.n	80055f0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d002      	beq.n	80055c0 <HAL_UART_Receive_IT+0x26>
 80055ba:	88fb      	ldrh	r3, [r7, #6]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d101      	bne.n	80055c4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e016      	b.n	80055f2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d101      	bne.n	80055d2 <HAL_UART_Receive_IT+0x38>
 80055ce:	2302      	movs	r3, #2
 80055d0:	e00f      	b.n	80055f2 <HAL_UART_Receive_IT+0x58>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80055e0:	88fb      	ldrh	r3, [r7, #6]
 80055e2:	461a      	mov	r2, r3
 80055e4:	68b9      	ldr	r1, [r7, #8]
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	f000 fb24 	bl	8005c34 <UART_Start_Receive_IT>
 80055ec:	4603      	mov	r3, r0
 80055ee:	e000      	b.n	80055f2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80055f0:	2302      	movs	r3, #2
  }
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3710      	adds	r7, #16
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
	...

080055fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b0ba      	sub	sp, #232	; 0xe8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005622:	2300      	movs	r3, #0
 8005624:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005628:	2300      	movs	r3, #0
 800562a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800562e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005632:	f003 030f 	and.w	r3, r3, #15
 8005636:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800563a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10f      	bne.n	8005662 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005646:	f003 0320 	and.w	r3, r3, #32
 800564a:	2b00      	cmp	r3, #0
 800564c:	d009      	beq.n	8005662 <HAL_UART_IRQHandler+0x66>
 800564e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005652:	f003 0320 	and.w	r3, r3, #32
 8005656:	2b00      	cmp	r3, #0
 8005658:	d003      	beq.n	8005662 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 fc07 	bl	8005e6e <UART_Receive_IT>
      return;
 8005660:	e256      	b.n	8005b10 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005662:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005666:	2b00      	cmp	r3, #0
 8005668:	f000 80de 	beq.w	8005828 <HAL_UART_IRQHandler+0x22c>
 800566c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005670:	f003 0301 	and.w	r3, r3, #1
 8005674:	2b00      	cmp	r3, #0
 8005676:	d106      	bne.n	8005686 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800567c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005680:	2b00      	cmp	r3, #0
 8005682:	f000 80d1 	beq.w	8005828 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800568a:	f003 0301 	and.w	r3, r3, #1
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00b      	beq.n	80056aa <HAL_UART_IRQHandler+0xae>
 8005692:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800569a:	2b00      	cmp	r3, #0
 800569c:	d005      	beq.n	80056aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a2:	f043 0201 	orr.w	r2, r3, #1
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056ae:	f003 0304 	and.w	r3, r3, #4
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00b      	beq.n	80056ce <HAL_UART_IRQHandler+0xd2>
 80056b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056ba:	f003 0301 	and.w	r3, r3, #1
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d005      	beq.n	80056ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c6:	f043 0202 	orr.w	r2, r3, #2
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056d2:	f003 0302 	and.w	r3, r3, #2
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00b      	beq.n	80056f2 <HAL_UART_IRQHandler+0xf6>
 80056da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056de:	f003 0301 	and.w	r3, r3, #1
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d005      	beq.n	80056f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ea:	f043 0204 	orr.w	r2, r3, #4
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80056f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056f6:	f003 0308 	and.w	r3, r3, #8
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d011      	beq.n	8005722 <HAL_UART_IRQHandler+0x126>
 80056fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005702:	f003 0320 	and.w	r3, r3, #32
 8005706:	2b00      	cmp	r3, #0
 8005708:	d105      	bne.n	8005716 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800570a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800570e:	f003 0301 	and.w	r3, r3, #1
 8005712:	2b00      	cmp	r3, #0
 8005714:	d005      	beq.n	8005722 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571a:	f043 0208 	orr.w	r2, r3, #8
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005726:	2b00      	cmp	r3, #0
 8005728:	f000 81ed 	beq.w	8005b06 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800572c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005730:	f003 0320 	and.w	r3, r3, #32
 8005734:	2b00      	cmp	r3, #0
 8005736:	d008      	beq.n	800574a <HAL_UART_IRQHandler+0x14e>
 8005738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800573c:	f003 0320 	and.w	r3, r3, #32
 8005740:	2b00      	cmp	r3, #0
 8005742:	d002      	beq.n	800574a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 fb92 	bl	8005e6e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	695b      	ldr	r3, [r3, #20]
 8005750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005754:	2b40      	cmp	r3, #64	; 0x40
 8005756:	bf0c      	ite	eq
 8005758:	2301      	moveq	r3, #1
 800575a:	2300      	movne	r3, #0
 800575c:	b2db      	uxtb	r3, r3
 800575e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005766:	f003 0308 	and.w	r3, r3, #8
 800576a:	2b00      	cmp	r3, #0
 800576c:	d103      	bne.n	8005776 <HAL_UART_IRQHandler+0x17a>
 800576e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005772:	2b00      	cmp	r3, #0
 8005774:	d04f      	beq.n	8005816 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 fa9a 	bl	8005cb0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005786:	2b40      	cmp	r3, #64	; 0x40
 8005788:	d141      	bne.n	800580e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	3314      	adds	r3, #20
 8005790:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005794:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005798:	e853 3f00 	ldrex	r3, [r3]
 800579c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80057a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	3314      	adds	r3, #20
 80057b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80057b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80057ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80057c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80057c6:	e841 2300 	strex	r3, r2, [r1]
 80057ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80057ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1d9      	bne.n	800578a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d013      	beq.n	8005806 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e2:	4a7d      	ldr	r2, [pc, #500]	; (80059d8 <HAL_UART_IRQHandler+0x3dc>)
 80057e4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7fd ff19 	bl	8003622 <HAL_DMA_Abort_IT>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d016      	beq.n	8005824 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005800:	4610      	mov	r0, r2
 8005802:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005804:	e00e      	b.n	8005824 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 f990 	bl	8005b2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800580c:	e00a      	b.n	8005824 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 f98c 	bl	8005b2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005814:	e006      	b.n	8005824 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 f988 	bl	8005b2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005822:	e170      	b.n	8005b06 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005824:	bf00      	nop
    return;
 8005826:	e16e      	b.n	8005b06 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800582c:	2b01      	cmp	r3, #1
 800582e:	f040 814a 	bne.w	8005ac6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005836:	f003 0310 	and.w	r3, r3, #16
 800583a:	2b00      	cmp	r3, #0
 800583c:	f000 8143 	beq.w	8005ac6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005844:	f003 0310 	and.w	r3, r3, #16
 8005848:	2b00      	cmp	r3, #0
 800584a:	f000 813c 	beq.w	8005ac6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800584e:	2300      	movs	r3, #0
 8005850:	60bb      	str	r3, [r7, #8]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	60bb      	str	r3, [r7, #8]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	60bb      	str	r3, [r7, #8]
 8005862:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	695b      	ldr	r3, [r3, #20]
 800586a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800586e:	2b40      	cmp	r3, #64	; 0x40
 8005870:	f040 80b4 	bne.w	80059dc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005880:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005884:	2b00      	cmp	r3, #0
 8005886:	f000 8140 	beq.w	8005b0a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800588e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005892:	429a      	cmp	r2, r3
 8005894:	f080 8139 	bcs.w	8005b0a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800589e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a4:	69db      	ldr	r3, [r3, #28]
 80058a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058aa:	f000 8088 	beq.w	80059be <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	330c      	adds	r3, #12
 80058b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058bc:	e853 3f00 	ldrex	r3, [r3]
 80058c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80058c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	330c      	adds	r3, #12
 80058d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80058da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80058de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80058e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80058ea:	e841 2300 	strex	r3, r2, [r1]
 80058ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80058f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1d9      	bne.n	80058ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	3314      	adds	r3, #20
 8005900:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005902:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005904:	e853 3f00 	ldrex	r3, [r3]
 8005908:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800590a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800590c:	f023 0301 	bic.w	r3, r3, #1
 8005910:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	3314      	adds	r3, #20
 800591a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800591e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005922:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005924:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005926:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800592a:	e841 2300 	strex	r3, r2, [r1]
 800592e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005930:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005932:	2b00      	cmp	r3, #0
 8005934:	d1e1      	bne.n	80058fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	3314      	adds	r3, #20
 800593c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005940:	e853 3f00 	ldrex	r3, [r3]
 8005944:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005946:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005948:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800594c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	3314      	adds	r3, #20
 8005956:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800595a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800595c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800595e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005960:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005962:	e841 2300 	strex	r3, r2, [r1]
 8005966:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005968:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800596a:	2b00      	cmp	r3, #0
 800596c:	d1e3      	bne.n	8005936 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2220      	movs	r2, #32
 8005972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	330c      	adds	r3, #12
 8005982:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005986:	e853 3f00 	ldrex	r3, [r3]
 800598a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800598c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800598e:	f023 0310 	bic.w	r3, r3, #16
 8005992:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	330c      	adds	r3, #12
 800599c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80059a0:	65ba      	str	r2, [r7, #88]	; 0x58
 80059a2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80059a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059a8:	e841 2300 	strex	r3, r2, [r1]
 80059ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80059ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d1e3      	bne.n	800597c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b8:	4618      	mov	r0, r3
 80059ba:	f7fd fdc2 	bl	8003542 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	4619      	mov	r1, r3
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 f8b6 	bl	8005b40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059d4:	e099      	b.n	8005b0a <HAL_UART_IRQHandler+0x50e>
 80059d6:	bf00      	nop
 80059d8:	08005d77 	.word	0x08005d77
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f000 808b 	beq.w	8005b0e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80059f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	f000 8086 	beq.w	8005b0e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	330c      	adds	r3, #12
 8005a08:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a0c:	e853 3f00 	ldrex	r3, [r3]
 8005a10:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	330c      	adds	r3, #12
 8005a22:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005a26:	647a      	str	r2, [r7, #68]	; 0x44
 8005a28:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a2e:	e841 2300 	strex	r3, r2, [r1]
 8005a32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1e3      	bne.n	8005a02 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	3314      	adds	r3, #20
 8005a40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a44:	e853 3f00 	ldrex	r3, [r3]
 8005a48:	623b      	str	r3, [r7, #32]
   return(result);
 8005a4a:	6a3b      	ldr	r3, [r7, #32]
 8005a4c:	f023 0301 	bic.w	r3, r3, #1
 8005a50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	3314      	adds	r3, #20
 8005a5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005a5e:	633a      	str	r2, [r7, #48]	; 0x30
 8005a60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a66:	e841 2300 	strex	r3, r2, [r1]
 8005a6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d1e3      	bne.n	8005a3a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2220      	movs	r2, #32
 8005a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	330c      	adds	r3, #12
 8005a86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	e853 3f00 	ldrex	r3, [r3]
 8005a8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f023 0310 	bic.w	r3, r3, #16
 8005a96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	330c      	adds	r3, #12
 8005aa0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005aa4:	61fa      	str	r2, [r7, #28]
 8005aa6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa8:	69b9      	ldr	r1, [r7, #24]
 8005aaa:	69fa      	ldr	r2, [r7, #28]
 8005aac:	e841 2300 	strex	r3, r2, [r1]
 8005ab0:	617b      	str	r3, [r7, #20]
   return(result);
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d1e3      	bne.n	8005a80 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ab8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005abc:	4619      	mov	r1, r3
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f83e 	bl	8005b40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ac4:	e023      	b.n	8005b0e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d009      	beq.n	8005ae6 <HAL_UART_IRQHandler+0x4ea>
 8005ad2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d003      	beq.n	8005ae6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f95d 	bl	8005d9e <UART_Transmit_IT>
    return;
 8005ae4:	e014      	b.n	8005b10 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00e      	beq.n	8005b10 <HAL_UART_IRQHandler+0x514>
 8005af2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d008      	beq.n	8005b10 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 f99d 	bl	8005e3e <UART_EndTransmit_IT>
    return;
 8005b04:	e004      	b.n	8005b10 <HAL_UART_IRQHandler+0x514>
    return;
 8005b06:	bf00      	nop
 8005b08:	e002      	b.n	8005b10 <HAL_UART_IRQHandler+0x514>
      return;
 8005b0a:	bf00      	nop
 8005b0c:	e000      	b.n	8005b10 <HAL_UART_IRQHandler+0x514>
      return;
 8005b0e:	bf00      	nop
  }
}
 8005b10:	37e8      	adds	r7, #232	; 0xe8
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop

08005b18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b34:	bf00      	nop
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	460b      	mov	r3, r1
 8005b4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b090      	sub	sp, #64	; 0x40
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	603b      	str	r3, [r7, #0]
 8005b64:	4613      	mov	r3, r2
 8005b66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b68:	e050      	b.n	8005c0c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b70:	d04c      	beq.n	8005c0c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005b72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d007      	beq.n	8005b88 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b78:	f7fd fb94 	bl	80032a4 <HAL_GetTick>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d241      	bcs.n	8005c0c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	330c      	adds	r3, #12
 8005b8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b92:	e853 3f00 	ldrex	r3, [r3]
 8005b96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	330c      	adds	r3, #12
 8005ba6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ba8:	637a      	str	r2, [r7, #52]	; 0x34
 8005baa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bb0:	e841 2300 	strex	r3, r2, [r1]
 8005bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1e5      	bne.n	8005b88 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	3314      	adds	r3, #20
 8005bc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	e853 3f00 	ldrex	r3, [r3]
 8005bca:	613b      	str	r3, [r7, #16]
   return(result);
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	f023 0301 	bic.w	r3, r3, #1
 8005bd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	3314      	adds	r3, #20
 8005bda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bdc:	623a      	str	r2, [r7, #32]
 8005bde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be0:	69f9      	ldr	r1, [r7, #28]
 8005be2:	6a3a      	ldr	r2, [r7, #32]
 8005be4:	e841 2300 	strex	r3, r2, [r1]
 8005be8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1e5      	bne.n	8005bbc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2220      	movs	r2, #32
 8005bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2220      	movs	r2, #32
 8005bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e00f      	b.n	8005c2c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	4013      	ands	r3, r2
 8005c16:	68ba      	ldr	r2, [r7, #8]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	bf0c      	ite	eq
 8005c1c:	2301      	moveq	r3, #1
 8005c1e:	2300      	movne	r3, #0
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	461a      	mov	r2, r3
 8005c24:	79fb      	ldrb	r3, [r7, #7]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d09f      	beq.n	8005b6a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3740      	adds	r7, #64	; 0x40
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b085      	sub	sp, #20
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	4613      	mov	r3, r2
 8005c40:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	68ba      	ldr	r2, [r7, #8]
 8005c46:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	88fa      	ldrh	r2, [r7, #6]
 8005c4c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	88fa      	ldrh	r2, [r7, #6]
 8005c52:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2222      	movs	r2, #34	; 0x22
 8005c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d007      	beq.n	8005c82 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68da      	ldr	r2, [r3, #12]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c80:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	695a      	ldr	r2, [r3, #20]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f042 0201 	orr.w	r2, r2, #1
 8005c90:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68da      	ldr	r2, [r3, #12]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f042 0220 	orr.w	r2, r2, #32
 8005ca0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3714      	adds	r7, #20
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b095      	sub	sp, #84	; 0x54
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	330c      	adds	r3, #12
 8005cbe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cc2:	e853 3f00 	ldrex	r3, [r3]
 8005cc6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	330c      	adds	r3, #12
 8005cd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005cd8:	643a      	str	r2, [r7, #64]	; 0x40
 8005cda:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cdc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005cde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ce0:	e841 2300 	strex	r3, r2, [r1]
 8005ce4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1e5      	bne.n	8005cb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	3314      	adds	r3, #20
 8005cf2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf4:	6a3b      	ldr	r3, [r7, #32]
 8005cf6:	e853 3f00 	ldrex	r3, [r3]
 8005cfa:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	f023 0301 	bic.w	r3, r3, #1
 8005d02:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	3314      	adds	r3, #20
 8005d0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d14:	e841 2300 	strex	r3, r2, [r1]
 8005d18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d1e5      	bne.n	8005cec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d119      	bne.n	8005d5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	330c      	adds	r3, #12
 8005d2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	e853 3f00 	ldrex	r3, [r3]
 8005d36:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	f023 0310 	bic.w	r3, r3, #16
 8005d3e:	647b      	str	r3, [r7, #68]	; 0x44
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	330c      	adds	r3, #12
 8005d46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d48:	61ba      	str	r2, [r7, #24]
 8005d4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4c:	6979      	ldr	r1, [r7, #20]
 8005d4e:	69ba      	ldr	r2, [r7, #24]
 8005d50:	e841 2300 	strex	r3, r2, [r1]
 8005d54:	613b      	str	r3, [r7, #16]
   return(result);
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1e5      	bne.n	8005d28 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2220      	movs	r2, #32
 8005d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005d6a:	bf00      	nop
 8005d6c:	3754      	adds	r7, #84	; 0x54
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr

08005d76 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b084      	sub	sp, #16
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d90:	68f8      	ldr	r0, [r7, #12]
 8005d92:	f7ff fecb 	bl	8005b2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d96:	bf00      	nop
 8005d98:	3710      	adds	r7, #16
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b085      	sub	sp, #20
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b21      	cmp	r3, #33	; 0x21
 8005db0:	d13e      	bne.n	8005e30 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dba:	d114      	bne.n	8005de6 <UART_Transmit_IT+0x48>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d110      	bne.n	8005de6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a1b      	ldr	r3, [r3, #32]
 8005dc8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	881b      	ldrh	r3, [r3, #0]
 8005dce:	461a      	mov	r2, r3
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005dd8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	1c9a      	adds	r2, r3, #2
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	621a      	str	r2, [r3, #32]
 8005de4:	e008      	b.n	8005df8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	1c59      	adds	r1, r3, #1
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	6211      	str	r1, [r2, #32]
 8005df0:	781a      	ldrb	r2, [r3, #0]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	4619      	mov	r1, r3
 8005e06:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d10f      	bne.n	8005e2c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68da      	ldr	r2, [r3, #12]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e1a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68da      	ldr	r2, [r3, #12]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e2a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	e000      	b.n	8005e32 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005e30:	2302      	movs	r3, #2
  }
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3714      	adds	r7, #20
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	b082      	sub	sp, #8
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68da      	ldr	r2, [r3, #12]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e54:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2220      	movs	r2, #32
 8005e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f7ff fe5a 	bl	8005b18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3708      	adds	r7, #8
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b08c      	sub	sp, #48	; 0x30
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	2b22      	cmp	r3, #34	; 0x22
 8005e80:	f040 80ab 	bne.w	8005fda <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e8c:	d117      	bne.n	8005ebe <UART_Receive_IT+0x50>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d113      	bne.n	8005ebe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005e96:	2300      	movs	r3, #0
 8005e98:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e9e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eac:	b29a      	uxth	r2, r3
 8005eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb6:	1c9a      	adds	r2, r3, #2
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	629a      	str	r2, [r3, #40]	; 0x28
 8005ebc:	e026      	b.n	8005f0c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ed0:	d007      	beq.n	8005ee2 <UART_Receive_IT+0x74>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d10a      	bne.n	8005ef0 <UART_Receive_IT+0x82>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d106      	bne.n	8005ef0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	b2da      	uxtb	r2, r3
 8005eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eec:	701a      	strb	r2, [r3, #0]
 8005eee:	e008      	b.n	8005f02 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005efc:	b2da      	uxtb	r2, r3
 8005efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f00:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f06:	1c5a      	adds	r2, r3, #1
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	3b01      	subs	r3, #1
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	4619      	mov	r1, r3
 8005f1a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d15a      	bne.n	8005fd6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68da      	ldr	r2, [r3, #12]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f022 0220 	bic.w	r2, r2, #32
 8005f2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68da      	ldr	r2, [r3, #12]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	695a      	ldr	r2, [r3, #20]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f022 0201 	bic.w	r2, r2, #1
 8005f4e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2220      	movs	r2, #32
 8005f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d135      	bne.n	8005fcc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	330c      	adds	r3, #12
 8005f6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	e853 3f00 	ldrex	r3, [r3]
 8005f74:	613b      	str	r3, [r7, #16]
   return(result);
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	f023 0310 	bic.w	r3, r3, #16
 8005f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	330c      	adds	r3, #12
 8005f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f86:	623a      	str	r2, [r7, #32]
 8005f88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8a:	69f9      	ldr	r1, [r7, #28]
 8005f8c:	6a3a      	ldr	r2, [r7, #32]
 8005f8e:	e841 2300 	strex	r3, r2, [r1]
 8005f92:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d1e5      	bne.n	8005f66 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0310 	and.w	r3, r3, #16
 8005fa4:	2b10      	cmp	r3, #16
 8005fa6:	d10a      	bne.n	8005fbe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005fa8:	2300      	movs	r3, #0
 8005faa:	60fb      	str	r3, [r7, #12]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	60fb      	str	r3, [r7, #12]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	60fb      	str	r3, [r7, #12]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f7ff fdbb 	bl	8005b40 <HAL_UARTEx_RxEventCallback>
 8005fca:	e002      	b.n	8005fd2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f7fc f891 	bl	80020f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	e002      	b.n	8005fdc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	e000      	b.n	8005fdc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005fda:	2302      	movs	r3, #2
  }
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3730      	adds	r7, #48	; 0x30
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fe4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fe8:	b0c0      	sub	sp, #256	; 0x100
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	691b      	ldr	r3, [r3, #16]
 8005ff8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006000:	68d9      	ldr	r1, [r3, #12]
 8006002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	ea40 0301 	orr.w	r3, r0, r1
 800600c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800600e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006012:	689a      	ldr	r2, [r3, #8]
 8006014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	431a      	orrs	r2, r3
 800601c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	431a      	orrs	r2, r3
 8006024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006028:	69db      	ldr	r3, [r3, #28]
 800602a:	4313      	orrs	r3, r2
 800602c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800603c:	f021 010c 	bic.w	r1, r1, #12
 8006040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800604a:	430b      	orrs	r3, r1
 800604c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800604e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	695b      	ldr	r3, [r3, #20]
 8006056:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800605a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800605e:	6999      	ldr	r1, [r3, #24]
 8006060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	ea40 0301 	orr.w	r3, r0, r1
 800606a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800606c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	4b8f      	ldr	r3, [pc, #572]	; (80062b0 <UART_SetConfig+0x2cc>)
 8006074:	429a      	cmp	r2, r3
 8006076:	d005      	beq.n	8006084 <UART_SetConfig+0xa0>
 8006078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	4b8d      	ldr	r3, [pc, #564]	; (80062b4 <UART_SetConfig+0x2d0>)
 8006080:	429a      	cmp	r2, r3
 8006082:	d104      	bne.n	800608e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006084:	f7fd fdbc 	bl	8003c00 <HAL_RCC_GetPCLK2Freq>
 8006088:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800608c:	e003      	b.n	8006096 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800608e:	f7fd fda3 	bl	8003bd8 <HAL_RCC_GetPCLK1Freq>
 8006092:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800609a:	69db      	ldr	r3, [r3, #28]
 800609c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060a0:	f040 810c 	bne.w	80062bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80060a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060a8:	2200      	movs	r2, #0
 80060aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80060ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80060b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80060b6:	4622      	mov	r2, r4
 80060b8:	462b      	mov	r3, r5
 80060ba:	1891      	adds	r1, r2, r2
 80060bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80060be:	415b      	adcs	r3, r3
 80060c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80060c6:	4621      	mov	r1, r4
 80060c8:	eb12 0801 	adds.w	r8, r2, r1
 80060cc:	4629      	mov	r1, r5
 80060ce:	eb43 0901 	adc.w	r9, r3, r1
 80060d2:	f04f 0200 	mov.w	r2, #0
 80060d6:	f04f 0300 	mov.w	r3, #0
 80060da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060e6:	4690      	mov	r8, r2
 80060e8:	4699      	mov	r9, r3
 80060ea:	4623      	mov	r3, r4
 80060ec:	eb18 0303 	adds.w	r3, r8, r3
 80060f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80060f4:	462b      	mov	r3, r5
 80060f6:	eb49 0303 	adc.w	r3, r9, r3
 80060fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800610a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800610e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006112:	460b      	mov	r3, r1
 8006114:	18db      	adds	r3, r3, r3
 8006116:	653b      	str	r3, [r7, #80]	; 0x50
 8006118:	4613      	mov	r3, r2
 800611a:	eb42 0303 	adc.w	r3, r2, r3
 800611e:	657b      	str	r3, [r7, #84]	; 0x54
 8006120:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006124:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006128:	f7fa fdde 	bl	8000ce8 <__aeabi_uldivmod>
 800612c:	4602      	mov	r2, r0
 800612e:	460b      	mov	r3, r1
 8006130:	4b61      	ldr	r3, [pc, #388]	; (80062b8 <UART_SetConfig+0x2d4>)
 8006132:	fba3 2302 	umull	r2, r3, r3, r2
 8006136:	095b      	lsrs	r3, r3, #5
 8006138:	011c      	lsls	r4, r3, #4
 800613a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800613e:	2200      	movs	r2, #0
 8006140:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006144:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006148:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800614c:	4642      	mov	r2, r8
 800614e:	464b      	mov	r3, r9
 8006150:	1891      	adds	r1, r2, r2
 8006152:	64b9      	str	r1, [r7, #72]	; 0x48
 8006154:	415b      	adcs	r3, r3
 8006156:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006158:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800615c:	4641      	mov	r1, r8
 800615e:	eb12 0a01 	adds.w	sl, r2, r1
 8006162:	4649      	mov	r1, r9
 8006164:	eb43 0b01 	adc.w	fp, r3, r1
 8006168:	f04f 0200 	mov.w	r2, #0
 800616c:	f04f 0300 	mov.w	r3, #0
 8006170:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006174:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006178:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800617c:	4692      	mov	sl, r2
 800617e:	469b      	mov	fp, r3
 8006180:	4643      	mov	r3, r8
 8006182:	eb1a 0303 	adds.w	r3, sl, r3
 8006186:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800618a:	464b      	mov	r3, r9
 800618c:	eb4b 0303 	adc.w	r3, fp, r3
 8006190:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80061a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80061a8:	460b      	mov	r3, r1
 80061aa:	18db      	adds	r3, r3, r3
 80061ac:	643b      	str	r3, [r7, #64]	; 0x40
 80061ae:	4613      	mov	r3, r2
 80061b0:	eb42 0303 	adc.w	r3, r2, r3
 80061b4:	647b      	str	r3, [r7, #68]	; 0x44
 80061b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80061ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80061be:	f7fa fd93 	bl	8000ce8 <__aeabi_uldivmod>
 80061c2:	4602      	mov	r2, r0
 80061c4:	460b      	mov	r3, r1
 80061c6:	4611      	mov	r1, r2
 80061c8:	4b3b      	ldr	r3, [pc, #236]	; (80062b8 <UART_SetConfig+0x2d4>)
 80061ca:	fba3 2301 	umull	r2, r3, r3, r1
 80061ce:	095b      	lsrs	r3, r3, #5
 80061d0:	2264      	movs	r2, #100	; 0x64
 80061d2:	fb02 f303 	mul.w	r3, r2, r3
 80061d6:	1acb      	subs	r3, r1, r3
 80061d8:	00db      	lsls	r3, r3, #3
 80061da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80061de:	4b36      	ldr	r3, [pc, #216]	; (80062b8 <UART_SetConfig+0x2d4>)
 80061e0:	fba3 2302 	umull	r2, r3, r3, r2
 80061e4:	095b      	lsrs	r3, r3, #5
 80061e6:	005b      	lsls	r3, r3, #1
 80061e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80061ec:	441c      	add	r4, r3
 80061ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061f2:	2200      	movs	r2, #0
 80061f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80061fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006200:	4642      	mov	r2, r8
 8006202:	464b      	mov	r3, r9
 8006204:	1891      	adds	r1, r2, r2
 8006206:	63b9      	str	r1, [r7, #56]	; 0x38
 8006208:	415b      	adcs	r3, r3
 800620a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800620c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006210:	4641      	mov	r1, r8
 8006212:	1851      	adds	r1, r2, r1
 8006214:	6339      	str	r1, [r7, #48]	; 0x30
 8006216:	4649      	mov	r1, r9
 8006218:	414b      	adcs	r3, r1
 800621a:	637b      	str	r3, [r7, #52]	; 0x34
 800621c:	f04f 0200 	mov.w	r2, #0
 8006220:	f04f 0300 	mov.w	r3, #0
 8006224:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006228:	4659      	mov	r1, fp
 800622a:	00cb      	lsls	r3, r1, #3
 800622c:	4651      	mov	r1, sl
 800622e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006232:	4651      	mov	r1, sl
 8006234:	00ca      	lsls	r2, r1, #3
 8006236:	4610      	mov	r0, r2
 8006238:	4619      	mov	r1, r3
 800623a:	4603      	mov	r3, r0
 800623c:	4642      	mov	r2, r8
 800623e:	189b      	adds	r3, r3, r2
 8006240:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006244:	464b      	mov	r3, r9
 8006246:	460a      	mov	r2, r1
 8006248:	eb42 0303 	adc.w	r3, r2, r3
 800624c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800625c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006260:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006264:	460b      	mov	r3, r1
 8006266:	18db      	adds	r3, r3, r3
 8006268:	62bb      	str	r3, [r7, #40]	; 0x28
 800626a:	4613      	mov	r3, r2
 800626c:	eb42 0303 	adc.w	r3, r2, r3
 8006270:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006272:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006276:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800627a:	f7fa fd35 	bl	8000ce8 <__aeabi_uldivmod>
 800627e:	4602      	mov	r2, r0
 8006280:	460b      	mov	r3, r1
 8006282:	4b0d      	ldr	r3, [pc, #52]	; (80062b8 <UART_SetConfig+0x2d4>)
 8006284:	fba3 1302 	umull	r1, r3, r3, r2
 8006288:	095b      	lsrs	r3, r3, #5
 800628a:	2164      	movs	r1, #100	; 0x64
 800628c:	fb01 f303 	mul.w	r3, r1, r3
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	00db      	lsls	r3, r3, #3
 8006294:	3332      	adds	r3, #50	; 0x32
 8006296:	4a08      	ldr	r2, [pc, #32]	; (80062b8 <UART_SetConfig+0x2d4>)
 8006298:	fba2 2303 	umull	r2, r3, r2, r3
 800629c:	095b      	lsrs	r3, r3, #5
 800629e:	f003 0207 	and.w	r2, r3, #7
 80062a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4422      	add	r2, r4
 80062aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80062ac:	e105      	b.n	80064ba <UART_SetConfig+0x4d6>
 80062ae:	bf00      	nop
 80062b0:	40011000 	.word	0x40011000
 80062b4:	40011400 	.word	0x40011400
 80062b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062c0:	2200      	movs	r2, #0
 80062c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80062c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80062ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80062ce:	4642      	mov	r2, r8
 80062d0:	464b      	mov	r3, r9
 80062d2:	1891      	adds	r1, r2, r2
 80062d4:	6239      	str	r1, [r7, #32]
 80062d6:	415b      	adcs	r3, r3
 80062d8:	627b      	str	r3, [r7, #36]	; 0x24
 80062da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80062de:	4641      	mov	r1, r8
 80062e0:	1854      	adds	r4, r2, r1
 80062e2:	4649      	mov	r1, r9
 80062e4:	eb43 0501 	adc.w	r5, r3, r1
 80062e8:	f04f 0200 	mov.w	r2, #0
 80062ec:	f04f 0300 	mov.w	r3, #0
 80062f0:	00eb      	lsls	r3, r5, #3
 80062f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062f6:	00e2      	lsls	r2, r4, #3
 80062f8:	4614      	mov	r4, r2
 80062fa:	461d      	mov	r5, r3
 80062fc:	4643      	mov	r3, r8
 80062fe:	18e3      	adds	r3, r4, r3
 8006300:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006304:	464b      	mov	r3, r9
 8006306:	eb45 0303 	adc.w	r3, r5, r3
 800630a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800630e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800631a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800631e:	f04f 0200 	mov.w	r2, #0
 8006322:	f04f 0300 	mov.w	r3, #0
 8006326:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800632a:	4629      	mov	r1, r5
 800632c:	008b      	lsls	r3, r1, #2
 800632e:	4621      	mov	r1, r4
 8006330:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006334:	4621      	mov	r1, r4
 8006336:	008a      	lsls	r2, r1, #2
 8006338:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800633c:	f7fa fcd4 	bl	8000ce8 <__aeabi_uldivmod>
 8006340:	4602      	mov	r2, r0
 8006342:	460b      	mov	r3, r1
 8006344:	4b60      	ldr	r3, [pc, #384]	; (80064c8 <UART_SetConfig+0x4e4>)
 8006346:	fba3 2302 	umull	r2, r3, r3, r2
 800634a:	095b      	lsrs	r3, r3, #5
 800634c:	011c      	lsls	r4, r3, #4
 800634e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006352:	2200      	movs	r2, #0
 8006354:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006358:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800635c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006360:	4642      	mov	r2, r8
 8006362:	464b      	mov	r3, r9
 8006364:	1891      	adds	r1, r2, r2
 8006366:	61b9      	str	r1, [r7, #24]
 8006368:	415b      	adcs	r3, r3
 800636a:	61fb      	str	r3, [r7, #28]
 800636c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006370:	4641      	mov	r1, r8
 8006372:	1851      	adds	r1, r2, r1
 8006374:	6139      	str	r1, [r7, #16]
 8006376:	4649      	mov	r1, r9
 8006378:	414b      	adcs	r3, r1
 800637a:	617b      	str	r3, [r7, #20]
 800637c:	f04f 0200 	mov.w	r2, #0
 8006380:	f04f 0300 	mov.w	r3, #0
 8006384:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006388:	4659      	mov	r1, fp
 800638a:	00cb      	lsls	r3, r1, #3
 800638c:	4651      	mov	r1, sl
 800638e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006392:	4651      	mov	r1, sl
 8006394:	00ca      	lsls	r2, r1, #3
 8006396:	4610      	mov	r0, r2
 8006398:	4619      	mov	r1, r3
 800639a:	4603      	mov	r3, r0
 800639c:	4642      	mov	r2, r8
 800639e:	189b      	adds	r3, r3, r2
 80063a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80063a4:	464b      	mov	r3, r9
 80063a6:	460a      	mov	r2, r1
 80063a8:	eb42 0303 	adc.w	r3, r2, r3
 80063ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80063b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80063ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80063bc:	f04f 0200 	mov.w	r2, #0
 80063c0:	f04f 0300 	mov.w	r3, #0
 80063c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80063c8:	4649      	mov	r1, r9
 80063ca:	008b      	lsls	r3, r1, #2
 80063cc:	4641      	mov	r1, r8
 80063ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063d2:	4641      	mov	r1, r8
 80063d4:	008a      	lsls	r2, r1, #2
 80063d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80063da:	f7fa fc85 	bl	8000ce8 <__aeabi_uldivmod>
 80063de:	4602      	mov	r2, r0
 80063e0:	460b      	mov	r3, r1
 80063e2:	4b39      	ldr	r3, [pc, #228]	; (80064c8 <UART_SetConfig+0x4e4>)
 80063e4:	fba3 1302 	umull	r1, r3, r3, r2
 80063e8:	095b      	lsrs	r3, r3, #5
 80063ea:	2164      	movs	r1, #100	; 0x64
 80063ec:	fb01 f303 	mul.w	r3, r1, r3
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	011b      	lsls	r3, r3, #4
 80063f4:	3332      	adds	r3, #50	; 0x32
 80063f6:	4a34      	ldr	r2, [pc, #208]	; (80064c8 <UART_SetConfig+0x4e4>)
 80063f8:	fba2 2303 	umull	r2, r3, r2, r3
 80063fc:	095b      	lsrs	r3, r3, #5
 80063fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006402:	441c      	add	r4, r3
 8006404:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006408:	2200      	movs	r2, #0
 800640a:	673b      	str	r3, [r7, #112]	; 0x70
 800640c:	677a      	str	r2, [r7, #116]	; 0x74
 800640e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006412:	4642      	mov	r2, r8
 8006414:	464b      	mov	r3, r9
 8006416:	1891      	adds	r1, r2, r2
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	415b      	adcs	r3, r3
 800641c:	60fb      	str	r3, [r7, #12]
 800641e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006422:	4641      	mov	r1, r8
 8006424:	1851      	adds	r1, r2, r1
 8006426:	6039      	str	r1, [r7, #0]
 8006428:	4649      	mov	r1, r9
 800642a:	414b      	adcs	r3, r1
 800642c:	607b      	str	r3, [r7, #4]
 800642e:	f04f 0200 	mov.w	r2, #0
 8006432:	f04f 0300 	mov.w	r3, #0
 8006436:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800643a:	4659      	mov	r1, fp
 800643c:	00cb      	lsls	r3, r1, #3
 800643e:	4651      	mov	r1, sl
 8006440:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006444:	4651      	mov	r1, sl
 8006446:	00ca      	lsls	r2, r1, #3
 8006448:	4610      	mov	r0, r2
 800644a:	4619      	mov	r1, r3
 800644c:	4603      	mov	r3, r0
 800644e:	4642      	mov	r2, r8
 8006450:	189b      	adds	r3, r3, r2
 8006452:	66bb      	str	r3, [r7, #104]	; 0x68
 8006454:	464b      	mov	r3, r9
 8006456:	460a      	mov	r2, r1
 8006458:	eb42 0303 	adc.w	r3, r2, r3
 800645c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800645e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	663b      	str	r3, [r7, #96]	; 0x60
 8006468:	667a      	str	r2, [r7, #100]	; 0x64
 800646a:	f04f 0200 	mov.w	r2, #0
 800646e:	f04f 0300 	mov.w	r3, #0
 8006472:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006476:	4649      	mov	r1, r9
 8006478:	008b      	lsls	r3, r1, #2
 800647a:	4641      	mov	r1, r8
 800647c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006480:	4641      	mov	r1, r8
 8006482:	008a      	lsls	r2, r1, #2
 8006484:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006488:	f7fa fc2e 	bl	8000ce8 <__aeabi_uldivmod>
 800648c:	4602      	mov	r2, r0
 800648e:	460b      	mov	r3, r1
 8006490:	4b0d      	ldr	r3, [pc, #52]	; (80064c8 <UART_SetConfig+0x4e4>)
 8006492:	fba3 1302 	umull	r1, r3, r3, r2
 8006496:	095b      	lsrs	r3, r3, #5
 8006498:	2164      	movs	r1, #100	; 0x64
 800649a:	fb01 f303 	mul.w	r3, r1, r3
 800649e:	1ad3      	subs	r3, r2, r3
 80064a0:	011b      	lsls	r3, r3, #4
 80064a2:	3332      	adds	r3, #50	; 0x32
 80064a4:	4a08      	ldr	r2, [pc, #32]	; (80064c8 <UART_SetConfig+0x4e4>)
 80064a6:	fba2 2303 	umull	r2, r3, r2, r3
 80064aa:	095b      	lsrs	r3, r3, #5
 80064ac:	f003 020f 	and.w	r2, r3, #15
 80064b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4422      	add	r2, r4
 80064b8:	609a      	str	r2, [r3, #8]
}
 80064ba:	bf00      	nop
 80064bc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80064c0:	46bd      	mov	sp, r7
 80064c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064c6:	bf00      	nop
 80064c8:	51eb851f 	.word	0x51eb851f

080064cc <__errno>:
 80064cc:	4b01      	ldr	r3, [pc, #4]	; (80064d4 <__errno+0x8>)
 80064ce:	6818      	ldr	r0, [r3, #0]
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	20000060 	.word	0x20000060

080064d8 <__libc_init_array>:
 80064d8:	b570      	push	{r4, r5, r6, lr}
 80064da:	4d0d      	ldr	r5, [pc, #52]	; (8006510 <__libc_init_array+0x38>)
 80064dc:	4c0d      	ldr	r4, [pc, #52]	; (8006514 <__libc_init_array+0x3c>)
 80064de:	1b64      	subs	r4, r4, r5
 80064e0:	10a4      	asrs	r4, r4, #2
 80064e2:	2600      	movs	r6, #0
 80064e4:	42a6      	cmp	r6, r4
 80064e6:	d109      	bne.n	80064fc <__libc_init_array+0x24>
 80064e8:	4d0b      	ldr	r5, [pc, #44]	; (8006518 <__libc_init_array+0x40>)
 80064ea:	4c0c      	ldr	r4, [pc, #48]	; (800651c <__libc_init_array+0x44>)
 80064ec:	f004 fb3a 	bl	800ab64 <_init>
 80064f0:	1b64      	subs	r4, r4, r5
 80064f2:	10a4      	asrs	r4, r4, #2
 80064f4:	2600      	movs	r6, #0
 80064f6:	42a6      	cmp	r6, r4
 80064f8:	d105      	bne.n	8006506 <__libc_init_array+0x2e>
 80064fa:	bd70      	pop	{r4, r5, r6, pc}
 80064fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006500:	4798      	blx	r3
 8006502:	3601      	adds	r6, #1
 8006504:	e7ee      	b.n	80064e4 <__libc_init_array+0xc>
 8006506:	f855 3b04 	ldr.w	r3, [r5], #4
 800650a:	4798      	blx	r3
 800650c:	3601      	adds	r6, #1
 800650e:	e7f2      	b.n	80064f6 <__libc_init_array+0x1e>
 8006510:	0800b108 	.word	0x0800b108
 8006514:	0800b108 	.word	0x0800b108
 8006518:	0800b108 	.word	0x0800b108
 800651c:	0800b10c 	.word	0x0800b10c

08006520 <memset>:
 8006520:	4402      	add	r2, r0
 8006522:	4603      	mov	r3, r0
 8006524:	4293      	cmp	r3, r2
 8006526:	d100      	bne.n	800652a <memset+0xa>
 8006528:	4770      	bx	lr
 800652a:	f803 1b01 	strb.w	r1, [r3], #1
 800652e:	e7f9      	b.n	8006524 <memset+0x4>

08006530 <__cvt>:
 8006530:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006534:	ec55 4b10 	vmov	r4, r5, d0
 8006538:	2d00      	cmp	r5, #0
 800653a:	460e      	mov	r6, r1
 800653c:	4619      	mov	r1, r3
 800653e:	462b      	mov	r3, r5
 8006540:	bfbb      	ittet	lt
 8006542:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006546:	461d      	movlt	r5, r3
 8006548:	2300      	movge	r3, #0
 800654a:	232d      	movlt	r3, #45	; 0x2d
 800654c:	700b      	strb	r3, [r1, #0]
 800654e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006550:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006554:	4691      	mov	r9, r2
 8006556:	f023 0820 	bic.w	r8, r3, #32
 800655a:	bfbc      	itt	lt
 800655c:	4622      	movlt	r2, r4
 800655e:	4614      	movlt	r4, r2
 8006560:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006564:	d005      	beq.n	8006572 <__cvt+0x42>
 8006566:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800656a:	d100      	bne.n	800656e <__cvt+0x3e>
 800656c:	3601      	adds	r6, #1
 800656e:	2102      	movs	r1, #2
 8006570:	e000      	b.n	8006574 <__cvt+0x44>
 8006572:	2103      	movs	r1, #3
 8006574:	ab03      	add	r3, sp, #12
 8006576:	9301      	str	r3, [sp, #4]
 8006578:	ab02      	add	r3, sp, #8
 800657a:	9300      	str	r3, [sp, #0]
 800657c:	ec45 4b10 	vmov	d0, r4, r5
 8006580:	4653      	mov	r3, sl
 8006582:	4632      	mov	r2, r6
 8006584:	f001 fb94 	bl	8007cb0 <_dtoa_r>
 8006588:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800658c:	4607      	mov	r7, r0
 800658e:	d102      	bne.n	8006596 <__cvt+0x66>
 8006590:	f019 0f01 	tst.w	r9, #1
 8006594:	d022      	beq.n	80065dc <__cvt+0xac>
 8006596:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800659a:	eb07 0906 	add.w	r9, r7, r6
 800659e:	d110      	bne.n	80065c2 <__cvt+0x92>
 80065a0:	783b      	ldrb	r3, [r7, #0]
 80065a2:	2b30      	cmp	r3, #48	; 0x30
 80065a4:	d10a      	bne.n	80065bc <__cvt+0x8c>
 80065a6:	2200      	movs	r2, #0
 80065a8:	2300      	movs	r3, #0
 80065aa:	4620      	mov	r0, r4
 80065ac:	4629      	mov	r1, r5
 80065ae:	f7fa fabb 	bl	8000b28 <__aeabi_dcmpeq>
 80065b2:	b918      	cbnz	r0, 80065bc <__cvt+0x8c>
 80065b4:	f1c6 0601 	rsb	r6, r6, #1
 80065b8:	f8ca 6000 	str.w	r6, [sl]
 80065bc:	f8da 3000 	ldr.w	r3, [sl]
 80065c0:	4499      	add	r9, r3
 80065c2:	2200      	movs	r2, #0
 80065c4:	2300      	movs	r3, #0
 80065c6:	4620      	mov	r0, r4
 80065c8:	4629      	mov	r1, r5
 80065ca:	f7fa faad 	bl	8000b28 <__aeabi_dcmpeq>
 80065ce:	b108      	cbz	r0, 80065d4 <__cvt+0xa4>
 80065d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80065d4:	2230      	movs	r2, #48	; 0x30
 80065d6:	9b03      	ldr	r3, [sp, #12]
 80065d8:	454b      	cmp	r3, r9
 80065da:	d307      	bcc.n	80065ec <__cvt+0xbc>
 80065dc:	9b03      	ldr	r3, [sp, #12]
 80065de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065e0:	1bdb      	subs	r3, r3, r7
 80065e2:	4638      	mov	r0, r7
 80065e4:	6013      	str	r3, [r2, #0]
 80065e6:	b004      	add	sp, #16
 80065e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065ec:	1c59      	adds	r1, r3, #1
 80065ee:	9103      	str	r1, [sp, #12]
 80065f0:	701a      	strb	r2, [r3, #0]
 80065f2:	e7f0      	b.n	80065d6 <__cvt+0xa6>

080065f4 <__exponent>:
 80065f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065f6:	4603      	mov	r3, r0
 80065f8:	2900      	cmp	r1, #0
 80065fa:	bfb8      	it	lt
 80065fc:	4249      	neglt	r1, r1
 80065fe:	f803 2b02 	strb.w	r2, [r3], #2
 8006602:	bfb4      	ite	lt
 8006604:	222d      	movlt	r2, #45	; 0x2d
 8006606:	222b      	movge	r2, #43	; 0x2b
 8006608:	2909      	cmp	r1, #9
 800660a:	7042      	strb	r2, [r0, #1]
 800660c:	dd2a      	ble.n	8006664 <__exponent+0x70>
 800660e:	f10d 0407 	add.w	r4, sp, #7
 8006612:	46a4      	mov	ip, r4
 8006614:	270a      	movs	r7, #10
 8006616:	46a6      	mov	lr, r4
 8006618:	460a      	mov	r2, r1
 800661a:	fb91 f6f7 	sdiv	r6, r1, r7
 800661e:	fb07 1516 	mls	r5, r7, r6, r1
 8006622:	3530      	adds	r5, #48	; 0x30
 8006624:	2a63      	cmp	r2, #99	; 0x63
 8006626:	f104 34ff 	add.w	r4, r4, #4294967295
 800662a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800662e:	4631      	mov	r1, r6
 8006630:	dcf1      	bgt.n	8006616 <__exponent+0x22>
 8006632:	3130      	adds	r1, #48	; 0x30
 8006634:	f1ae 0502 	sub.w	r5, lr, #2
 8006638:	f804 1c01 	strb.w	r1, [r4, #-1]
 800663c:	1c44      	adds	r4, r0, #1
 800663e:	4629      	mov	r1, r5
 8006640:	4561      	cmp	r1, ip
 8006642:	d30a      	bcc.n	800665a <__exponent+0x66>
 8006644:	f10d 0209 	add.w	r2, sp, #9
 8006648:	eba2 020e 	sub.w	r2, r2, lr
 800664c:	4565      	cmp	r5, ip
 800664e:	bf88      	it	hi
 8006650:	2200      	movhi	r2, #0
 8006652:	4413      	add	r3, r2
 8006654:	1a18      	subs	r0, r3, r0
 8006656:	b003      	add	sp, #12
 8006658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800665a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800665e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006662:	e7ed      	b.n	8006640 <__exponent+0x4c>
 8006664:	2330      	movs	r3, #48	; 0x30
 8006666:	3130      	adds	r1, #48	; 0x30
 8006668:	7083      	strb	r3, [r0, #2]
 800666a:	70c1      	strb	r1, [r0, #3]
 800666c:	1d03      	adds	r3, r0, #4
 800666e:	e7f1      	b.n	8006654 <__exponent+0x60>

08006670 <_printf_float>:
 8006670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006674:	ed2d 8b02 	vpush	{d8}
 8006678:	b08d      	sub	sp, #52	; 0x34
 800667a:	460c      	mov	r4, r1
 800667c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006680:	4616      	mov	r6, r2
 8006682:	461f      	mov	r7, r3
 8006684:	4605      	mov	r5, r0
 8006686:	f002 fc83 	bl	8008f90 <_localeconv_r>
 800668a:	f8d0 a000 	ldr.w	sl, [r0]
 800668e:	4650      	mov	r0, sl
 8006690:	f7f9 fdc8 	bl	8000224 <strlen>
 8006694:	2300      	movs	r3, #0
 8006696:	930a      	str	r3, [sp, #40]	; 0x28
 8006698:	6823      	ldr	r3, [r4, #0]
 800669a:	9305      	str	r3, [sp, #20]
 800669c:	f8d8 3000 	ldr.w	r3, [r8]
 80066a0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80066a4:	3307      	adds	r3, #7
 80066a6:	f023 0307 	bic.w	r3, r3, #7
 80066aa:	f103 0208 	add.w	r2, r3, #8
 80066ae:	f8c8 2000 	str.w	r2, [r8]
 80066b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80066ba:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80066be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80066c2:	9307      	str	r3, [sp, #28]
 80066c4:	f8cd 8018 	str.w	r8, [sp, #24]
 80066c8:	ee08 0a10 	vmov	s16, r0
 80066cc:	4b9f      	ldr	r3, [pc, #636]	; (800694c <_printf_float+0x2dc>)
 80066ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066d2:	f04f 32ff 	mov.w	r2, #4294967295
 80066d6:	f7fa fa59 	bl	8000b8c <__aeabi_dcmpun>
 80066da:	bb88      	cbnz	r0, 8006740 <_printf_float+0xd0>
 80066dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066e0:	4b9a      	ldr	r3, [pc, #616]	; (800694c <_printf_float+0x2dc>)
 80066e2:	f04f 32ff 	mov.w	r2, #4294967295
 80066e6:	f7fa fa33 	bl	8000b50 <__aeabi_dcmple>
 80066ea:	bb48      	cbnz	r0, 8006740 <_printf_float+0xd0>
 80066ec:	2200      	movs	r2, #0
 80066ee:	2300      	movs	r3, #0
 80066f0:	4640      	mov	r0, r8
 80066f2:	4649      	mov	r1, r9
 80066f4:	f7fa fa22 	bl	8000b3c <__aeabi_dcmplt>
 80066f8:	b110      	cbz	r0, 8006700 <_printf_float+0x90>
 80066fa:	232d      	movs	r3, #45	; 0x2d
 80066fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006700:	4b93      	ldr	r3, [pc, #588]	; (8006950 <_printf_float+0x2e0>)
 8006702:	4894      	ldr	r0, [pc, #592]	; (8006954 <_printf_float+0x2e4>)
 8006704:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006708:	bf94      	ite	ls
 800670a:	4698      	movls	r8, r3
 800670c:	4680      	movhi	r8, r0
 800670e:	2303      	movs	r3, #3
 8006710:	6123      	str	r3, [r4, #16]
 8006712:	9b05      	ldr	r3, [sp, #20]
 8006714:	f023 0204 	bic.w	r2, r3, #4
 8006718:	6022      	str	r2, [r4, #0]
 800671a:	f04f 0900 	mov.w	r9, #0
 800671e:	9700      	str	r7, [sp, #0]
 8006720:	4633      	mov	r3, r6
 8006722:	aa0b      	add	r2, sp, #44	; 0x2c
 8006724:	4621      	mov	r1, r4
 8006726:	4628      	mov	r0, r5
 8006728:	f000 f9d8 	bl	8006adc <_printf_common>
 800672c:	3001      	adds	r0, #1
 800672e:	f040 8090 	bne.w	8006852 <_printf_float+0x1e2>
 8006732:	f04f 30ff 	mov.w	r0, #4294967295
 8006736:	b00d      	add	sp, #52	; 0x34
 8006738:	ecbd 8b02 	vpop	{d8}
 800673c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006740:	4642      	mov	r2, r8
 8006742:	464b      	mov	r3, r9
 8006744:	4640      	mov	r0, r8
 8006746:	4649      	mov	r1, r9
 8006748:	f7fa fa20 	bl	8000b8c <__aeabi_dcmpun>
 800674c:	b140      	cbz	r0, 8006760 <_printf_float+0xf0>
 800674e:	464b      	mov	r3, r9
 8006750:	2b00      	cmp	r3, #0
 8006752:	bfbc      	itt	lt
 8006754:	232d      	movlt	r3, #45	; 0x2d
 8006756:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800675a:	487f      	ldr	r0, [pc, #508]	; (8006958 <_printf_float+0x2e8>)
 800675c:	4b7f      	ldr	r3, [pc, #508]	; (800695c <_printf_float+0x2ec>)
 800675e:	e7d1      	b.n	8006704 <_printf_float+0x94>
 8006760:	6863      	ldr	r3, [r4, #4]
 8006762:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006766:	9206      	str	r2, [sp, #24]
 8006768:	1c5a      	adds	r2, r3, #1
 800676a:	d13f      	bne.n	80067ec <_printf_float+0x17c>
 800676c:	2306      	movs	r3, #6
 800676e:	6063      	str	r3, [r4, #4]
 8006770:	9b05      	ldr	r3, [sp, #20]
 8006772:	6861      	ldr	r1, [r4, #4]
 8006774:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006778:	2300      	movs	r3, #0
 800677a:	9303      	str	r3, [sp, #12]
 800677c:	ab0a      	add	r3, sp, #40	; 0x28
 800677e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006782:	ab09      	add	r3, sp, #36	; 0x24
 8006784:	ec49 8b10 	vmov	d0, r8, r9
 8006788:	9300      	str	r3, [sp, #0]
 800678a:	6022      	str	r2, [r4, #0]
 800678c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006790:	4628      	mov	r0, r5
 8006792:	f7ff fecd 	bl	8006530 <__cvt>
 8006796:	9b06      	ldr	r3, [sp, #24]
 8006798:	9909      	ldr	r1, [sp, #36]	; 0x24
 800679a:	2b47      	cmp	r3, #71	; 0x47
 800679c:	4680      	mov	r8, r0
 800679e:	d108      	bne.n	80067b2 <_printf_float+0x142>
 80067a0:	1cc8      	adds	r0, r1, #3
 80067a2:	db02      	blt.n	80067aa <_printf_float+0x13a>
 80067a4:	6863      	ldr	r3, [r4, #4]
 80067a6:	4299      	cmp	r1, r3
 80067a8:	dd41      	ble.n	800682e <_printf_float+0x1be>
 80067aa:	f1ab 0b02 	sub.w	fp, fp, #2
 80067ae:	fa5f fb8b 	uxtb.w	fp, fp
 80067b2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80067b6:	d820      	bhi.n	80067fa <_printf_float+0x18a>
 80067b8:	3901      	subs	r1, #1
 80067ba:	465a      	mov	r2, fp
 80067bc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80067c0:	9109      	str	r1, [sp, #36]	; 0x24
 80067c2:	f7ff ff17 	bl	80065f4 <__exponent>
 80067c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067c8:	1813      	adds	r3, r2, r0
 80067ca:	2a01      	cmp	r2, #1
 80067cc:	4681      	mov	r9, r0
 80067ce:	6123      	str	r3, [r4, #16]
 80067d0:	dc02      	bgt.n	80067d8 <_printf_float+0x168>
 80067d2:	6822      	ldr	r2, [r4, #0]
 80067d4:	07d2      	lsls	r2, r2, #31
 80067d6:	d501      	bpl.n	80067dc <_printf_float+0x16c>
 80067d8:	3301      	adds	r3, #1
 80067da:	6123      	str	r3, [r4, #16]
 80067dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d09c      	beq.n	800671e <_printf_float+0xae>
 80067e4:	232d      	movs	r3, #45	; 0x2d
 80067e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067ea:	e798      	b.n	800671e <_printf_float+0xae>
 80067ec:	9a06      	ldr	r2, [sp, #24]
 80067ee:	2a47      	cmp	r2, #71	; 0x47
 80067f0:	d1be      	bne.n	8006770 <_printf_float+0x100>
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d1bc      	bne.n	8006770 <_printf_float+0x100>
 80067f6:	2301      	movs	r3, #1
 80067f8:	e7b9      	b.n	800676e <_printf_float+0xfe>
 80067fa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80067fe:	d118      	bne.n	8006832 <_printf_float+0x1c2>
 8006800:	2900      	cmp	r1, #0
 8006802:	6863      	ldr	r3, [r4, #4]
 8006804:	dd0b      	ble.n	800681e <_printf_float+0x1ae>
 8006806:	6121      	str	r1, [r4, #16]
 8006808:	b913      	cbnz	r3, 8006810 <_printf_float+0x1a0>
 800680a:	6822      	ldr	r2, [r4, #0]
 800680c:	07d0      	lsls	r0, r2, #31
 800680e:	d502      	bpl.n	8006816 <_printf_float+0x1a6>
 8006810:	3301      	adds	r3, #1
 8006812:	440b      	add	r3, r1
 8006814:	6123      	str	r3, [r4, #16]
 8006816:	65a1      	str	r1, [r4, #88]	; 0x58
 8006818:	f04f 0900 	mov.w	r9, #0
 800681c:	e7de      	b.n	80067dc <_printf_float+0x16c>
 800681e:	b913      	cbnz	r3, 8006826 <_printf_float+0x1b6>
 8006820:	6822      	ldr	r2, [r4, #0]
 8006822:	07d2      	lsls	r2, r2, #31
 8006824:	d501      	bpl.n	800682a <_printf_float+0x1ba>
 8006826:	3302      	adds	r3, #2
 8006828:	e7f4      	b.n	8006814 <_printf_float+0x1a4>
 800682a:	2301      	movs	r3, #1
 800682c:	e7f2      	b.n	8006814 <_printf_float+0x1a4>
 800682e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006832:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006834:	4299      	cmp	r1, r3
 8006836:	db05      	blt.n	8006844 <_printf_float+0x1d4>
 8006838:	6823      	ldr	r3, [r4, #0]
 800683a:	6121      	str	r1, [r4, #16]
 800683c:	07d8      	lsls	r0, r3, #31
 800683e:	d5ea      	bpl.n	8006816 <_printf_float+0x1a6>
 8006840:	1c4b      	adds	r3, r1, #1
 8006842:	e7e7      	b.n	8006814 <_printf_float+0x1a4>
 8006844:	2900      	cmp	r1, #0
 8006846:	bfd4      	ite	le
 8006848:	f1c1 0202 	rsble	r2, r1, #2
 800684c:	2201      	movgt	r2, #1
 800684e:	4413      	add	r3, r2
 8006850:	e7e0      	b.n	8006814 <_printf_float+0x1a4>
 8006852:	6823      	ldr	r3, [r4, #0]
 8006854:	055a      	lsls	r2, r3, #21
 8006856:	d407      	bmi.n	8006868 <_printf_float+0x1f8>
 8006858:	6923      	ldr	r3, [r4, #16]
 800685a:	4642      	mov	r2, r8
 800685c:	4631      	mov	r1, r6
 800685e:	4628      	mov	r0, r5
 8006860:	47b8      	blx	r7
 8006862:	3001      	adds	r0, #1
 8006864:	d12c      	bne.n	80068c0 <_printf_float+0x250>
 8006866:	e764      	b.n	8006732 <_printf_float+0xc2>
 8006868:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800686c:	f240 80e0 	bls.w	8006a30 <_printf_float+0x3c0>
 8006870:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006874:	2200      	movs	r2, #0
 8006876:	2300      	movs	r3, #0
 8006878:	f7fa f956 	bl	8000b28 <__aeabi_dcmpeq>
 800687c:	2800      	cmp	r0, #0
 800687e:	d034      	beq.n	80068ea <_printf_float+0x27a>
 8006880:	4a37      	ldr	r2, [pc, #220]	; (8006960 <_printf_float+0x2f0>)
 8006882:	2301      	movs	r3, #1
 8006884:	4631      	mov	r1, r6
 8006886:	4628      	mov	r0, r5
 8006888:	47b8      	blx	r7
 800688a:	3001      	adds	r0, #1
 800688c:	f43f af51 	beq.w	8006732 <_printf_float+0xc2>
 8006890:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006894:	429a      	cmp	r2, r3
 8006896:	db02      	blt.n	800689e <_printf_float+0x22e>
 8006898:	6823      	ldr	r3, [r4, #0]
 800689a:	07d8      	lsls	r0, r3, #31
 800689c:	d510      	bpl.n	80068c0 <_printf_float+0x250>
 800689e:	ee18 3a10 	vmov	r3, s16
 80068a2:	4652      	mov	r2, sl
 80068a4:	4631      	mov	r1, r6
 80068a6:	4628      	mov	r0, r5
 80068a8:	47b8      	blx	r7
 80068aa:	3001      	adds	r0, #1
 80068ac:	f43f af41 	beq.w	8006732 <_printf_float+0xc2>
 80068b0:	f04f 0800 	mov.w	r8, #0
 80068b4:	f104 091a 	add.w	r9, r4, #26
 80068b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068ba:	3b01      	subs	r3, #1
 80068bc:	4543      	cmp	r3, r8
 80068be:	dc09      	bgt.n	80068d4 <_printf_float+0x264>
 80068c0:	6823      	ldr	r3, [r4, #0]
 80068c2:	079b      	lsls	r3, r3, #30
 80068c4:	f100 8105 	bmi.w	8006ad2 <_printf_float+0x462>
 80068c8:	68e0      	ldr	r0, [r4, #12]
 80068ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068cc:	4298      	cmp	r0, r3
 80068ce:	bfb8      	it	lt
 80068d0:	4618      	movlt	r0, r3
 80068d2:	e730      	b.n	8006736 <_printf_float+0xc6>
 80068d4:	2301      	movs	r3, #1
 80068d6:	464a      	mov	r2, r9
 80068d8:	4631      	mov	r1, r6
 80068da:	4628      	mov	r0, r5
 80068dc:	47b8      	blx	r7
 80068de:	3001      	adds	r0, #1
 80068e0:	f43f af27 	beq.w	8006732 <_printf_float+0xc2>
 80068e4:	f108 0801 	add.w	r8, r8, #1
 80068e8:	e7e6      	b.n	80068b8 <_printf_float+0x248>
 80068ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	dc39      	bgt.n	8006964 <_printf_float+0x2f4>
 80068f0:	4a1b      	ldr	r2, [pc, #108]	; (8006960 <_printf_float+0x2f0>)
 80068f2:	2301      	movs	r3, #1
 80068f4:	4631      	mov	r1, r6
 80068f6:	4628      	mov	r0, r5
 80068f8:	47b8      	blx	r7
 80068fa:	3001      	adds	r0, #1
 80068fc:	f43f af19 	beq.w	8006732 <_printf_float+0xc2>
 8006900:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006904:	4313      	orrs	r3, r2
 8006906:	d102      	bne.n	800690e <_printf_float+0x29e>
 8006908:	6823      	ldr	r3, [r4, #0]
 800690a:	07d9      	lsls	r1, r3, #31
 800690c:	d5d8      	bpl.n	80068c0 <_printf_float+0x250>
 800690e:	ee18 3a10 	vmov	r3, s16
 8006912:	4652      	mov	r2, sl
 8006914:	4631      	mov	r1, r6
 8006916:	4628      	mov	r0, r5
 8006918:	47b8      	blx	r7
 800691a:	3001      	adds	r0, #1
 800691c:	f43f af09 	beq.w	8006732 <_printf_float+0xc2>
 8006920:	f04f 0900 	mov.w	r9, #0
 8006924:	f104 0a1a 	add.w	sl, r4, #26
 8006928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800692a:	425b      	negs	r3, r3
 800692c:	454b      	cmp	r3, r9
 800692e:	dc01      	bgt.n	8006934 <_printf_float+0x2c4>
 8006930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006932:	e792      	b.n	800685a <_printf_float+0x1ea>
 8006934:	2301      	movs	r3, #1
 8006936:	4652      	mov	r2, sl
 8006938:	4631      	mov	r1, r6
 800693a:	4628      	mov	r0, r5
 800693c:	47b8      	blx	r7
 800693e:	3001      	adds	r0, #1
 8006940:	f43f aef7 	beq.w	8006732 <_printf_float+0xc2>
 8006944:	f109 0901 	add.w	r9, r9, #1
 8006948:	e7ee      	b.n	8006928 <_printf_float+0x2b8>
 800694a:	bf00      	nop
 800694c:	7fefffff 	.word	0x7fefffff
 8006950:	0800ac08 	.word	0x0800ac08
 8006954:	0800ac0c 	.word	0x0800ac0c
 8006958:	0800ac14 	.word	0x0800ac14
 800695c:	0800ac10 	.word	0x0800ac10
 8006960:	0800ac18 	.word	0x0800ac18
 8006964:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006966:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006968:	429a      	cmp	r2, r3
 800696a:	bfa8      	it	ge
 800696c:	461a      	movge	r2, r3
 800696e:	2a00      	cmp	r2, #0
 8006970:	4691      	mov	r9, r2
 8006972:	dc37      	bgt.n	80069e4 <_printf_float+0x374>
 8006974:	f04f 0b00 	mov.w	fp, #0
 8006978:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800697c:	f104 021a 	add.w	r2, r4, #26
 8006980:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006982:	9305      	str	r3, [sp, #20]
 8006984:	eba3 0309 	sub.w	r3, r3, r9
 8006988:	455b      	cmp	r3, fp
 800698a:	dc33      	bgt.n	80069f4 <_printf_float+0x384>
 800698c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006990:	429a      	cmp	r2, r3
 8006992:	db3b      	blt.n	8006a0c <_printf_float+0x39c>
 8006994:	6823      	ldr	r3, [r4, #0]
 8006996:	07da      	lsls	r2, r3, #31
 8006998:	d438      	bmi.n	8006a0c <_printf_float+0x39c>
 800699a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800699c:	9a05      	ldr	r2, [sp, #20]
 800699e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069a0:	1a9a      	subs	r2, r3, r2
 80069a2:	eba3 0901 	sub.w	r9, r3, r1
 80069a6:	4591      	cmp	r9, r2
 80069a8:	bfa8      	it	ge
 80069aa:	4691      	movge	r9, r2
 80069ac:	f1b9 0f00 	cmp.w	r9, #0
 80069b0:	dc35      	bgt.n	8006a1e <_printf_float+0x3ae>
 80069b2:	f04f 0800 	mov.w	r8, #0
 80069b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069ba:	f104 0a1a 	add.w	sl, r4, #26
 80069be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069c2:	1a9b      	subs	r3, r3, r2
 80069c4:	eba3 0309 	sub.w	r3, r3, r9
 80069c8:	4543      	cmp	r3, r8
 80069ca:	f77f af79 	ble.w	80068c0 <_printf_float+0x250>
 80069ce:	2301      	movs	r3, #1
 80069d0:	4652      	mov	r2, sl
 80069d2:	4631      	mov	r1, r6
 80069d4:	4628      	mov	r0, r5
 80069d6:	47b8      	blx	r7
 80069d8:	3001      	adds	r0, #1
 80069da:	f43f aeaa 	beq.w	8006732 <_printf_float+0xc2>
 80069de:	f108 0801 	add.w	r8, r8, #1
 80069e2:	e7ec      	b.n	80069be <_printf_float+0x34e>
 80069e4:	4613      	mov	r3, r2
 80069e6:	4631      	mov	r1, r6
 80069e8:	4642      	mov	r2, r8
 80069ea:	4628      	mov	r0, r5
 80069ec:	47b8      	blx	r7
 80069ee:	3001      	adds	r0, #1
 80069f0:	d1c0      	bne.n	8006974 <_printf_float+0x304>
 80069f2:	e69e      	b.n	8006732 <_printf_float+0xc2>
 80069f4:	2301      	movs	r3, #1
 80069f6:	4631      	mov	r1, r6
 80069f8:	4628      	mov	r0, r5
 80069fa:	9205      	str	r2, [sp, #20]
 80069fc:	47b8      	blx	r7
 80069fe:	3001      	adds	r0, #1
 8006a00:	f43f ae97 	beq.w	8006732 <_printf_float+0xc2>
 8006a04:	9a05      	ldr	r2, [sp, #20]
 8006a06:	f10b 0b01 	add.w	fp, fp, #1
 8006a0a:	e7b9      	b.n	8006980 <_printf_float+0x310>
 8006a0c:	ee18 3a10 	vmov	r3, s16
 8006a10:	4652      	mov	r2, sl
 8006a12:	4631      	mov	r1, r6
 8006a14:	4628      	mov	r0, r5
 8006a16:	47b8      	blx	r7
 8006a18:	3001      	adds	r0, #1
 8006a1a:	d1be      	bne.n	800699a <_printf_float+0x32a>
 8006a1c:	e689      	b.n	8006732 <_printf_float+0xc2>
 8006a1e:	9a05      	ldr	r2, [sp, #20]
 8006a20:	464b      	mov	r3, r9
 8006a22:	4442      	add	r2, r8
 8006a24:	4631      	mov	r1, r6
 8006a26:	4628      	mov	r0, r5
 8006a28:	47b8      	blx	r7
 8006a2a:	3001      	adds	r0, #1
 8006a2c:	d1c1      	bne.n	80069b2 <_printf_float+0x342>
 8006a2e:	e680      	b.n	8006732 <_printf_float+0xc2>
 8006a30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a32:	2a01      	cmp	r2, #1
 8006a34:	dc01      	bgt.n	8006a3a <_printf_float+0x3ca>
 8006a36:	07db      	lsls	r3, r3, #31
 8006a38:	d538      	bpl.n	8006aac <_printf_float+0x43c>
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	4642      	mov	r2, r8
 8006a3e:	4631      	mov	r1, r6
 8006a40:	4628      	mov	r0, r5
 8006a42:	47b8      	blx	r7
 8006a44:	3001      	adds	r0, #1
 8006a46:	f43f ae74 	beq.w	8006732 <_printf_float+0xc2>
 8006a4a:	ee18 3a10 	vmov	r3, s16
 8006a4e:	4652      	mov	r2, sl
 8006a50:	4631      	mov	r1, r6
 8006a52:	4628      	mov	r0, r5
 8006a54:	47b8      	blx	r7
 8006a56:	3001      	adds	r0, #1
 8006a58:	f43f ae6b 	beq.w	8006732 <_printf_float+0xc2>
 8006a5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a60:	2200      	movs	r2, #0
 8006a62:	2300      	movs	r3, #0
 8006a64:	f7fa f860 	bl	8000b28 <__aeabi_dcmpeq>
 8006a68:	b9d8      	cbnz	r0, 8006aa2 <_printf_float+0x432>
 8006a6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a6c:	f108 0201 	add.w	r2, r8, #1
 8006a70:	3b01      	subs	r3, #1
 8006a72:	4631      	mov	r1, r6
 8006a74:	4628      	mov	r0, r5
 8006a76:	47b8      	blx	r7
 8006a78:	3001      	adds	r0, #1
 8006a7a:	d10e      	bne.n	8006a9a <_printf_float+0x42a>
 8006a7c:	e659      	b.n	8006732 <_printf_float+0xc2>
 8006a7e:	2301      	movs	r3, #1
 8006a80:	4652      	mov	r2, sl
 8006a82:	4631      	mov	r1, r6
 8006a84:	4628      	mov	r0, r5
 8006a86:	47b8      	blx	r7
 8006a88:	3001      	adds	r0, #1
 8006a8a:	f43f ae52 	beq.w	8006732 <_printf_float+0xc2>
 8006a8e:	f108 0801 	add.w	r8, r8, #1
 8006a92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a94:	3b01      	subs	r3, #1
 8006a96:	4543      	cmp	r3, r8
 8006a98:	dcf1      	bgt.n	8006a7e <_printf_float+0x40e>
 8006a9a:	464b      	mov	r3, r9
 8006a9c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006aa0:	e6dc      	b.n	800685c <_printf_float+0x1ec>
 8006aa2:	f04f 0800 	mov.w	r8, #0
 8006aa6:	f104 0a1a 	add.w	sl, r4, #26
 8006aaa:	e7f2      	b.n	8006a92 <_printf_float+0x422>
 8006aac:	2301      	movs	r3, #1
 8006aae:	4642      	mov	r2, r8
 8006ab0:	e7df      	b.n	8006a72 <_printf_float+0x402>
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	464a      	mov	r2, r9
 8006ab6:	4631      	mov	r1, r6
 8006ab8:	4628      	mov	r0, r5
 8006aba:	47b8      	blx	r7
 8006abc:	3001      	adds	r0, #1
 8006abe:	f43f ae38 	beq.w	8006732 <_printf_float+0xc2>
 8006ac2:	f108 0801 	add.w	r8, r8, #1
 8006ac6:	68e3      	ldr	r3, [r4, #12]
 8006ac8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006aca:	1a5b      	subs	r3, r3, r1
 8006acc:	4543      	cmp	r3, r8
 8006ace:	dcf0      	bgt.n	8006ab2 <_printf_float+0x442>
 8006ad0:	e6fa      	b.n	80068c8 <_printf_float+0x258>
 8006ad2:	f04f 0800 	mov.w	r8, #0
 8006ad6:	f104 0919 	add.w	r9, r4, #25
 8006ada:	e7f4      	b.n	8006ac6 <_printf_float+0x456>

08006adc <_printf_common>:
 8006adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ae0:	4616      	mov	r6, r2
 8006ae2:	4699      	mov	r9, r3
 8006ae4:	688a      	ldr	r2, [r1, #8]
 8006ae6:	690b      	ldr	r3, [r1, #16]
 8006ae8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006aec:	4293      	cmp	r3, r2
 8006aee:	bfb8      	it	lt
 8006af0:	4613      	movlt	r3, r2
 8006af2:	6033      	str	r3, [r6, #0]
 8006af4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006af8:	4607      	mov	r7, r0
 8006afa:	460c      	mov	r4, r1
 8006afc:	b10a      	cbz	r2, 8006b02 <_printf_common+0x26>
 8006afe:	3301      	adds	r3, #1
 8006b00:	6033      	str	r3, [r6, #0]
 8006b02:	6823      	ldr	r3, [r4, #0]
 8006b04:	0699      	lsls	r1, r3, #26
 8006b06:	bf42      	ittt	mi
 8006b08:	6833      	ldrmi	r3, [r6, #0]
 8006b0a:	3302      	addmi	r3, #2
 8006b0c:	6033      	strmi	r3, [r6, #0]
 8006b0e:	6825      	ldr	r5, [r4, #0]
 8006b10:	f015 0506 	ands.w	r5, r5, #6
 8006b14:	d106      	bne.n	8006b24 <_printf_common+0x48>
 8006b16:	f104 0a19 	add.w	sl, r4, #25
 8006b1a:	68e3      	ldr	r3, [r4, #12]
 8006b1c:	6832      	ldr	r2, [r6, #0]
 8006b1e:	1a9b      	subs	r3, r3, r2
 8006b20:	42ab      	cmp	r3, r5
 8006b22:	dc26      	bgt.n	8006b72 <_printf_common+0x96>
 8006b24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b28:	1e13      	subs	r3, r2, #0
 8006b2a:	6822      	ldr	r2, [r4, #0]
 8006b2c:	bf18      	it	ne
 8006b2e:	2301      	movne	r3, #1
 8006b30:	0692      	lsls	r2, r2, #26
 8006b32:	d42b      	bmi.n	8006b8c <_printf_common+0xb0>
 8006b34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b38:	4649      	mov	r1, r9
 8006b3a:	4638      	mov	r0, r7
 8006b3c:	47c0      	blx	r8
 8006b3e:	3001      	adds	r0, #1
 8006b40:	d01e      	beq.n	8006b80 <_printf_common+0xa4>
 8006b42:	6823      	ldr	r3, [r4, #0]
 8006b44:	68e5      	ldr	r5, [r4, #12]
 8006b46:	6832      	ldr	r2, [r6, #0]
 8006b48:	f003 0306 	and.w	r3, r3, #6
 8006b4c:	2b04      	cmp	r3, #4
 8006b4e:	bf08      	it	eq
 8006b50:	1aad      	subeq	r5, r5, r2
 8006b52:	68a3      	ldr	r3, [r4, #8]
 8006b54:	6922      	ldr	r2, [r4, #16]
 8006b56:	bf0c      	ite	eq
 8006b58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b5c:	2500      	movne	r5, #0
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	bfc4      	itt	gt
 8006b62:	1a9b      	subgt	r3, r3, r2
 8006b64:	18ed      	addgt	r5, r5, r3
 8006b66:	2600      	movs	r6, #0
 8006b68:	341a      	adds	r4, #26
 8006b6a:	42b5      	cmp	r5, r6
 8006b6c:	d11a      	bne.n	8006ba4 <_printf_common+0xc8>
 8006b6e:	2000      	movs	r0, #0
 8006b70:	e008      	b.n	8006b84 <_printf_common+0xa8>
 8006b72:	2301      	movs	r3, #1
 8006b74:	4652      	mov	r2, sl
 8006b76:	4649      	mov	r1, r9
 8006b78:	4638      	mov	r0, r7
 8006b7a:	47c0      	blx	r8
 8006b7c:	3001      	adds	r0, #1
 8006b7e:	d103      	bne.n	8006b88 <_printf_common+0xac>
 8006b80:	f04f 30ff 	mov.w	r0, #4294967295
 8006b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b88:	3501      	adds	r5, #1
 8006b8a:	e7c6      	b.n	8006b1a <_printf_common+0x3e>
 8006b8c:	18e1      	adds	r1, r4, r3
 8006b8e:	1c5a      	adds	r2, r3, #1
 8006b90:	2030      	movs	r0, #48	; 0x30
 8006b92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b96:	4422      	add	r2, r4
 8006b98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ba0:	3302      	adds	r3, #2
 8006ba2:	e7c7      	b.n	8006b34 <_printf_common+0x58>
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	4622      	mov	r2, r4
 8006ba8:	4649      	mov	r1, r9
 8006baa:	4638      	mov	r0, r7
 8006bac:	47c0      	blx	r8
 8006bae:	3001      	adds	r0, #1
 8006bb0:	d0e6      	beq.n	8006b80 <_printf_common+0xa4>
 8006bb2:	3601      	adds	r6, #1
 8006bb4:	e7d9      	b.n	8006b6a <_printf_common+0x8e>
	...

08006bb8 <_printf_i>:
 8006bb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bbc:	7e0f      	ldrb	r7, [r1, #24]
 8006bbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006bc0:	2f78      	cmp	r7, #120	; 0x78
 8006bc2:	4691      	mov	r9, r2
 8006bc4:	4680      	mov	r8, r0
 8006bc6:	460c      	mov	r4, r1
 8006bc8:	469a      	mov	sl, r3
 8006bca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006bce:	d807      	bhi.n	8006be0 <_printf_i+0x28>
 8006bd0:	2f62      	cmp	r7, #98	; 0x62
 8006bd2:	d80a      	bhi.n	8006bea <_printf_i+0x32>
 8006bd4:	2f00      	cmp	r7, #0
 8006bd6:	f000 80d8 	beq.w	8006d8a <_printf_i+0x1d2>
 8006bda:	2f58      	cmp	r7, #88	; 0x58
 8006bdc:	f000 80a3 	beq.w	8006d26 <_printf_i+0x16e>
 8006be0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006be4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006be8:	e03a      	b.n	8006c60 <_printf_i+0xa8>
 8006bea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006bee:	2b15      	cmp	r3, #21
 8006bf0:	d8f6      	bhi.n	8006be0 <_printf_i+0x28>
 8006bf2:	a101      	add	r1, pc, #4	; (adr r1, 8006bf8 <_printf_i+0x40>)
 8006bf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006bf8:	08006c51 	.word	0x08006c51
 8006bfc:	08006c65 	.word	0x08006c65
 8006c00:	08006be1 	.word	0x08006be1
 8006c04:	08006be1 	.word	0x08006be1
 8006c08:	08006be1 	.word	0x08006be1
 8006c0c:	08006be1 	.word	0x08006be1
 8006c10:	08006c65 	.word	0x08006c65
 8006c14:	08006be1 	.word	0x08006be1
 8006c18:	08006be1 	.word	0x08006be1
 8006c1c:	08006be1 	.word	0x08006be1
 8006c20:	08006be1 	.word	0x08006be1
 8006c24:	08006d71 	.word	0x08006d71
 8006c28:	08006c95 	.word	0x08006c95
 8006c2c:	08006d53 	.word	0x08006d53
 8006c30:	08006be1 	.word	0x08006be1
 8006c34:	08006be1 	.word	0x08006be1
 8006c38:	08006d93 	.word	0x08006d93
 8006c3c:	08006be1 	.word	0x08006be1
 8006c40:	08006c95 	.word	0x08006c95
 8006c44:	08006be1 	.word	0x08006be1
 8006c48:	08006be1 	.word	0x08006be1
 8006c4c:	08006d5b 	.word	0x08006d5b
 8006c50:	682b      	ldr	r3, [r5, #0]
 8006c52:	1d1a      	adds	r2, r3, #4
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	602a      	str	r2, [r5, #0]
 8006c58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c60:	2301      	movs	r3, #1
 8006c62:	e0a3      	b.n	8006dac <_printf_i+0x1f4>
 8006c64:	6820      	ldr	r0, [r4, #0]
 8006c66:	6829      	ldr	r1, [r5, #0]
 8006c68:	0606      	lsls	r6, r0, #24
 8006c6a:	f101 0304 	add.w	r3, r1, #4
 8006c6e:	d50a      	bpl.n	8006c86 <_printf_i+0xce>
 8006c70:	680e      	ldr	r6, [r1, #0]
 8006c72:	602b      	str	r3, [r5, #0]
 8006c74:	2e00      	cmp	r6, #0
 8006c76:	da03      	bge.n	8006c80 <_printf_i+0xc8>
 8006c78:	232d      	movs	r3, #45	; 0x2d
 8006c7a:	4276      	negs	r6, r6
 8006c7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c80:	485e      	ldr	r0, [pc, #376]	; (8006dfc <_printf_i+0x244>)
 8006c82:	230a      	movs	r3, #10
 8006c84:	e019      	b.n	8006cba <_printf_i+0x102>
 8006c86:	680e      	ldr	r6, [r1, #0]
 8006c88:	602b      	str	r3, [r5, #0]
 8006c8a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c8e:	bf18      	it	ne
 8006c90:	b236      	sxthne	r6, r6
 8006c92:	e7ef      	b.n	8006c74 <_printf_i+0xbc>
 8006c94:	682b      	ldr	r3, [r5, #0]
 8006c96:	6820      	ldr	r0, [r4, #0]
 8006c98:	1d19      	adds	r1, r3, #4
 8006c9a:	6029      	str	r1, [r5, #0]
 8006c9c:	0601      	lsls	r1, r0, #24
 8006c9e:	d501      	bpl.n	8006ca4 <_printf_i+0xec>
 8006ca0:	681e      	ldr	r6, [r3, #0]
 8006ca2:	e002      	b.n	8006caa <_printf_i+0xf2>
 8006ca4:	0646      	lsls	r6, r0, #25
 8006ca6:	d5fb      	bpl.n	8006ca0 <_printf_i+0xe8>
 8006ca8:	881e      	ldrh	r6, [r3, #0]
 8006caa:	4854      	ldr	r0, [pc, #336]	; (8006dfc <_printf_i+0x244>)
 8006cac:	2f6f      	cmp	r7, #111	; 0x6f
 8006cae:	bf0c      	ite	eq
 8006cb0:	2308      	moveq	r3, #8
 8006cb2:	230a      	movne	r3, #10
 8006cb4:	2100      	movs	r1, #0
 8006cb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006cba:	6865      	ldr	r5, [r4, #4]
 8006cbc:	60a5      	str	r5, [r4, #8]
 8006cbe:	2d00      	cmp	r5, #0
 8006cc0:	bfa2      	ittt	ge
 8006cc2:	6821      	ldrge	r1, [r4, #0]
 8006cc4:	f021 0104 	bicge.w	r1, r1, #4
 8006cc8:	6021      	strge	r1, [r4, #0]
 8006cca:	b90e      	cbnz	r6, 8006cd0 <_printf_i+0x118>
 8006ccc:	2d00      	cmp	r5, #0
 8006cce:	d04d      	beq.n	8006d6c <_printf_i+0x1b4>
 8006cd0:	4615      	mov	r5, r2
 8006cd2:	fbb6 f1f3 	udiv	r1, r6, r3
 8006cd6:	fb03 6711 	mls	r7, r3, r1, r6
 8006cda:	5dc7      	ldrb	r7, [r0, r7]
 8006cdc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ce0:	4637      	mov	r7, r6
 8006ce2:	42bb      	cmp	r3, r7
 8006ce4:	460e      	mov	r6, r1
 8006ce6:	d9f4      	bls.n	8006cd2 <_printf_i+0x11a>
 8006ce8:	2b08      	cmp	r3, #8
 8006cea:	d10b      	bne.n	8006d04 <_printf_i+0x14c>
 8006cec:	6823      	ldr	r3, [r4, #0]
 8006cee:	07de      	lsls	r6, r3, #31
 8006cf0:	d508      	bpl.n	8006d04 <_printf_i+0x14c>
 8006cf2:	6923      	ldr	r3, [r4, #16]
 8006cf4:	6861      	ldr	r1, [r4, #4]
 8006cf6:	4299      	cmp	r1, r3
 8006cf8:	bfde      	ittt	le
 8006cfa:	2330      	movle	r3, #48	; 0x30
 8006cfc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d00:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006d04:	1b52      	subs	r2, r2, r5
 8006d06:	6122      	str	r2, [r4, #16]
 8006d08:	f8cd a000 	str.w	sl, [sp]
 8006d0c:	464b      	mov	r3, r9
 8006d0e:	aa03      	add	r2, sp, #12
 8006d10:	4621      	mov	r1, r4
 8006d12:	4640      	mov	r0, r8
 8006d14:	f7ff fee2 	bl	8006adc <_printf_common>
 8006d18:	3001      	adds	r0, #1
 8006d1a:	d14c      	bne.n	8006db6 <_printf_i+0x1fe>
 8006d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d20:	b004      	add	sp, #16
 8006d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d26:	4835      	ldr	r0, [pc, #212]	; (8006dfc <_printf_i+0x244>)
 8006d28:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006d2c:	6829      	ldr	r1, [r5, #0]
 8006d2e:	6823      	ldr	r3, [r4, #0]
 8006d30:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d34:	6029      	str	r1, [r5, #0]
 8006d36:	061d      	lsls	r5, r3, #24
 8006d38:	d514      	bpl.n	8006d64 <_printf_i+0x1ac>
 8006d3a:	07df      	lsls	r7, r3, #31
 8006d3c:	bf44      	itt	mi
 8006d3e:	f043 0320 	orrmi.w	r3, r3, #32
 8006d42:	6023      	strmi	r3, [r4, #0]
 8006d44:	b91e      	cbnz	r6, 8006d4e <_printf_i+0x196>
 8006d46:	6823      	ldr	r3, [r4, #0]
 8006d48:	f023 0320 	bic.w	r3, r3, #32
 8006d4c:	6023      	str	r3, [r4, #0]
 8006d4e:	2310      	movs	r3, #16
 8006d50:	e7b0      	b.n	8006cb4 <_printf_i+0xfc>
 8006d52:	6823      	ldr	r3, [r4, #0]
 8006d54:	f043 0320 	orr.w	r3, r3, #32
 8006d58:	6023      	str	r3, [r4, #0]
 8006d5a:	2378      	movs	r3, #120	; 0x78
 8006d5c:	4828      	ldr	r0, [pc, #160]	; (8006e00 <_printf_i+0x248>)
 8006d5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d62:	e7e3      	b.n	8006d2c <_printf_i+0x174>
 8006d64:	0659      	lsls	r1, r3, #25
 8006d66:	bf48      	it	mi
 8006d68:	b2b6      	uxthmi	r6, r6
 8006d6a:	e7e6      	b.n	8006d3a <_printf_i+0x182>
 8006d6c:	4615      	mov	r5, r2
 8006d6e:	e7bb      	b.n	8006ce8 <_printf_i+0x130>
 8006d70:	682b      	ldr	r3, [r5, #0]
 8006d72:	6826      	ldr	r6, [r4, #0]
 8006d74:	6961      	ldr	r1, [r4, #20]
 8006d76:	1d18      	adds	r0, r3, #4
 8006d78:	6028      	str	r0, [r5, #0]
 8006d7a:	0635      	lsls	r5, r6, #24
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	d501      	bpl.n	8006d84 <_printf_i+0x1cc>
 8006d80:	6019      	str	r1, [r3, #0]
 8006d82:	e002      	b.n	8006d8a <_printf_i+0x1d2>
 8006d84:	0670      	lsls	r0, r6, #25
 8006d86:	d5fb      	bpl.n	8006d80 <_printf_i+0x1c8>
 8006d88:	8019      	strh	r1, [r3, #0]
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	6123      	str	r3, [r4, #16]
 8006d8e:	4615      	mov	r5, r2
 8006d90:	e7ba      	b.n	8006d08 <_printf_i+0x150>
 8006d92:	682b      	ldr	r3, [r5, #0]
 8006d94:	1d1a      	adds	r2, r3, #4
 8006d96:	602a      	str	r2, [r5, #0]
 8006d98:	681d      	ldr	r5, [r3, #0]
 8006d9a:	6862      	ldr	r2, [r4, #4]
 8006d9c:	2100      	movs	r1, #0
 8006d9e:	4628      	mov	r0, r5
 8006da0:	f7f9 fa4e 	bl	8000240 <memchr>
 8006da4:	b108      	cbz	r0, 8006daa <_printf_i+0x1f2>
 8006da6:	1b40      	subs	r0, r0, r5
 8006da8:	6060      	str	r0, [r4, #4]
 8006daa:	6863      	ldr	r3, [r4, #4]
 8006dac:	6123      	str	r3, [r4, #16]
 8006dae:	2300      	movs	r3, #0
 8006db0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006db4:	e7a8      	b.n	8006d08 <_printf_i+0x150>
 8006db6:	6923      	ldr	r3, [r4, #16]
 8006db8:	462a      	mov	r2, r5
 8006dba:	4649      	mov	r1, r9
 8006dbc:	4640      	mov	r0, r8
 8006dbe:	47d0      	blx	sl
 8006dc0:	3001      	adds	r0, #1
 8006dc2:	d0ab      	beq.n	8006d1c <_printf_i+0x164>
 8006dc4:	6823      	ldr	r3, [r4, #0]
 8006dc6:	079b      	lsls	r3, r3, #30
 8006dc8:	d413      	bmi.n	8006df2 <_printf_i+0x23a>
 8006dca:	68e0      	ldr	r0, [r4, #12]
 8006dcc:	9b03      	ldr	r3, [sp, #12]
 8006dce:	4298      	cmp	r0, r3
 8006dd0:	bfb8      	it	lt
 8006dd2:	4618      	movlt	r0, r3
 8006dd4:	e7a4      	b.n	8006d20 <_printf_i+0x168>
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	4632      	mov	r2, r6
 8006dda:	4649      	mov	r1, r9
 8006ddc:	4640      	mov	r0, r8
 8006dde:	47d0      	blx	sl
 8006de0:	3001      	adds	r0, #1
 8006de2:	d09b      	beq.n	8006d1c <_printf_i+0x164>
 8006de4:	3501      	adds	r5, #1
 8006de6:	68e3      	ldr	r3, [r4, #12]
 8006de8:	9903      	ldr	r1, [sp, #12]
 8006dea:	1a5b      	subs	r3, r3, r1
 8006dec:	42ab      	cmp	r3, r5
 8006dee:	dcf2      	bgt.n	8006dd6 <_printf_i+0x21e>
 8006df0:	e7eb      	b.n	8006dca <_printf_i+0x212>
 8006df2:	2500      	movs	r5, #0
 8006df4:	f104 0619 	add.w	r6, r4, #25
 8006df8:	e7f5      	b.n	8006de6 <_printf_i+0x22e>
 8006dfa:	bf00      	nop
 8006dfc:	0800ac1a 	.word	0x0800ac1a
 8006e00:	0800ac2b 	.word	0x0800ac2b

08006e04 <siprintf>:
 8006e04:	b40e      	push	{r1, r2, r3}
 8006e06:	b500      	push	{lr}
 8006e08:	b09c      	sub	sp, #112	; 0x70
 8006e0a:	ab1d      	add	r3, sp, #116	; 0x74
 8006e0c:	9002      	str	r0, [sp, #8]
 8006e0e:	9006      	str	r0, [sp, #24]
 8006e10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e14:	4809      	ldr	r0, [pc, #36]	; (8006e3c <siprintf+0x38>)
 8006e16:	9107      	str	r1, [sp, #28]
 8006e18:	9104      	str	r1, [sp, #16]
 8006e1a:	4909      	ldr	r1, [pc, #36]	; (8006e40 <siprintf+0x3c>)
 8006e1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e20:	9105      	str	r1, [sp, #20]
 8006e22:	6800      	ldr	r0, [r0, #0]
 8006e24:	9301      	str	r3, [sp, #4]
 8006e26:	a902      	add	r1, sp, #8
 8006e28:	f002 fef2 	bl	8009c10 <_svfiprintf_r>
 8006e2c:	9b02      	ldr	r3, [sp, #8]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	701a      	strb	r2, [r3, #0]
 8006e32:	b01c      	add	sp, #112	; 0x70
 8006e34:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e38:	b003      	add	sp, #12
 8006e3a:	4770      	bx	lr
 8006e3c:	20000060 	.word	0x20000060
 8006e40:	ffff0208 	.word	0xffff0208

08006e44 <sulp>:
 8006e44:	b570      	push	{r4, r5, r6, lr}
 8006e46:	4604      	mov	r4, r0
 8006e48:	460d      	mov	r5, r1
 8006e4a:	ec45 4b10 	vmov	d0, r4, r5
 8006e4e:	4616      	mov	r6, r2
 8006e50:	f002 fc3c 	bl	80096cc <__ulp>
 8006e54:	ec51 0b10 	vmov	r0, r1, d0
 8006e58:	b17e      	cbz	r6, 8006e7a <sulp+0x36>
 8006e5a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006e5e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	dd09      	ble.n	8006e7a <sulp+0x36>
 8006e66:	051b      	lsls	r3, r3, #20
 8006e68:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006e6c:	2400      	movs	r4, #0
 8006e6e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006e72:	4622      	mov	r2, r4
 8006e74:	462b      	mov	r3, r5
 8006e76:	f7f9 fbef 	bl	8000658 <__aeabi_dmul>
 8006e7a:	bd70      	pop	{r4, r5, r6, pc}
 8006e7c:	0000      	movs	r0, r0
	...

08006e80 <_strtod_l>:
 8006e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e84:	ed2d 8b02 	vpush	{d8}
 8006e88:	b09d      	sub	sp, #116	; 0x74
 8006e8a:	461f      	mov	r7, r3
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	9318      	str	r3, [sp, #96]	; 0x60
 8006e90:	4ba2      	ldr	r3, [pc, #648]	; (800711c <_strtod_l+0x29c>)
 8006e92:	9213      	str	r2, [sp, #76]	; 0x4c
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	9305      	str	r3, [sp, #20]
 8006e98:	4604      	mov	r4, r0
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	4688      	mov	r8, r1
 8006e9e:	f7f9 f9c1 	bl	8000224 <strlen>
 8006ea2:	f04f 0a00 	mov.w	sl, #0
 8006ea6:	4605      	mov	r5, r0
 8006ea8:	f04f 0b00 	mov.w	fp, #0
 8006eac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006eb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006eb2:	781a      	ldrb	r2, [r3, #0]
 8006eb4:	2a2b      	cmp	r2, #43	; 0x2b
 8006eb6:	d04e      	beq.n	8006f56 <_strtod_l+0xd6>
 8006eb8:	d83b      	bhi.n	8006f32 <_strtod_l+0xb2>
 8006eba:	2a0d      	cmp	r2, #13
 8006ebc:	d834      	bhi.n	8006f28 <_strtod_l+0xa8>
 8006ebe:	2a08      	cmp	r2, #8
 8006ec0:	d834      	bhi.n	8006f2c <_strtod_l+0xac>
 8006ec2:	2a00      	cmp	r2, #0
 8006ec4:	d03e      	beq.n	8006f44 <_strtod_l+0xc4>
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	930a      	str	r3, [sp, #40]	; 0x28
 8006eca:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006ecc:	7833      	ldrb	r3, [r6, #0]
 8006ece:	2b30      	cmp	r3, #48	; 0x30
 8006ed0:	f040 80b0 	bne.w	8007034 <_strtod_l+0x1b4>
 8006ed4:	7873      	ldrb	r3, [r6, #1]
 8006ed6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006eda:	2b58      	cmp	r3, #88	; 0x58
 8006edc:	d168      	bne.n	8006fb0 <_strtod_l+0x130>
 8006ede:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ee0:	9301      	str	r3, [sp, #4]
 8006ee2:	ab18      	add	r3, sp, #96	; 0x60
 8006ee4:	9702      	str	r7, [sp, #8]
 8006ee6:	9300      	str	r3, [sp, #0]
 8006ee8:	4a8d      	ldr	r2, [pc, #564]	; (8007120 <_strtod_l+0x2a0>)
 8006eea:	ab19      	add	r3, sp, #100	; 0x64
 8006eec:	a917      	add	r1, sp, #92	; 0x5c
 8006eee:	4620      	mov	r0, r4
 8006ef0:	f001 fd46 	bl	8008980 <__gethex>
 8006ef4:	f010 0707 	ands.w	r7, r0, #7
 8006ef8:	4605      	mov	r5, r0
 8006efa:	d005      	beq.n	8006f08 <_strtod_l+0x88>
 8006efc:	2f06      	cmp	r7, #6
 8006efe:	d12c      	bne.n	8006f5a <_strtod_l+0xda>
 8006f00:	3601      	adds	r6, #1
 8006f02:	2300      	movs	r3, #0
 8006f04:	9617      	str	r6, [sp, #92]	; 0x5c
 8006f06:	930a      	str	r3, [sp, #40]	; 0x28
 8006f08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	f040 8590 	bne.w	8007a30 <_strtod_l+0xbb0>
 8006f10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f12:	b1eb      	cbz	r3, 8006f50 <_strtod_l+0xd0>
 8006f14:	4652      	mov	r2, sl
 8006f16:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006f1a:	ec43 2b10 	vmov	d0, r2, r3
 8006f1e:	b01d      	add	sp, #116	; 0x74
 8006f20:	ecbd 8b02 	vpop	{d8}
 8006f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f28:	2a20      	cmp	r2, #32
 8006f2a:	d1cc      	bne.n	8006ec6 <_strtod_l+0x46>
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	9317      	str	r3, [sp, #92]	; 0x5c
 8006f30:	e7be      	b.n	8006eb0 <_strtod_l+0x30>
 8006f32:	2a2d      	cmp	r2, #45	; 0x2d
 8006f34:	d1c7      	bne.n	8006ec6 <_strtod_l+0x46>
 8006f36:	2201      	movs	r2, #1
 8006f38:	920a      	str	r2, [sp, #40]	; 0x28
 8006f3a:	1c5a      	adds	r2, r3, #1
 8006f3c:	9217      	str	r2, [sp, #92]	; 0x5c
 8006f3e:	785b      	ldrb	r3, [r3, #1]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d1c2      	bne.n	8006eca <_strtod_l+0x4a>
 8006f44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006f46:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	f040 856e 	bne.w	8007a2c <_strtod_l+0xbac>
 8006f50:	4652      	mov	r2, sl
 8006f52:	465b      	mov	r3, fp
 8006f54:	e7e1      	b.n	8006f1a <_strtod_l+0x9a>
 8006f56:	2200      	movs	r2, #0
 8006f58:	e7ee      	b.n	8006f38 <_strtod_l+0xb8>
 8006f5a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006f5c:	b13a      	cbz	r2, 8006f6e <_strtod_l+0xee>
 8006f5e:	2135      	movs	r1, #53	; 0x35
 8006f60:	a81a      	add	r0, sp, #104	; 0x68
 8006f62:	f002 fcbe 	bl	80098e2 <__copybits>
 8006f66:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006f68:	4620      	mov	r0, r4
 8006f6a:	f002 f87d 	bl	8009068 <_Bfree>
 8006f6e:	3f01      	subs	r7, #1
 8006f70:	2f04      	cmp	r7, #4
 8006f72:	d806      	bhi.n	8006f82 <_strtod_l+0x102>
 8006f74:	e8df f007 	tbb	[pc, r7]
 8006f78:	1714030a 	.word	0x1714030a
 8006f7c:	0a          	.byte	0x0a
 8006f7d:	00          	.byte	0x00
 8006f7e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006f82:	0728      	lsls	r0, r5, #28
 8006f84:	d5c0      	bpl.n	8006f08 <_strtod_l+0x88>
 8006f86:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006f8a:	e7bd      	b.n	8006f08 <_strtod_l+0x88>
 8006f8c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006f90:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006f92:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006f96:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006f9a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006f9e:	e7f0      	b.n	8006f82 <_strtod_l+0x102>
 8006fa0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007124 <_strtod_l+0x2a4>
 8006fa4:	e7ed      	b.n	8006f82 <_strtod_l+0x102>
 8006fa6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006faa:	f04f 3aff 	mov.w	sl, #4294967295
 8006fae:	e7e8      	b.n	8006f82 <_strtod_l+0x102>
 8006fb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006fb2:	1c5a      	adds	r2, r3, #1
 8006fb4:	9217      	str	r2, [sp, #92]	; 0x5c
 8006fb6:	785b      	ldrb	r3, [r3, #1]
 8006fb8:	2b30      	cmp	r3, #48	; 0x30
 8006fba:	d0f9      	beq.n	8006fb0 <_strtod_l+0x130>
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d0a3      	beq.n	8006f08 <_strtod_l+0x88>
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	f04f 0900 	mov.w	r9, #0
 8006fc6:	9304      	str	r3, [sp, #16]
 8006fc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006fca:	9308      	str	r3, [sp, #32]
 8006fcc:	f8cd 901c 	str.w	r9, [sp, #28]
 8006fd0:	464f      	mov	r7, r9
 8006fd2:	220a      	movs	r2, #10
 8006fd4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006fd6:	7806      	ldrb	r6, [r0, #0]
 8006fd8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006fdc:	b2d9      	uxtb	r1, r3
 8006fde:	2909      	cmp	r1, #9
 8006fe0:	d92a      	bls.n	8007038 <_strtod_l+0x1b8>
 8006fe2:	9905      	ldr	r1, [sp, #20]
 8006fe4:	462a      	mov	r2, r5
 8006fe6:	f003 f887 	bl	800a0f8 <strncmp>
 8006fea:	b398      	cbz	r0, 8007054 <_strtod_l+0x1d4>
 8006fec:	2000      	movs	r0, #0
 8006fee:	4632      	mov	r2, r6
 8006ff0:	463d      	mov	r5, r7
 8006ff2:	9005      	str	r0, [sp, #20]
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2a65      	cmp	r2, #101	; 0x65
 8006ff8:	d001      	beq.n	8006ffe <_strtod_l+0x17e>
 8006ffa:	2a45      	cmp	r2, #69	; 0x45
 8006ffc:	d118      	bne.n	8007030 <_strtod_l+0x1b0>
 8006ffe:	b91d      	cbnz	r5, 8007008 <_strtod_l+0x188>
 8007000:	9a04      	ldr	r2, [sp, #16]
 8007002:	4302      	orrs	r2, r0
 8007004:	d09e      	beq.n	8006f44 <_strtod_l+0xc4>
 8007006:	2500      	movs	r5, #0
 8007008:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800700c:	f108 0201 	add.w	r2, r8, #1
 8007010:	9217      	str	r2, [sp, #92]	; 0x5c
 8007012:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007016:	2a2b      	cmp	r2, #43	; 0x2b
 8007018:	d075      	beq.n	8007106 <_strtod_l+0x286>
 800701a:	2a2d      	cmp	r2, #45	; 0x2d
 800701c:	d07b      	beq.n	8007116 <_strtod_l+0x296>
 800701e:	f04f 0c00 	mov.w	ip, #0
 8007022:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007026:	2909      	cmp	r1, #9
 8007028:	f240 8082 	bls.w	8007130 <_strtod_l+0x2b0>
 800702c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007030:	2600      	movs	r6, #0
 8007032:	e09d      	b.n	8007170 <_strtod_l+0x2f0>
 8007034:	2300      	movs	r3, #0
 8007036:	e7c4      	b.n	8006fc2 <_strtod_l+0x142>
 8007038:	2f08      	cmp	r7, #8
 800703a:	bfd8      	it	le
 800703c:	9907      	ldrle	r1, [sp, #28]
 800703e:	f100 0001 	add.w	r0, r0, #1
 8007042:	bfda      	itte	le
 8007044:	fb02 3301 	mlale	r3, r2, r1, r3
 8007048:	9307      	strle	r3, [sp, #28]
 800704a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800704e:	3701      	adds	r7, #1
 8007050:	9017      	str	r0, [sp, #92]	; 0x5c
 8007052:	e7bf      	b.n	8006fd4 <_strtod_l+0x154>
 8007054:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007056:	195a      	adds	r2, r3, r5
 8007058:	9217      	str	r2, [sp, #92]	; 0x5c
 800705a:	5d5a      	ldrb	r2, [r3, r5]
 800705c:	2f00      	cmp	r7, #0
 800705e:	d037      	beq.n	80070d0 <_strtod_l+0x250>
 8007060:	9005      	str	r0, [sp, #20]
 8007062:	463d      	mov	r5, r7
 8007064:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007068:	2b09      	cmp	r3, #9
 800706a:	d912      	bls.n	8007092 <_strtod_l+0x212>
 800706c:	2301      	movs	r3, #1
 800706e:	e7c2      	b.n	8006ff6 <_strtod_l+0x176>
 8007070:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007072:	1c5a      	adds	r2, r3, #1
 8007074:	9217      	str	r2, [sp, #92]	; 0x5c
 8007076:	785a      	ldrb	r2, [r3, #1]
 8007078:	3001      	adds	r0, #1
 800707a:	2a30      	cmp	r2, #48	; 0x30
 800707c:	d0f8      	beq.n	8007070 <_strtod_l+0x1f0>
 800707e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007082:	2b08      	cmp	r3, #8
 8007084:	f200 84d9 	bhi.w	8007a3a <_strtod_l+0xbba>
 8007088:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800708a:	9005      	str	r0, [sp, #20]
 800708c:	2000      	movs	r0, #0
 800708e:	9308      	str	r3, [sp, #32]
 8007090:	4605      	mov	r5, r0
 8007092:	3a30      	subs	r2, #48	; 0x30
 8007094:	f100 0301 	add.w	r3, r0, #1
 8007098:	d014      	beq.n	80070c4 <_strtod_l+0x244>
 800709a:	9905      	ldr	r1, [sp, #20]
 800709c:	4419      	add	r1, r3
 800709e:	9105      	str	r1, [sp, #20]
 80070a0:	462b      	mov	r3, r5
 80070a2:	eb00 0e05 	add.w	lr, r0, r5
 80070a6:	210a      	movs	r1, #10
 80070a8:	4573      	cmp	r3, lr
 80070aa:	d113      	bne.n	80070d4 <_strtod_l+0x254>
 80070ac:	182b      	adds	r3, r5, r0
 80070ae:	2b08      	cmp	r3, #8
 80070b0:	f105 0501 	add.w	r5, r5, #1
 80070b4:	4405      	add	r5, r0
 80070b6:	dc1c      	bgt.n	80070f2 <_strtod_l+0x272>
 80070b8:	9907      	ldr	r1, [sp, #28]
 80070ba:	230a      	movs	r3, #10
 80070bc:	fb03 2301 	mla	r3, r3, r1, r2
 80070c0:	9307      	str	r3, [sp, #28]
 80070c2:	2300      	movs	r3, #0
 80070c4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80070c6:	1c51      	adds	r1, r2, #1
 80070c8:	9117      	str	r1, [sp, #92]	; 0x5c
 80070ca:	7852      	ldrb	r2, [r2, #1]
 80070cc:	4618      	mov	r0, r3
 80070ce:	e7c9      	b.n	8007064 <_strtod_l+0x1e4>
 80070d0:	4638      	mov	r0, r7
 80070d2:	e7d2      	b.n	800707a <_strtod_l+0x1fa>
 80070d4:	2b08      	cmp	r3, #8
 80070d6:	dc04      	bgt.n	80070e2 <_strtod_l+0x262>
 80070d8:	9e07      	ldr	r6, [sp, #28]
 80070da:	434e      	muls	r6, r1
 80070dc:	9607      	str	r6, [sp, #28]
 80070de:	3301      	adds	r3, #1
 80070e0:	e7e2      	b.n	80070a8 <_strtod_l+0x228>
 80070e2:	f103 0c01 	add.w	ip, r3, #1
 80070e6:	f1bc 0f10 	cmp.w	ip, #16
 80070ea:	bfd8      	it	le
 80070ec:	fb01 f909 	mulle.w	r9, r1, r9
 80070f0:	e7f5      	b.n	80070de <_strtod_l+0x25e>
 80070f2:	2d10      	cmp	r5, #16
 80070f4:	bfdc      	itt	le
 80070f6:	230a      	movle	r3, #10
 80070f8:	fb03 2909 	mlale	r9, r3, r9, r2
 80070fc:	e7e1      	b.n	80070c2 <_strtod_l+0x242>
 80070fe:	2300      	movs	r3, #0
 8007100:	9305      	str	r3, [sp, #20]
 8007102:	2301      	movs	r3, #1
 8007104:	e77c      	b.n	8007000 <_strtod_l+0x180>
 8007106:	f04f 0c00 	mov.w	ip, #0
 800710a:	f108 0202 	add.w	r2, r8, #2
 800710e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007110:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007114:	e785      	b.n	8007022 <_strtod_l+0x1a2>
 8007116:	f04f 0c01 	mov.w	ip, #1
 800711a:	e7f6      	b.n	800710a <_strtod_l+0x28a>
 800711c:	0800ae20 	.word	0x0800ae20
 8007120:	0800ac3c 	.word	0x0800ac3c
 8007124:	7ff00000 	.word	0x7ff00000
 8007128:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800712a:	1c51      	adds	r1, r2, #1
 800712c:	9117      	str	r1, [sp, #92]	; 0x5c
 800712e:	7852      	ldrb	r2, [r2, #1]
 8007130:	2a30      	cmp	r2, #48	; 0x30
 8007132:	d0f9      	beq.n	8007128 <_strtod_l+0x2a8>
 8007134:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007138:	2908      	cmp	r1, #8
 800713a:	f63f af79 	bhi.w	8007030 <_strtod_l+0x1b0>
 800713e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007142:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007144:	9206      	str	r2, [sp, #24]
 8007146:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007148:	1c51      	adds	r1, r2, #1
 800714a:	9117      	str	r1, [sp, #92]	; 0x5c
 800714c:	7852      	ldrb	r2, [r2, #1]
 800714e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007152:	2e09      	cmp	r6, #9
 8007154:	d937      	bls.n	80071c6 <_strtod_l+0x346>
 8007156:	9e06      	ldr	r6, [sp, #24]
 8007158:	1b89      	subs	r1, r1, r6
 800715a:	2908      	cmp	r1, #8
 800715c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007160:	dc02      	bgt.n	8007168 <_strtod_l+0x2e8>
 8007162:	4576      	cmp	r6, lr
 8007164:	bfa8      	it	ge
 8007166:	4676      	movge	r6, lr
 8007168:	f1bc 0f00 	cmp.w	ip, #0
 800716c:	d000      	beq.n	8007170 <_strtod_l+0x2f0>
 800716e:	4276      	negs	r6, r6
 8007170:	2d00      	cmp	r5, #0
 8007172:	d14d      	bne.n	8007210 <_strtod_l+0x390>
 8007174:	9904      	ldr	r1, [sp, #16]
 8007176:	4301      	orrs	r1, r0
 8007178:	f47f aec6 	bne.w	8006f08 <_strtod_l+0x88>
 800717c:	2b00      	cmp	r3, #0
 800717e:	f47f aee1 	bne.w	8006f44 <_strtod_l+0xc4>
 8007182:	2a69      	cmp	r2, #105	; 0x69
 8007184:	d027      	beq.n	80071d6 <_strtod_l+0x356>
 8007186:	dc24      	bgt.n	80071d2 <_strtod_l+0x352>
 8007188:	2a49      	cmp	r2, #73	; 0x49
 800718a:	d024      	beq.n	80071d6 <_strtod_l+0x356>
 800718c:	2a4e      	cmp	r2, #78	; 0x4e
 800718e:	f47f aed9 	bne.w	8006f44 <_strtod_l+0xc4>
 8007192:	499f      	ldr	r1, [pc, #636]	; (8007410 <_strtod_l+0x590>)
 8007194:	a817      	add	r0, sp, #92	; 0x5c
 8007196:	f001 fe4b 	bl	8008e30 <__match>
 800719a:	2800      	cmp	r0, #0
 800719c:	f43f aed2 	beq.w	8006f44 <_strtod_l+0xc4>
 80071a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	2b28      	cmp	r3, #40	; 0x28
 80071a6:	d12d      	bne.n	8007204 <_strtod_l+0x384>
 80071a8:	499a      	ldr	r1, [pc, #616]	; (8007414 <_strtod_l+0x594>)
 80071aa:	aa1a      	add	r2, sp, #104	; 0x68
 80071ac:	a817      	add	r0, sp, #92	; 0x5c
 80071ae:	f001 fe53 	bl	8008e58 <__hexnan>
 80071b2:	2805      	cmp	r0, #5
 80071b4:	d126      	bne.n	8007204 <_strtod_l+0x384>
 80071b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80071b8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80071bc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80071c0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80071c4:	e6a0      	b.n	8006f08 <_strtod_l+0x88>
 80071c6:	210a      	movs	r1, #10
 80071c8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80071cc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80071d0:	e7b9      	b.n	8007146 <_strtod_l+0x2c6>
 80071d2:	2a6e      	cmp	r2, #110	; 0x6e
 80071d4:	e7db      	b.n	800718e <_strtod_l+0x30e>
 80071d6:	4990      	ldr	r1, [pc, #576]	; (8007418 <_strtod_l+0x598>)
 80071d8:	a817      	add	r0, sp, #92	; 0x5c
 80071da:	f001 fe29 	bl	8008e30 <__match>
 80071de:	2800      	cmp	r0, #0
 80071e0:	f43f aeb0 	beq.w	8006f44 <_strtod_l+0xc4>
 80071e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071e6:	498d      	ldr	r1, [pc, #564]	; (800741c <_strtod_l+0x59c>)
 80071e8:	3b01      	subs	r3, #1
 80071ea:	a817      	add	r0, sp, #92	; 0x5c
 80071ec:	9317      	str	r3, [sp, #92]	; 0x5c
 80071ee:	f001 fe1f 	bl	8008e30 <__match>
 80071f2:	b910      	cbnz	r0, 80071fa <_strtod_l+0x37a>
 80071f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071f6:	3301      	adds	r3, #1
 80071f8:	9317      	str	r3, [sp, #92]	; 0x5c
 80071fa:	f8df b230 	ldr.w	fp, [pc, #560]	; 800742c <_strtod_l+0x5ac>
 80071fe:	f04f 0a00 	mov.w	sl, #0
 8007202:	e681      	b.n	8006f08 <_strtod_l+0x88>
 8007204:	4886      	ldr	r0, [pc, #536]	; (8007420 <_strtod_l+0x5a0>)
 8007206:	f002 ff5f 	bl	800a0c8 <nan>
 800720a:	ec5b ab10 	vmov	sl, fp, d0
 800720e:	e67b      	b.n	8006f08 <_strtod_l+0x88>
 8007210:	9b05      	ldr	r3, [sp, #20]
 8007212:	9807      	ldr	r0, [sp, #28]
 8007214:	1af3      	subs	r3, r6, r3
 8007216:	2f00      	cmp	r7, #0
 8007218:	bf08      	it	eq
 800721a:	462f      	moveq	r7, r5
 800721c:	2d10      	cmp	r5, #16
 800721e:	9306      	str	r3, [sp, #24]
 8007220:	46a8      	mov	r8, r5
 8007222:	bfa8      	it	ge
 8007224:	f04f 0810 	movge.w	r8, #16
 8007228:	f7f9 f99c 	bl	8000564 <__aeabi_ui2d>
 800722c:	2d09      	cmp	r5, #9
 800722e:	4682      	mov	sl, r0
 8007230:	468b      	mov	fp, r1
 8007232:	dd13      	ble.n	800725c <_strtod_l+0x3dc>
 8007234:	4b7b      	ldr	r3, [pc, #492]	; (8007424 <_strtod_l+0x5a4>)
 8007236:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800723a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800723e:	f7f9 fa0b 	bl	8000658 <__aeabi_dmul>
 8007242:	4682      	mov	sl, r0
 8007244:	4648      	mov	r0, r9
 8007246:	468b      	mov	fp, r1
 8007248:	f7f9 f98c 	bl	8000564 <__aeabi_ui2d>
 800724c:	4602      	mov	r2, r0
 800724e:	460b      	mov	r3, r1
 8007250:	4650      	mov	r0, sl
 8007252:	4659      	mov	r1, fp
 8007254:	f7f9 f84a 	bl	80002ec <__adddf3>
 8007258:	4682      	mov	sl, r0
 800725a:	468b      	mov	fp, r1
 800725c:	2d0f      	cmp	r5, #15
 800725e:	dc38      	bgt.n	80072d2 <_strtod_l+0x452>
 8007260:	9b06      	ldr	r3, [sp, #24]
 8007262:	2b00      	cmp	r3, #0
 8007264:	f43f ae50 	beq.w	8006f08 <_strtod_l+0x88>
 8007268:	dd24      	ble.n	80072b4 <_strtod_l+0x434>
 800726a:	2b16      	cmp	r3, #22
 800726c:	dc0b      	bgt.n	8007286 <_strtod_l+0x406>
 800726e:	496d      	ldr	r1, [pc, #436]	; (8007424 <_strtod_l+0x5a4>)
 8007270:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007274:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007278:	4652      	mov	r2, sl
 800727a:	465b      	mov	r3, fp
 800727c:	f7f9 f9ec 	bl	8000658 <__aeabi_dmul>
 8007280:	4682      	mov	sl, r0
 8007282:	468b      	mov	fp, r1
 8007284:	e640      	b.n	8006f08 <_strtod_l+0x88>
 8007286:	9a06      	ldr	r2, [sp, #24]
 8007288:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800728c:	4293      	cmp	r3, r2
 800728e:	db20      	blt.n	80072d2 <_strtod_l+0x452>
 8007290:	4c64      	ldr	r4, [pc, #400]	; (8007424 <_strtod_l+0x5a4>)
 8007292:	f1c5 050f 	rsb	r5, r5, #15
 8007296:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800729a:	4652      	mov	r2, sl
 800729c:	465b      	mov	r3, fp
 800729e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072a2:	f7f9 f9d9 	bl	8000658 <__aeabi_dmul>
 80072a6:	9b06      	ldr	r3, [sp, #24]
 80072a8:	1b5d      	subs	r5, r3, r5
 80072aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80072ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 80072b2:	e7e3      	b.n	800727c <_strtod_l+0x3fc>
 80072b4:	9b06      	ldr	r3, [sp, #24]
 80072b6:	3316      	adds	r3, #22
 80072b8:	db0b      	blt.n	80072d2 <_strtod_l+0x452>
 80072ba:	9b05      	ldr	r3, [sp, #20]
 80072bc:	1b9e      	subs	r6, r3, r6
 80072be:	4b59      	ldr	r3, [pc, #356]	; (8007424 <_strtod_l+0x5a4>)
 80072c0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80072c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80072c8:	4650      	mov	r0, sl
 80072ca:	4659      	mov	r1, fp
 80072cc:	f7f9 faee 	bl	80008ac <__aeabi_ddiv>
 80072d0:	e7d6      	b.n	8007280 <_strtod_l+0x400>
 80072d2:	9b06      	ldr	r3, [sp, #24]
 80072d4:	eba5 0808 	sub.w	r8, r5, r8
 80072d8:	4498      	add	r8, r3
 80072da:	f1b8 0f00 	cmp.w	r8, #0
 80072de:	dd74      	ble.n	80073ca <_strtod_l+0x54a>
 80072e0:	f018 030f 	ands.w	r3, r8, #15
 80072e4:	d00a      	beq.n	80072fc <_strtod_l+0x47c>
 80072e6:	494f      	ldr	r1, [pc, #316]	; (8007424 <_strtod_l+0x5a4>)
 80072e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80072ec:	4652      	mov	r2, sl
 80072ee:	465b      	mov	r3, fp
 80072f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072f4:	f7f9 f9b0 	bl	8000658 <__aeabi_dmul>
 80072f8:	4682      	mov	sl, r0
 80072fa:	468b      	mov	fp, r1
 80072fc:	f038 080f 	bics.w	r8, r8, #15
 8007300:	d04f      	beq.n	80073a2 <_strtod_l+0x522>
 8007302:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007306:	dd22      	ble.n	800734e <_strtod_l+0x4ce>
 8007308:	2500      	movs	r5, #0
 800730a:	462e      	mov	r6, r5
 800730c:	9507      	str	r5, [sp, #28]
 800730e:	9505      	str	r5, [sp, #20]
 8007310:	2322      	movs	r3, #34	; 0x22
 8007312:	f8df b118 	ldr.w	fp, [pc, #280]	; 800742c <_strtod_l+0x5ac>
 8007316:	6023      	str	r3, [r4, #0]
 8007318:	f04f 0a00 	mov.w	sl, #0
 800731c:	9b07      	ldr	r3, [sp, #28]
 800731e:	2b00      	cmp	r3, #0
 8007320:	f43f adf2 	beq.w	8006f08 <_strtod_l+0x88>
 8007324:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007326:	4620      	mov	r0, r4
 8007328:	f001 fe9e 	bl	8009068 <_Bfree>
 800732c:	9905      	ldr	r1, [sp, #20]
 800732e:	4620      	mov	r0, r4
 8007330:	f001 fe9a 	bl	8009068 <_Bfree>
 8007334:	4631      	mov	r1, r6
 8007336:	4620      	mov	r0, r4
 8007338:	f001 fe96 	bl	8009068 <_Bfree>
 800733c:	9907      	ldr	r1, [sp, #28]
 800733e:	4620      	mov	r0, r4
 8007340:	f001 fe92 	bl	8009068 <_Bfree>
 8007344:	4629      	mov	r1, r5
 8007346:	4620      	mov	r0, r4
 8007348:	f001 fe8e 	bl	8009068 <_Bfree>
 800734c:	e5dc      	b.n	8006f08 <_strtod_l+0x88>
 800734e:	4b36      	ldr	r3, [pc, #216]	; (8007428 <_strtod_l+0x5a8>)
 8007350:	9304      	str	r3, [sp, #16]
 8007352:	2300      	movs	r3, #0
 8007354:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007358:	4650      	mov	r0, sl
 800735a:	4659      	mov	r1, fp
 800735c:	4699      	mov	r9, r3
 800735e:	f1b8 0f01 	cmp.w	r8, #1
 8007362:	dc21      	bgt.n	80073a8 <_strtod_l+0x528>
 8007364:	b10b      	cbz	r3, 800736a <_strtod_l+0x4ea>
 8007366:	4682      	mov	sl, r0
 8007368:	468b      	mov	fp, r1
 800736a:	4b2f      	ldr	r3, [pc, #188]	; (8007428 <_strtod_l+0x5a8>)
 800736c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007370:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007374:	4652      	mov	r2, sl
 8007376:	465b      	mov	r3, fp
 8007378:	e9d9 0100 	ldrd	r0, r1, [r9]
 800737c:	f7f9 f96c 	bl	8000658 <__aeabi_dmul>
 8007380:	4b2a      	ldr	r3, [pc, #168]	; (800742c <_strtod_l+0x5ac>)
 8007382:	460a      	mov	r2, r1
 8007384:	400b      	ands	r3, r1
 8007386:	492a      	ldr	r1, [pc, #168]	; (8007430 <_strtod_l+0x5b0>)
 8007388:	428b      	cmp	r3, r1
 800738a:	4682      	mov	sl, r0
 800738c:	d8bc      	bhi.n	8007308 <_strtod_l+0x488>
 800738e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007392:	428b      	cmp	r3, r1
 8007394:	bf86      	itte	hi
 8007396:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007434 <_strtod_l+0x5b4>
 800739a:	f04f 3aff 	movhi.w	sl, #4294967295
 800739e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80073a2:	2300      	movs	r3, #0
 80073a4:	9304      	str	r3, [sp, #16]
 80073a6:	e084      	b.n	80074b2 <_strtod_l+0x632>
 80073a8:	f018 0f01 	tst.w	r8, #1
 80073ac:	d005      	beq.n	80073ba <_strtod_l+0x53a>
 80073ae:	9b04      	ldr	r3, [sp, #16]
 80073b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b4:	f7f9 f950 	bl	8000658 <__aeabi_dmul>
 80073b8:	2301      	movs	r3, #1
 80073ba:	9a04      	ldr	r2, [sp, #16]
 80073bc:	3208      	adds	r2, #8
 80073be:	f109 0901 	add.w	r9, r9, #1
 80073c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80073c6:	9204      	str	r2, [sp, #16]
 80073c8:	e7c9      	b.n	800735e <_strtod_l+0x4de>
 80073ca:	d0ea      	beq.n	80073a2 <_strtod_l+0x522>
 80073cc:	f1c8 0800 	rsb	r8, r8, #0
 80073d0:	f018 020f 	ands.w	r2, r8, #15
 80073d4:	d00a      	beq.n	80073ec <_strtod_l+0x56c>
 80073d6:	4b13      	ldr	r3, [pc, #76]	; (8007424 <_strtod_l+0x5a4>)
 80073d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073dc:	4650      	mov	r0, sl
 80073de:	4659      	mov	r1, fp
 80073e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e4:	f7f9 fa62 	bl	80008ac <__aeabi_ddiv>
 80073e8:	4682      	mov	sl, r0
 80073ea:	468b      	mov	fp, r1
 80073ec:	ea5f 1828 	movs.w	r8, r8, asr #4
 80073f0:	d0d7      	beq.n	80073a2 <_strtod_l+0x522>
 80073f2:	f1b8 0f1f 	cmp.w	r8, #31
 80073f6:	dd1f      	ble.n	8007438 <_strtod_l+0x5b8>
 80073f8:	2500      	movs	r5, #0
 80073fa:	462e      	mov	r6, r5
 80073fc:	9507      	str	r5, [sp, #28]
 80073fe:	9505      	str	r5, [sp, #20]
 8007400:	2322      	movs	r3, #34	; 0x22
 8007402:	f04f 0a00 	mov.w	sl, #0
 8007406:	f04f 0b00 	mov.w	fp, #0
 800740a:	6023      	str	r3, [r4, #0]
 800740c:	e786      	b.n	800731c <_strtod_l+0x49c>
 800740e:	bf00      	nop
 8007410:	0800ac15 	.word	0x0800ac15
 8007414:	0800ac50 	.word	0x0800ac50
 8007418:	0800ac0d 	.word	0x0800ac0d
 800741c:	0800ad43 	.word	0x0800ad43
 8007420:	0800ad3f 	.word	0x0800ad3f
 8007424:	0800aeb8 	.word	0x0800aeb8
 8007428:	0800ae90 	.word	0x0800ae90
 800742c:	7ff00000 	.word	0x7ff00000
 8007430:	7ca00000 	.word	0x7ca00000
 8007434:	7fefffff 	.word	0x7fefffff
 8007438:	f018 0310 	ands.w	r3, r8, #16
 800743c:	bf18      	it	ne
 800743e:	236a      	movne	r3, #106	; 0x6a
 8007440:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80077f0 <_strtod_l+0x970>
 8007444:	9304      	str	r3, [sp, #16]
 8007446:	4650      	mov	r0, sl
 8007448:	4659      	mov	r1, fp
 800744a:	2300      	movs	r3, #0
 800744c:	f018 0f01 	tst.w	r8, #1
 8007450:	d004      	beq.n	800745c <_strtod_l+0x5dc>
 8007452:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007456:	f7f9 f8ff 	bl	8000658 <__aeabi_dmul>
 800745a:	2301      	movs	r3, #1
 800745c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007460:	f109 0908 	add.w	r9, r9, #8
 8007464:	d1f2      	bne.n	800744c <_strtod_l+0x5cc>
 8007466:	b10b      	cbz	r3, 800746c <_strtod_l+0x5ec>
 8007468:	4682      	mov	sl, r0
 800746a:	468b      	mov	fp, r1
 800746c:	9b04      	ldr	r3, [sp, #16]
 800746e:	b1c3      	cbz	r3, 80074a2 <_strtod_l+0x622>
 8007470:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007474:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007478:	2b00      	cmp	r3, #0
 800747a:	4659      	mov	r1, fp
 800747c:	dd11      	ble.n	80074a2 <_strtod_l+0x622>
 800747e:	2b1f      	cmp	r3, #31
 8007480:	f340 8124 	ble.w	80076cc <_strtod_l+0x84c>
 8007484:	2b34      	cmp	r3, #52	; 0x34
 8007486:	bfde      	ittt	le
 8007488:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800748c:	f04f 33ff 	movle.w	r3, #4294967295
 8007490:	fa03 f202 	lslle.w	r2, r3, r2
 8007494:	f04f 0a00 	mov.w	sl, #0
 8007498:	bfcc      	ite	gt
 800749a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800749e:	ea02 0b01 	andle.w	fp, r2, r1
 80074a2:	2200      	movs	r2, #0
 80074a4:	2300      	movs	r3, #0
 80074a6:	4650      	mov	r0, sl
 80074a8:	4659      	mov	r1, fp
 80074aa:	f7f9 fb3d 	bl	8000b28 <__aeabi_dcmpeq>
 80074ae:	2800      	cmp	r0, #0
 80074b0:	d1a2      	bne.n	80073f8 <_strtod_l+0x578>
 80074b2:	9b07      	ldr	r3, [sp, #28]
 80074b4:	9300      	str	r3, [sp, #0]
 80074b6:	9908      	ldr	r1, [sp, #32]
 80074b8:	462b      	mov	r3, r5
 80074ba:	463a      	mov	r2, r7
 80074bc:	4620      	mov	r0, r4
 80074be:	f001 fe3b 	bl	8009138 <__s2b>
 80074c2:	9007      	str	r0, [sp, #28]
 80074c4:	2800      	cmp	r0, #0
 80074c6:	f43f af1f 	beq.w	8007308 <_strtod_l+0x488>
 80074ca:	9b05      	ldr	r3, [sp, #20]
 80074cc:	1b9e      	subs	r6, r3, r6
 80074ce:	9b06      	ldr	r3, [sp, #24]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	bfb4      	ite	lt
 80074d4:	4633      	movlt	r3, r6
 80074d6:	2300      	movge	r3, #0
 80074d8:	930c      	str	r3, [sp, #48]	; 0x30
 80074da:	9b06      	ldr	r3, [sp, #24]
 80074dc:	2500      	movs	r5, #0
 80074de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80074e2:	9312      	str	r3, [sp, #72]	; 0x48
 80074e4:	462e      	mov	r6, r5
 80074e6:	9b07      	ldr	r3, [sp, #28]
 80074e8:	4620      	mov	r0, r4
 80074ea:	6859      	ldr	r1, [r3, #4]
 80074ec:	f001 fd7c 	bl	8008fe8 <_Balloc>
 80074f0:	9005      	str	r0, [sp, #20]
 80074f2:	2800      	cmp	r0, #0
 80074f4:	f43f af0c 	beq.w	8007310 <_strtod_l+0x490>
 80074f8:	9b07      	ldr	r3, [sp, #28]
 80074fa:	691a      	ldr	r2, [r3, #16]
 80074fc:	3202      	adds	r2, #2
 80074fe:	f103 010c 	add.w	r1, r3, #12
 8007502:	0092      	lsls	r2, r2, #2
 8007504:	300c      	adds	r0, #12
 8007506:	f001 fd61 	bl	8008fcc <memcpy>
 800750a:	ec4b ab10 	vmov	d0, sl, fp
 800750e:	aa1a      	add	r2, sp, #104	; 0x68
 8007510:	a919      	add	r1, sp, #100	; 0x64
 8007512:	4620      	mov	r0, r4
 8007514:	f002 f956 	bl	80097c4 <__d2b>
 8007518:	ec4b ab18 	vmov	d8, sl, fp
 800751c:	9018      	str	r0, [sp, #96]	; 0x60
 800751e:	2800      	cmp	r0, #0
 8007520:	f43f aef6 	beq.w	8007310 <_strtod_l+0x490>
 8007524:	2101      	movs	r1, #1
 8007526:	4620      	mov	r0, r4
 8007528:	f001 fea0 	bl	800926c <__i2b>
 800752c:	4606      	mov	r6, r0
 800752e:	2800      	cmp	r0, #0
 8007530:	f43f aeee 	beq.w	8007310 <_strtod_l+0x490>
 8007534:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007536:	9904      	ldr	r1, [sp, #16]
 8007538:	2b00      	cmp	r3, #0
 800753a:	bfab      	itete	ge
 800753c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800753e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007540:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007542:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8007546:	bfac      	ite	ge
 8007548:	eb03 0902 	addge.w	r9, r3, r2
 800754c:	1ad7      	sublt	r7, r2, r3
 800754e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007550:	eba3 0801 	sub.w	r8, r3, r1
 8007554:	4490      	add	r8, r2
 8007556:	4ba1      	ldr	r3, [pc, #644]	; (80077dc <_strtod_l+0x95c>)
 8007558:	f108 38ff 	add.w	r8, r8, #4294967295
 800755c:	4598      	cmp	r8, r3
 800755e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007562:	f280 80c7 	bge.w	80076f4 <_strtod_l+0x874>
 8007566:	eba3 0308 	sub.w	r3, r3, r8
 800756a:	2b1f      	cmp	r3, #31
 800756c:	eba2 0203 	sub.w	r2, r2, r3
 8007570:	f04f 0101 	mov.w	r1, #1
 8007574:	f300 80b1 	bgt.w	80076da <_strtod_l+0x85a>
 8007578:	fa01 f303 	lsl.w	r3, r1, r3
 800757c:	930d      	str	r3, [sp, #52]	; 0x34
 800757e:	2300      	movs	r3, #0
 8007580:	9308      	str	r3, [sp, #32]
 8007582:	eb09 0802 	add.w	r8, r9, r2
 8007586:	9b04      	ldr	r3, [sp, #16]
 8007588:	45c1      	cmp	r9, r8
 800758a:	4417      	add	r7, r2
 800758c:	441f      	add	r7, r3
 800758e:	464b      	mov	r3, r9
 8007590:	bfa8      	it	ge
 8007592:	4643      	movge	r3, r8
 8007594:	42bb      	cmp	r3, r7
 8007596:	bfa8      	it	ge
 8007598:	463b      	movge	r3, r7
 800759a:	2b00      	cmp	r3, #0
 800759c:	bfc2      	ittt	gt
 800759e:	eba8 0803 	subgt.w	r8, r8, r3
 80075a2:	1aff      	subgt	r7, r7, r3
 80075a4:	eba9 0903 	subgt.w	r9, r9, r3
 80075a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	dd17      	ble.n	80075de <_strtod_l+0x75e>
 80075ae:	4631      	mov	r1, r6
 80075b0:	461a      	mov	r2, r3
 80075b2:	4620      	mov	r0, r4
 80075b4:	f001 ff1a 	bl	80093ec <__pow5mult>
 80075b8:	4606      	mov	r6, r0
 80075ba:	2800      	cmp	r0, #0
 80075bc:	f43f aea8 	beq.w	8007310 <_strtod_l+0x490>
 80075c0:	4601      	mov	r1, r0
 80075c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80075c4:	4620      	mov	r0, r4
 80075c6:	f001 fe67 	bl	8009298 <__multiply>
 80075ca:	900b      	str	r0, [sp, #44]	; 0x2c
 80075cc:	2800      	cmp	r0, #0
 80075ce:	f43f ae9f 	beq.w	8007310 <_strtod_l+0x490>
 80075d2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80075d4:	4620      	mov	r0, r4
 80075d6:	f001 fd47 	bl	8009068 <_Bfree>
 80075da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075dc:	9318      	str	r3, [sp, #96]	; 0x60
 80075de:	f1b8 0f00 	cmp.w	r8, #0
 80075e2:	f300 808c 	bgt.w	80076fe <_strtod_l+0x87e>
 80075e6:	9b06      	ldr	r3, [sp, #24]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	dd08      	ble.n	80075fe <_strtod_l+0x77e>
 80075ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80075ee:	9905      	ldr	r1, [sp, #20]
 80075f0:	4620      	mov	r0, r4
 80075f2:	f001 fefb 	bl	80093ec <__pow5mult>
 80075f6:	9005      	str	r0, [sp, #20]
 80075f8:	2800      	cmp	r0, #0
 80075fa:	f43f ae89 	beq.w	8007310 <_strtod_l+0x490>
 80075fe:	2f00      	cmp	r7, #0
 8007600:	dd08      	ble.n	8007614 <_strtod_l+0x794>
 8007602:	9905      	ldr	r1, [sp, #20]
 8007604:	463a      	mov	r2, r7
 8007606:	4620      	mov	r0, r4
 8007608:	f001 ff4a 	bl	80094a0 <__lshift>
 800760c:	9005      	str	r0, [sp, #20]
 800760e:	2800      	cmp	r0, #0
 8007610:	f43f ae7e 	beq.w	8007310 <_strtod_l+0x490>
 8007614:	f1b9 0f00 	cmp.w	r9, #0
 8007618:	dd08      	ble.n	800762c <_strtod_l+0x7ac>
 800761a:	4631      	mov	r1, r6
 800761c:	464a      	mov	r2, r9
 800761e:	4620      	mov	r0, r4
 8007620:	f001 ff3e 	bl	80094a0 <__lshift>
 8007624:	4606      	mov	r6, r0
 8007626:	2800      	cmp	r0, #0
 8007628:	f43f ae72 	beq.w	8007310 <_strtod_l+0x490>
 800762c:	9a05      	ldr	r2, [sp, #20]
 800762e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007630:	4620      	mov	r0, r4
 8007632:	f001 ffc1 	bl	80095b8 <__mdiff>
 8007636:	4605      	mov	r5, r0
 8007638:	2800      	cmp	r0, #0
 800763a:	f43f ae69 	beq.w	8007310 <_strtod_l+0x490>
 800763e:	68c3      	ldr	r3, [r0, #12]
 8007640:	930b      	str	r3, [sp, #44]	; 0x2c
 8007642:	2300      	movs	r3, #0
 8007644:	60c3      	str	r3, [r0, #12]
 8007646:	4631      	mov	r1, r6
 8007648:	f001 ff9a 	bl	8009580 <__mcmp>
 800764c:	2800      	cmp	r0, #0
 800764e:	da60      	bge.n	8007712 <_strtod_l+0x892>
 8007650:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007652:	ea53 030a 	orrs.w	r3, r3, sl
 8007656:	f040 8082 	bne.w	800775e <_strtod_l+0x8de>
 800765a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800765e:	2b00      	cmp	r3, #0
 8007660:	d17d      	bne.n	800775e <_strtod_l+0x8de>
 8007662:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007666:	0d1b      	lsrs	r3, r3, #20
 8007668:	051b      	lsls	r3, r3, #20
 800766a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800766e:	d976      	bls.n	800775e <_strtod_l+0x8de>
 8007670:	696b      	ldr	r3, [r5, #20]
 8007672:	b913      	cbnz	r3, 800767a <_strtod_l+0x7fa>
 8007674:	692b      	ldr	r3, [r5, #16]
 8007676:	2b01      	cmp	r3, #1
 8007678:	dd71      	ble.n	800775e <_strtod_l+0x8de>
 800767a:	4629      	mov	r1, r5
 800767c:	2201      	movs	r2, #1
 800767e:	4620      	mov	r0, r4
 8007680:	f001 ff0e 	bl	80094a0 <__lshift>
 8007684:	4631      	mov	r1, r6
 8007686:	4605      	mov	r5, r0
 8007688:	f001 ff7a 	bl	8009580 <__mcmp>
 800768c:	2800      	cmp	r0, #0
 800768e:	dd66      	ble.n	800775e <_strtod_l+0x8de>
 8007690:	9904      	ldr	r1, [sp, #16]
 8007692:	4a53      	ldr	r2, [pc, #332]	; (80077e0 <_strtod_l+0x960>)
 8007694:	465b      	mov	r3, fp
 8007696:	2900      	cmp	r1, #0
 8007698:	f000 8081 	beq.w	800779e <_strtod_l+0x91e>
 800769c:	ea02 010b 	and.w	r1, r2, fp
 80076a0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80076a4:	dc7b      	bgt.n	800779e <_strtod_l+0x91e>
 80076a6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80076aa:	f77f aea9 	ble.w	8007400 <_strtod_l+0x580>
 80076ae:	4b4d      	ldr	r3, [pc, #308]	; (80077e4 <_strtod_l+0x964>)
 80076b0:	4650      	mov	r0, sl
 80076b2:	4659      	mov	r1, fp
 80076b4:	2200      	movs	r2, #0
 80076b6:	f7f8 ffcf 	bl	8000658 <__aeabi_dmul>
 80076ba:	460b      	mov	r3, r1
 80076bc:	4303      	orrs	r3, r0
 80076be:	bf08      	it	eq
 80076c0:	2322      	moveq	r3, #34	; 0x22
 80076c2:	4682      	mov	sl, r0
 80076c4:	468b      	mov	fp, r1
 80076c6:	bf08      	it	eq
 80076c8:	6023      	streq	r3, [r4, #0]
 80076ca:	e62b      	b.n	8007324 <_strtod_l+0x4a4>
 80076cc:	f04f 32ff 	mov.w	r2, #4294967295
 80076d0:	fa02 f303 	lsl.w	r3, r2, r3
 80076d4:	ea03 0a0a 	and.w	sl, r3, sl
 80076d8:	e6e3      	b.n	80074a2 <_strtod_l+0x622>
 80076da:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80076de:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80076e2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80076e6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80076ea:	fa01 f308 	lsl.w	r3, r1, r8
 80076ee:	9308      	str	r3, [sp, #32]
 80076f0:	910d      	str	r1, [sp, #52]	; 0x34
 80076f2:	e746      	b.n	8007582 <_strtod_l+0x702>
 80076f4:	2300      	movs	r3, #0
 80076f6:	9308      	str	r3, [sp, #32]
 80076f8:	2301      	movs	r3, #1
 80076fa:	930d      	str	r3, [sp, #52]	; 0x34
 80076fc:	e741      	b.n	8007582 <_strtod_l+0x702>
 80076fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007700:	4642      	mov	r2, r8
 8007702:	4620      	mov	r0, r4
 8007704:	f001 fecc 	bl	80094a0 <__lshift>
 8007708:	9018      	str	r0, [sp, #96]	; 0x60
 800770a:	2800      	cmp	r0, #0
 800770c:	f47f af6b 	bne.w	80075e6 <_strtod_l+0x766>
 8007710:	e5fe      	b.n	8007310 <_strtod_l+0x490>
 8007712:	465f      	mov	r7, fp
 8007714:	d16e      	bne.n	80077f4 <_strtod_l+0x974>
 8007716:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007718:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800771c:	b342      	cbz	r2, 8007770 <_strtod_l+0x8f0>
 800771e:	4a32      	ldr	r2, [pc, #200]	; (80077e8 <_strtod_l+0x968>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d128      	bne.n	8007776 <_strtod_l+0x8f6>
 8007724:	9b04      	ldr	r3, [sp, #16]
 8007726:	4651      	mov	r1, sl
 8007728:	b1eb      	cbz	r3, 8007766 <_strtod_l+0x8e6>
 800772a:	4b2d      	ldr	r3, [pc, #180]	; (80077e0 <_strtod_l+0x960>)
 800772c:	403b      	ands	r3, r7
 800772e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007732:	f04f 32ff 	mov.w	r2, #4294967295
 8007736:	d819      	bhi.n	800776c <_strtod_l+0x8ec>
 8007738:	0d1b      	lsrs	r3, r3, #20
 800773a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800773e:	fa02 f303 	lsl.w	r3, r2, r3
 8007742:	4299      	cmp	r1, r3
 8007744:	d117      	bne.n	8007776 <_strtod_l+0x8f6>
 8007746:	4b29      	ldr	r3, [pc, #164]	; (80077ec <_strtod_l+0x96c>)
 8007748:	429f      	cmp	r7, r3
 800774a:	d102      	bne.n	8007752 <_strtod_l+0x8d2>
 800774c:	3101      	adds	r1, #1
 800774e:	f43f addf 	beq.w	8007310 <_strtod_l+0x490>
 8007752:	4b23      	ldr	r3, [pc, #140]	; (80077e0 <_strtod_l+0x960>)
 8007754:	403b      	ands	r3, r7
 8007756:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800775a:	f04f 0a00 	mov.w	sl, #0
 800775e:	9b04      	ldr	r3, [sp, #16]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d1a4      	bne.n	80076ae <_strtod_l+0x82e>
 8007764:	e5de      	b.n	8007324 <_strtod_l+0x4a4>
 8007766:	f04f 33ff 	mov.w	r3, #4294967295
 800776a:	e7ea      	b.n	8007742 <_strtod_l+0x8c2>
 800776c:	4613      	mov	r3, r2
 800776e:	e7e8      	b.n	8007742 <_strtod_l+0x8c2>
 8007770:	ea53 030a 	orrs.w	r3, r3, sl
 8007774:	d08c      	beq.n	8007690 <_strtod_l+0x810>
 8007776:	9b08      	ldr	r3, [sp, #32]
 8007778:	b1db      	cbz	r3, 80077b2 <_strtod_l+0x932>
 800777a:	423b      	tst	r3, r7
 800777c:	d0ef      	beq.n	800775e <_strtod_l+0x8de>
 800777e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007780:	9a04      	ldr	r2, [sp, #16]
 8007782:	4650      	mov	r0, sl
 8007784:	4659      	mov	r1, fp
 8007786:	b1c3      	cbz	r3, 80077ba <_strtod_l+0x93a>
 8007788:	f7ff fb5c 	bl	8006e44 <sulp>
 800778c:	4602      	mov	r2, r0
 800778e:	460b      	mov	r3, r1
 8007790:	ec51 0b18 	vmov	r0, r1, d8
 8007794:	f7f8 fdaa 	bl	80002ec <__adddf3>
 8007798:	4682      	mov	sl, r0
 800779a:	468b      	mov	fp, r1
 800779c:	e7df      	b.n	800775e <_strtod_l+0x8de>
 800779e:	4013      	ands	r3, r2
 80077a0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80077a4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80077a8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80077ac:	f04f 3aff 	mov.w	sl, #4294967295
 80077b0:	e7d5      	b.n	800775e <_strtod_l+0x8de>
 80077b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077b4:	ea13 0f0a 	tst.w	r3, sl
 80077b8:	e7e0      	b.n	800777c <_strtod_l+0x8fc>
 80077ba:	f7ff fb43 	bl	8006e44 <sulp>
 80077be:	4602      	mov	r2, r0
 80077c0:	460b      	mov	r3, r1
 80077c2:	ec51 0b18 	vmov	r0, r1, d8
 80077c6:	f7f8 fd8f 	bl	80002e8 <__aeabi_dsub>
 80077ca:	2200      	movs	r2, #0
 80077cc:	2300      	movs	r3, #0
 80077ce:	4682      	mov	sl, r0
 80077d0:	468b      	mov	fp, r1
 80077d2:	f7f9 f9a9 	bl	8000b28 <__aeabi_dcmpeq>
 80077d6:	2800      	cmp	r0, #0
 80077d8:	d0c1      	beq.n	800775e <_strtod_l+0x8de>
 80077da:	e611      	b.n	8007400 <_strtod_l+0x580>
 80077dc:	fffffc02 	.word	0xfffffc02
 80077e0:	7ff00000 	.word	0x7ff00000
 80077e4:	39500000 	.word	0x39500000
 80077e8:	000fffff 	.word	0x000fffff
 80077ec:	7fefffff 	.word	0x7fefffff
 80077f0:	0800ac68 	.word	0x0800ac68
 80077f4:	4631      	mov	r1, r6
 80077f6:	4628      	mov	r0, r5
 80077f8:	f002 f840 	bl	800987c <__ratio>
 80077fc:	ec59 8b10 	vmov	r8, r9, d0
 8007800:	ee10 0a10 	vmov	r0, s0
 8007804:	2200      	movs	r2, #0
 8007806:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800780a:	4649      	mov	r1, r9
 800780c:	f7f9 f9a0 	bl	8000b50 <__aeabi_dcmple>
 8007810:	2800      	cmp	r0, #0
 8007812:	d07a      	beq.n	800790a <_strtod_l+0xa8a>
 8007814:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007816:	2b00      	cmp	r3, #0
 8007818:	d04a      	beq.n	80078b0 <_strtod_l+0xa30>
 800781a:	4b95      	ldr	r3, [pc, #596]	; (8007a70 <_strtod_l+0xbf0>)
 800781c:	2200      	movs	r2, #0
 800781e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007822:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007a70 <_strtod_l+0xbf0>
 8007826:	f04f 0800 	mov.w	r8, #0
 800782a:	4b92      	ldr	r3, [pc, #584]	; (8007a74 <_strtod_l+0xbf4>)
 800782c:	403b      	ands	r3, r7
 800782e:	930d      	str	r3, [sp, #52]	; 0x34
 8007830:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007832:	4b91      	ldr	r3, [pc, #580]	; (8007a78 <_strtod_l+0xbf8>)
 8007834:	429a      	cmp	r2, r3
 8007836:	f040 80b0 	bne.w	800799a <_strtod_l+0xb1a>
 800783a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800783e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007842:	ec4b ab10 	vmov	d0, sl, fp
 8007846:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800784a:	f001 ff3f 	bl	80096cc <__ulp>
 800784e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007852:	ec53 2b10 	vmov	r2, r3, d0
 8007856:	f7f8 feff 	bl	8000658 <__aeabi_dmul>
 800785a:	4652      	mov	r2, sl
 800785c:	465b      	mov	r3, fp
 800785e:	f7f8 fd45 	bl	80002ec <__adddf3>
 8007862:	460b      	mov	r3, r1
 8007864:	4983      	ldr	r1, [pc, #524]	; (8007a74 <_strtod_l+0xbf4>)
 8007866:	4a85      	ldr	r2, [pc, #532]	; (8007a7c <_strtod_l+0xbfc>)
 8007868:	4019      	ands	r1, r3
 800786a:	4291      	cmp	r1, r2
 800786c:	4682      	mov	sl, r0
 800786e:	d960      	bls.n	8007932 <_strtod_l+0xab2>
 8007870:	ee18 3a90 	vmov	r3, s17
 8007874:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007878:	4293      	cmp	r3, r2
 800787a:	d104      	bne.n	8007886 <_strtod_l+0xa06>
 800787c:	ee18 3a10 	vmov	r3, s16
 8007880:	3301      	adds	r3, #1
 8007882:	f43f ad45 	beq.w	8007310 <_strtod_l+0x490>
 8007886:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007a88 <_strtod_l+0xc08>
 800788a:	f04f 3aff 	mov.w	sl, #4294967295
 800788e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007890:	4620      	mov	r0, r4
 8007892:	f001 fbe9 	bl	8009068 <_Bfree>
 8007896:	9905      	ldr	r1, [sp, #20]
 8007898:	4620      	mov	r0, r4
 800789a:	f001 fbe5 	bl	8009068 <_Bfree>
 800789e:	4631      	mov	r1, r6
 80078a0:	4620      	mov	r0, r4
 80078a2:	f001 fbe1 	bl	8009068 <_Bfree>
 80078a6:	4629      	mov	r1, r5
 80078a8:	4620      	mov	r0, r4
 80078aa:	f001 fbdd 	bl	8009068 <_Bfree>
 80078ae:	e61a      	b.n	80074e6 <_strtod_l+0x666>
 80078b0:	f1ba 0f00 	cmp.w	sl, #0
 80078b4:	d11b      	bne.n	80078ee <_strtod_l+0xa6e>
 80078b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078ba:	b9f3      	cbnz	r3, 80078fa <_strtod_l+0xa7a>
 80078bc:	4b6c      	ldr	r3, [pc, #432]	; (8007a70 <_strtod_l+0xbf0>)
 80078be:	2200      	movs	r2, #0
 80078c0:	4640      	mov	r0, r8
 80078c2:	4649      	mov	r1, r9
 80078c4:	f7f9 f93a 	bl	8000b3c <__aeabi_dcmplt>
 80078c8:	b9d0      	cbnz	r0, 8007900 <_strtod_l+0xa80>
 80078ca:	4640      	mov	r0, r8
 80078cc:	4649      	mov	r1, r9
 80078ce:	4b6c      	ldr	r3, [pc, #432]	; (8007a80 <_strtod_l+0xc00>)
 80078d0:	2200      	movs	r2, #0
 80078d2:	f7f8 fec1 	bl	8000658 <__aeabi_dmul>
 80078d6:	4680      	mov	r8, r0
 80078d8:	4689      	mov	r9, r1
 80078da:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80078de:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80078e2:	9315      	str	r3, [sp, #84]	; 0x54
 80078e4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80078e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80078ec:	e79d      	b.n	800782a <_strtod_l+0x9aa>
 80078ee:	f1ba 0f01 	cmp.w	sl, #1
 80078f2:	d102      	bne.n	80078fa <_strtod_l+0xa7a>
 80078f4:	2f00      	cmp	r7, #0
 80078f6:	f43f ad83 	beq.w	8007400 <_strtod_l+0x580>
 80078fa:	4b62      	ldr	r3, [pc, #392]	; (8007a84 <_strtod_l+0xc04>)
 80078fc:	2200      	movs	r2, #0
 80078fe:	e78e      	b.n	800781e <_strtod_l+0x99e>
 8007900:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007a80 <_strtod_l+0xc00>
 8007904:	f04f 0800 	mov.w	r8, #0
 8007908:	e7e7      	b.n	80078da <_strtod_l+0xa5a>
 800790a:	4b5d      	ldr	r3, [pc, #372]	; (8007a80 <_strtod_l+0xc00>)
 800790c:	4640      	mov	r0, r8
 800790e:	4649      	mov	r1, r9
 8007910:	2200      	movs	r2, #0
 8007912:	f7f8 fea1 	bl	8000658 <__aeabi_dmul>
 8007916:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007918:	4680      	mov	r8, r0
 800791a:	4689      	mov	r9, r1
 800791c:	b933      	cbnz	r3, 800792c <_strtod_l+0xaac>
 800791e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007922:	900e      	str	r0, [sp, #56]	; 0x38
 8007924:	930f      	str	r3, [sp, #60]	; 0x3c
 8007926:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800792a:	e7dd      	b.n	80078e8 <_strtod_l+0xa68>
 800792c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007930:	e7f9      	b.n	8007926 <_strtod_l+0xaa6>
 8007932:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007936:	9b04      	ldr	r3, [sp, #16]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d1a8      	bne.n	800788e <_strtod_l+0xa0e>
 800793c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007940:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007942:	0d1b      	lsrs	r3, r3, #20
 8007944:	051b      	lsls	r3, r3, #20
 8007946:	429a      	cmp	r2, r3
 8007948:	d1a1      	bne.n	800788e <_strtod_l+0xa0e>
 800794a:	4640      	mov	r0, r8
 800794c:	4649      	mov	r1, r9
 800794e:	f7f9 f9e3 	bl	8000d18 <__aeabi_d2lz>
 8007952:	f7f8 fe53 	bl	80005fc <__aeabi_l2d>
 8007956:	4602      	mov	r2, r0
 8007958:	460b      	mov	r3, r1
 800795a:	4640      	mov	r0, r8
 800795c:	4649      	mov	r1, r9
 800795e:	f7f8 fcc3 	bl	80002e8 <__aeabi_dsub>
 8007962:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007964:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007968:	ea43 030a 	orr.w	r3, r3, sl
 800796c:	4313      	orrs	r3, r2
 800796e:	4680      	mov	r8, r0
 8007970:	4689      	mov	r9, r1
 8007972:	d055      	beq.n	8007a20 <_strtod_l+0xba0>
 8007974:	a336      	add	r3, pc, #216	; (adr r3, 8007a50 <_strtod_l+0xbd0>)
 8007976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797a:	f7f9 f8df 	bl	8000b3c <__aeabi_dcmplt>
 800797e:	2800      	cmp	r0, #0
 8007980:	f47f acd0 	bne.w	8007324 <_strtod_l+0x4a4>
 8007984:	a334      	add	r3, pc, #208	; (adr r3, 8007a58 <_strtod_l+0xbd8>)
 8007986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800798a:	4640      	mov	r0, r8
 800798c:	4649      	mov	r1, r9
 800798e:	f7f9 f8f3 	bl	8000b78 <__aeabi_dcmpgt>
 8007992:	2800      	cmp	r0, #0
 8007994:	f43f af7b 	beq.w	800788e <_strtod_l+0xa0e>
 8007998:	e4c4      	b.n	8007324 <_strtod_l+0x4a4>
 800799a:	9b04      	ldr	r3, [sp, #16]
 800799c:	b333      	cbz	r3, 80079ec <_strtod_l+0xb6c>
 800799e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079a0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80079a4:	d822      	bhi.n	80079ec <_strtod_l+0xb6c>
 80079a6:	a32e      	add	r3, pc, #184	; (adr r3, 8007a60 <_strtod_l+0xbe0>)
 80079a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ac:	4640      	mov	r0, r8
 80079ae:	4649      	mov	r1, r9
 80079b0:	f7f9 f8ce 	bl	8000b50 <__aeabi_dcmple>
 80079b4:	b1a0      	cbz	r0, 80079e0 <_strtod_l+0xb60>
 80079b6:	4649      	mov	r1, r9
 80079b8:	4640      	mov	r0, r8
 80079ba:	f7f9 f925 	bl	8000c08 <__aeabi_d2uiz>
 80079be:	2801      	cmp	r0, #1
 80079c0:	bf38      	it	cc
 80079c2:	2001      	movcc	r0, #1
 80079c4:	f7f8 fdce 	bl	8000564 <__aeabi_ui2d>
 80079c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079ca:	4680      	mov	r8, r0
 80079cc:	4689      	mov	r9, r1
 80079ce:	bb23      	cbnz	r3, 8007a1a <_strtod_l+0xb9a>
 80079d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80079d4:	9010      	str	r0, [sp, #64]	; 0x40
 80079d6:	9311      	str	r3, [sp, #68]	; 0x44
 80079d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80079dc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80079e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80079e4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80079e8:	1a9b      	subs	r3, r3, r2
 80079ea:	9309      	str	r3, [sp, #36]	; 0x24
 80079ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80079f0:	eeb0 0a48 	vmov.f32	s0, s16
 80079f4:	eef0 0a68 	vmov.f32	s1, s17
 80079f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80079fc:	f001 fe66 	bl	80096cc <__ulp>
 8007a00:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007a04:	ec53 2b10 	vmov	r2, r3, d0
 8007a08:	f7f8 fe26 	bl	8000658 <__aeabi_dmul>
 8007a0c:	ec53 2b18 	vmov	r2, r3, d8
 8007a10:	f7f8 fc6c 	bl	80002ec <__adddf3>
 8007a14:	4682      	mov	sl, r0
 8007a16:	468b      	mov	fp, r1
 8007a18:	e78d      	b.n	8007936 <_strtod_l+0xab6>
 8007a1a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007a1e:	e7db      	b.n	80079d8 <_strtod_l+0xb58>
 8007a20:	a311      	add	r3, pc, #68	; (adr r3, 8007a68 <_strtod_l+0xbe8>)
 8007a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a26:	f7f9 f889 	bl	8000b3c <__aeabi_dcmplt>
 8007a2a:	e7b2      	b.n	8007992 <_strtod_l+0xb12>
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	930a      	str	r3, [sp, #40]	; 0x28
 8007a30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007a32:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007a34:	6013      	str	r3, [r2, #0]
 8007a36:	f7ff ba6b 	b.w	8006f10 <_strtod_l+0x90>
 8007a3a:	2a65      	cmp	r2, #101	; 0x65
 8007a3c:	f43f ab5f 	beq.w	80070fe <_strtod_l+0x27e>
 8007a40:	2a45      	cmp	r2, #69	; 0x45
 8007a42:	f43f ab5c 	beq.w	80070fe <_strtod_l+0x27e>
 8007a46:	2301      	movs	r3, #1
 8007a48:	f7ff bb94 	b.w	8007174 <_strtod_l+0x2f4>
 8007a4c:	f3af 8000 	nop.w
 8007a50:	94a03595 	.word	0x94a03595
 8007a54:	3fdfffff 	.word	0x3fdfffff
 8007a58:	35afe535 	.word	0x35afe535
 8007a5c:	3fe00000 	.word	0x3fe00000
 8007a60:	ffc00000 	.word	0xffc00000
 8007a64:	41dfffff 	.word	0x41dfffff
 8007a68:	94a03595 	.word	0x94a03595
 8007a6c:	3fcfffff 	.word	0x3fcfffff
 8007a70:	3ff00000 	.word	0x3ff00000
 8007a74:	7ff00000 	.word	0x7ff00000
 8007a78:	7fe00000 	.word	0x7fe00000
 8007a7c:	7c9fffff 	.word	0x7c9fffff
 8007a80:	3fe00000 	.word	0x3fe00000
 8007a84:	bff00000 	.word	0xbff00000
 8007a88:	7fefffff 	.word	0x7fefffff

08007a8c <strtod>:
 8007a8c:	460a      	mov	r2, r1
 8007a8e:	4601      	mov	r1, r0
 8007a90:	4802      	ldr	r0, [pc, #8]	; (8007a9c <strtod+0x10>)
 8007a92:	4b03      	ldr	r3, [pc, #12]	; (8007aa0 <strtod+0x14>)
 8007a94:	6800      	ldr	r0, [r0, #0]
 8007a96:	f7ff b9f3 	b.w	8006e80 <_strtod_l>
 8007a9a:	bf00      	nop
 8007a9c:	20000060 	.word	0x20000060
 8007aa0:	200000c8 	.word	0x200000c8

08007aa4 <strtok>:
 8007aa4:	4b16      	ldr	r3, [pc, #88]	; (8007b00 <strtok+0x5c>)
 8007aa6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007aa8:	681e      	ldr	r6, [r3, #0]
 8007aaa:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8007aac:	4605      	mov	r5, r0
 8007aae:	b9fc      	cbnz	r4, 8007af0 <strtok+0x4c>
 8007ab0:	2050      	movs	r0, #80	; 0x50
 8007ab2:	9101      	str	r1, [sp, #4]
 8007ab4:	f001 fa70 	bl	8008f98 <malloc>
 8007ab8:	9901      	ldr	r1, [sp, #4]
 8007aba:	65b0      	str	r0, [r6, #88]	; 0x58
 8007abc:	4602      	mov	r2, r0
 8007abe:	b920      	cbnz	r0, 8007aca <strtok+0x26>
 8007ac0:	4b10      	ldr	r3, [pc, #64]	; (8007b04 <strtok+0x60>)
 8007ac2:	4811      	ldr	r0, [pc, #68]	; (8007b08 <strtok+0x64>)
 8007ac4:	2157      	movs	r1, #87	; 0x57
 8007ac6:	f000 f849 	bl	8007b5c <__assert_func>
 8007aca:	e9c0 4400 	strd	r4, r4, [r0]
 8007ace:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007ad2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007ad6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8007ada:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8007ade:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8007ae2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8007ae6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8007aea:	6184      	str	r4, [r0, #24]
 8007aec:	7704      	strb	r4, [r0, #28]
 8007aee:	6244      	str	r4, [r0, #36]	; 0x24
 8007af0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8007af2:	2301      	movs	r3, #1
 8007af4:	4628      	mov	r0, r5
 8007af6:	b002      	add	sp, #8
 8007af8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007afc:	f000 b806 	b.w	8007b0c <__strtok_r>
 8007b00:	20000060 	.word	0x20000060
 8007b04:	0800ac90 	.word	0x0800ac90
 8007b08:	0800aca7 	.word	0x0800aca7

08007b0c <__strtok_r>:
 8007b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b0e:	b908      	cbnz	r0, 8007b14 <__strtok_r+0x8>
 8007b10:	6810      	ldr	r0, [r2, #0]
 8007b12:	b188      	cbz	r0, 8007b38 <__strtok_r+0x2c>
 8007b14:	4604      	mov	r4, r0
 8007b16:	4620      	mov	r0, r4
 8007b18:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007b1c:	460f      	mov	r7, r1
 8007b1e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007b22:	b91e      	cbnz	r6, 8007b2c <__strtok_r+0x20>
 8007b24:	b965      	cbnz	r5, 8007b40 <__strtok_r+0x34>
 8007b26:	6015      	str	r5, [r2, #0]
 8007b28:	4628      	mov	r0, r5
 8007b2a:	e005      	b.n	8007b38 <__strtok_r+0x2c>
 8007b2c:	42b5      	cmp	r5, r6
 8007b2e:	d1f6      	bne.n	8007b1e <__strtok_r+0x12>
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d1f0      	bne.n	8007b16 <__strtok_r+0xa>
 8007b34:	6014      	str	r4, [r2, #0]
 8007b36:	7003      	strb	r3, [r0, #0]
 8007b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b3a:	461c      	mov	r4, r3
 8007b3c:	e00c      	b.n	8007b58 <__strtok_r+0x4c>
 8007b3e:	b915      	cbnz	r5, 8007b46 <__strtok_r+0x3a>
 8007b40:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007b44:	460e      	mov	r6, r1
 8007b46:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007b4a:	42ab      	cmp	r3, r5
 8007b4c:	d1f7      	bne.n	8007b3e <__strtok_r+0x32>
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d0f3      	beq.n	8007b3a <__strtok_r+0x2e>
 8007b52:	2300      	movs	r3, #0
 8007b54:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007b58:	6014      	str	r4, [r2, #0]
 8007b5a:	e7ed      	b.n	8007b38 <__strtok_r+0x2c>

08007b5c <__assert_func>:
 8007b5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b5e:	4614      	mov	r4, r2
 8007b60:	461a      	mov	r2, r3
 8007b62:	4b09      	ldr	r3, [pc, #36]	; (8007b88 <__assert_func+0x2c>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4605      	mov	r5, r0
 8007b68:	68d8      	ldr	r0, [r3, #12]
 8007b6a:	b14c      	cbz	r4, 8007b80 <__assert_func+0x24>
 8007b6c:	4b07      	ldr	r3, [pc, #28]	; (8007b8c <__assert_func+0x30>)
 8007b6e:	9100      	str	r1, [sp, #0]
 8007b70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007b74:	4906      	ldr	r1, [pc, #24]	; (8007b90 <__assert_func+0x34>)
 8007b76:	462b      	mov	r3, r5
 8007b78:	f000 fe88 	bl	800888c <fiprintf>
 8007b7c:	f002 fb9e 	bl	800a2bc <abort>
 8007b80:	4b04      	ldr	r3, [pc, #16]	; (8007b94 <__assert_func+0x38>)
 8007b82:	461c      	mov	r4, r3
 8007b84:	e7f3      	b.n	8007b6e <__assert_func+0x12>
 8007b86:	bf00      	nop
 8007b88:	20000060 	.word	0x20000060
 8007b8c:	0800ad04 	.word	0x0800ad04
 8007b90:	0800ad11 	.word	0x0800ad11
 8007b94:	0800ad3f 	.word	0x0800ad3f

08007b98 <quorem>:
 8007b98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b9c:	6903      	ldr	r3, [r0, #16]
 8007b9e:	690c      	ldr	r4, [r1, #16]
 8007ba0:	42a3      	cmp	r3, r4
 8007ba2:	4607      	mov	r7, r0
 8007ba4:	f2c0 8081 	blt.w	8007caa <quorem+0x112>
 8007ba8:	3c01      	subs	r4, #1
 8007baa:	f101 0814 	add.w	r8, r1, #20
 8007bae:	f100 0514 	add.w	r5, r0, #20
 8007bb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007bb6:	9301      	str	r3, [sp, #4]
 8007bb8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007bbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007bc0:	3301      	adds	r3, #1
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007bc8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007bcc:	fbb2 f6f3 	udiv	r6, r2, r3
 8007bd0:	d331      	bcc.n	8007c36 <quorem+0x9e>
 8007bd2:	f04f 0e00 	mov.w	lr, #0
 8007bd6:	4640      	mov	r0, r8
 8007bd8:	46ac      	mov	ip, r5
 8007bda:	46f2      	mov	sl, lr
 8007bdc:	f850 2b04 	ldr.w	r2, [r0], #4
 8007be0:	b293      	uxth	r3, r2
 8007be2:	fb06 e303 	mla	r3, r6, r3, lr
 8007be6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	ebaa 0303 	sub.w	r3, sl, r3
 8007bf0:	f8dc a000 	ldr.w	sl, [ip]
 8007bf4:	0c12      	lsrs	r2, r2, #16
 8007bf6:	fa13 f38a 	uxtah	r3, r3, sl
 8007bfa:	fb06 e202 	mla	r2, r6, r2, lr
 8007bfe:	9300      	str	r3, [sp, #0]
 8007c00:	9b00      	ldr	r3, [sp, #0]
 8007c02:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007c06:	b292      	uxth	r2, r2
 8007c08:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007c0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c10:	f8bd 3000 	ldrh.w	r3, [sp]
 8007c14:	4581      	cmp	r9, r0
 8007c16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c1a:	f84c 3b04 	str.w	r3, [ip], #4
 8007c1e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007c22:	d2db      	bcs.n	8007bdc <quorem+0x44>
 8007c24:	f855 300b 	ldr.w	r3, [r5, fp]
 8007c28:	b92b      	cbnz	r3, 8007c36 <quorem+0x9e>
 8007c2a:	9b01      	ldr	r3, [sp, #4]
 8007c2c:	3b04      	subs	r3, #4
 8007c2e:	429d      	cmp	r5, r3
 8007c30:	461a      	mov	r2, r3
 8007c32:	d32e      	bcc.n	8007c92 <quorem+0xfa>
 8007c34:	613c      	str	r4, [r7, #16]
 8007c36:	4638      	mov	r0, r7
 8007c38:	f001 fca2 	bl	8009580 <__mcmp>
 8007c3c:	2800      	cmp	r0, #0
 8007c3e:	db24      	blt.n	8007c8a <quorem+0xf2>
 8007c40:	3601      	adds	r6, #1
 8007c42:	4628      	mov	r0, r5
 8007c44:	f04f 0c00 	mov.w	ip, #0
 8007c48:	f858 2b04 	ldr.w	r2, [r8], #4
 8007c4c:	f8d0 e000 	ldr.w	lr, [r0]
 8007c50:	b293      	uxth	r3, r2
 8007c52:	ebac 0303 	sub.w	r3, ip, r3
 8007c56:	0c12      	lsrs	r2, r2, #16
 8007c58:	fa13 f38e 	uxtah	r3, r3, lr
 8007c5c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007c60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c6a:	45c1      	cmp	r9, r8
 8007c6c:	f840 3b04 	str.w	r3, [r0], #4
 8007c70:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007c74:	d2e8      	bcs.n	8007c48 <quorem+0xb0>
 8007c76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c7e:	b922      	cbnz	r2, 8007c8a <quorem+0xf2>
 8007c80:	3b04      	subs	r3, #4
 8007c82:	429d      	cmp	r5, r3
 8007c84:	461a      	mov	r2, r3
 8007c86:	d30a      	bcc.n	8007c9e <quorem+0x106>
 8007c88:	613c      	str	r4, [r7, #16]
 8007c8a:	4630      	mov	r0, r6
 8007c8c:	b003      	add	sp, #12
 8007c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c92:	6812      	ldr	r2, [r2, #0]
 8007c94:	3b04      	subs	r3, #4
 8007c96:	2a00      	cmp	r2, #0
 8007c98:	d1cc      	bne.n	8007c34 <quorem+0x9c>
 8007c9a:	3c01      	subs	r4, #1
 8007c9c:	e7c7      	b.n	8007c2e <quorem+0x96>
 8007c9e:	6812      	ldr	r2, [r2, #0]
 8007ca0:	3b04      	subs	r3, #4
 8007ca2:	2a00      	cmp	r2, #0
 8007ca4:	d1f0      	bne.n	8007c88 <quorem+0xf0>
 8007ca6:	3c01      	subs	r4, #1
 8007ca8:	e7eb      	b.n	8007c82 <quorem+0xea>
 8007caa:	2000      	movs	r0, #0
 8007cac:	e7ee      	b.n	8007c8c <quorem+0xf4>
	...

08007cb0 <_dtoa_r>:
 8007cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cb4:	ed2d 8b04 	vpush	{d8-d9}
 8007cb8:	ec57 6b10 	vmov	r6, r7, d0
 8007cbc:	b093      	sub	sp, #76	; 0x4c
 8007cbe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007cc0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007cc4:	9106      	str	r1, [sp, #24]
 8007cc6:	ee10 aa10 	vmov	sl, s0
 8007cca:	4604      	mov	r4, r0
 8007ccc:	9209      	str	r2, [sp, #36]	; 0x24
 8007cce:	930c      	str	r3, [sp, #48]	; 0x30
 8007cd0:	46bb      	mov	fp, r7
 8007cd2:	b975      	cbnz	r5, 8007cf2 <_dtoa_r+0x42>
 8007cd4:	2010      	movs	r0, #16
 8007cd6:	f001 f95f 	bl	8008f98 <malloc>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	6260      	str	r0, [r4, #36]	; 0x24
 8007cde:	b920      	cbnz	r0, 8007cea <_dtoa_r+0x3a>
 8007ce0:	4ba7      	ldr	r3, [pc, #668]	; (8007f80 <_dtoa_r+0x2d0>)
 8007ce2:	21ea      	movs	r1, #234	; 0xea
 8007ce4:	48a7      	ldr	r0, [pc, #668]	; (8007f84 <_dtoa_r+0x2d4>)
 8007ce6:	f7ff ff39 	bl	8007b5c <__assert_func>
 8007cea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007cee:	6005      	str	r5, [r0, #0]
 8007cf0:	60c5      	str	r5, [r0, #12]
 8007cf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cf4:	6819      	ldr	r1, [r3, #0]
 8007cf6:	b151      	cbz	r1, 8007d0e <_dtoa_r+0x5e>
 8007cf8:	685a      	ldr	r2, [r3, #4]
 8007cfa:	604a      	str	r2, [r1, #4]
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	4093      	lsls	r3, r2
 8007d00:	608b      	str	r3, [r1, #8]
 8007d02:	4620      	mov	r0, r4
 8007d04:	f001 f9b0 	bl	8009068 <_Bfree>
 8007d08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	601a      	str	r2, [r3, #0]
 8007d0e:	1e3b      	subs	r3, r7, #0
 8007d10:	bfaa      	itet	ge
 8007d12:	2300      	movge	r3, #0
 8007d14:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007d18:	f8c8 3000 	strge.w	r3, [r8]
 8007d1c:	4b9a      	ldr	r3, [pc, #616]	; (8007f88 <_dtoa_r+0x2d8>)
 8007d1e:	bfbc      	itt	lt
 8007d20:	2201      	movlt	r2, #1
 8007d22:	f8c8 2000 	strlt.w	r2, [r8]
 8007d26:	ea33 030b 	bics.w	r3, r3, fp
 8007d2a:	d11b      	bne.n	8007d64 <_dtoa_r+0xb4>
 8007d2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d2e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007d32:	6013      	str	r3, [r2, #0]
 8007d34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d38:	4333      	orrs	r3, r6
 8007d3a:	f000 8592 	beq.w	8008862 <_dtoa_r+0xbb2>
 8007d3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d40:	b963      	cbnz	r3, 8007d5c <_dtoa_r+0xac>
 8007d42:	4b92      	ldr	r3, [pc, #584]	; (8007f8c <_dtoa_r+0x2dc>)
 8007d44:	e022      	b.n	8007d8c <_dtoa_r+0xdc>
 8007d46:	4b92      	ldr	r3, [pc, #584]	; (8007f90 <_dtoa_r+0x2e0>)
 8007d48:	9301      	str	r3, [sp, #4]
 8007d4a:	3308      	adds	r3, #8
 8007d4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007d4e:	6013      	str	r3, [r2, #0]
 8007d50:	9801      	ldr	r0, [sp, #4]
 8007d52:	b013      	add	sp, #76	; 0x4c
 8007d54:	ecbd 8b04 	vpop	{d8-d9}
 8007d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d5c:	4b8b      	ldr	r3, [pc, #556]	; (8007f8c <_dtoa_r+0x2dc>)
 8007d5e:	9301      	str	r3, [sp, #4]
 8007d60:	3303      	adds	r3, #3
 8007d62:	e7f3      	b.n	8007d4c <_dtoa_r+0x9c>
 8007d64:	2200      	movs	r2, #0
 8007d66:	2300      	movs	r3, #0
 8007d68:	4650      	mov	r0, sl
 8007d6a:	4659      	mov	r1, fp
 8007d6c:	f7f8 fedc 	bl	8000b28 <__aeabi_dcmpeq>
 8007d70:	ec4b ab19 	vmov	d9, sl, fp
 8007d74:	4680      	mov	r8, r0
 8007d76:	b158      	cbz	r0, 8007d90 <_dtoa_r+0xe0>
 8007d78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	6013      	str	r3, [r2, #0]
 8007d7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	f000 856b 	beq.w	800885c <_dtoa_r+0xbac>
 8007d86:	4883      	ldr	r0, [pc, #524]	; (8007f94 <_dtoa_r+0x2e4>)
 8007d88:	6018      	str	r0, [r3, #0]
 8007d8a:	1e43      	subs	r3, r0, #1
 8007d8c:	9301      	str	r3, [sp, #4]
 8007d8e:	e7df      	b.n	8007d50 <_dtoa_r+0xa0>
 8007d90:	ec4b ab10 	vmov	d0, sl, fp
 8007d94:	aa10      	add	r2, sp, #64	; 0x40
 8007d96:	a911      	add	r1, sp, #68	; 0x44
 8007d98:	4620      	mov	r0, r4
 8007d9a:	f001 fd13 	bl	80097c4 <__d2b>
 8007d9e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007da2:	ee08 0a10 	vmov	s16, r0
 8007da6:	2d00      	cmp	r5, #0
 8007da8:	f000 8084 	beq.w	8007eb4 <_dtoa_r+0x204>
 8007dac:	ee19 3a90 	vmov	r3, s19
 8007db0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007db4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007db8:	4656      	mov	r6, sl
 8007dba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007dbe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007dc2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007dc6:	4b74      	ldr	r3, [pc, #464]	; (8007f98 <_dtoa_r+0x2e8>)
 8007dc8:	2200      	movs	r2, #0
 8007dca:	4630      	mov	r0, r6
 8007dcc:	4639      	mov	r1, r7
 8007dce:	f7f8 fa8b 	bl	80002e8 <__aeabi_dsub>
 8007dd2:	a365      	add	r3, pc, #404	; (adr r3, 8007f68 <_dtoa_r+0x2b8>)
 8007dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd8:	f7f8 fc3e 	bl	8000658 <__aeabi_dmul>
 8007ddc:	a364      	add	r3, pc, #400	; (adr r3, 8007f70 <_dtoa_r+0x2c0>)
 8007dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de2:	f7f8 fa83 	bl	80002ec <__adddf3>
 8007de6:	4606      	mov	r6, r0
 8007de8:	4628      	mov	r0, r5
 8007dea:	460f      	mov	r7, r1
 8007dec:	f7f8 fbca 	bl	8000584 <__aeabi_i2d>
 8007df0:	a361      	add	r3, pc, #388	; (adr r3, 8007f78 <_dtoa_r+0x2c8>)
 8007df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df6:	f7f8 fc2f 	bl	8000658 <__aeabi_dmul>
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	4630      	mov	r0, r6
 8007e00:	4639      	mov	r1, r7
 8007e02:	f7f8 fa73 	bl	80002ec <__adddf3>
 8007e06:	4606      	mov	r6, r0
 8007e08:	460f      	mov	r7, r1
 8007e0a:	f7f8 fed5 	bl	8000bb8 <__aeabi_d2iz>
 8007e0e:	2200      	movs	r2, #0
 8007e10:	9000      	str	r0, [sp, #0]
 8007e12:	2300      	movs	r3, #0
 8007e14:	4630      	mov	r0, r6
 8007e16:	4639      	mov	r1, r7
 8007e18:	f7f8 fe90 	bl	8000b3c <__aeabi_dcmplt>
 8007e1c:	b150      	cbz	r0, 8007e34 <_dtoa_r+0x184>
 8007e1e:	9800      	ldr	r0, [sp, #0]
 8007e20:	f7f8 fbb0 	bl	8000584 <__aeabi_i2d>
 8007e24:	4632      	mov	r2, r6
 8007e26:	463b      	mov	r3, r7
 8007e28:	f7f8 fe7e 	bl	8000b28 <__aeabi_dcmpeq>
 8007e2c:	b910      	cbnz	r0, 8007e34 <_dtoa_r+0x184>
 8007e2e:	9b00      	ldr	r3, [sp, #0]
 8007e30:	3b01      	subs	r3, #1
 8007e32:	9300      	str	r3, [sp, #0]
 8007e34:	9b00      	ldr	r3, [sp, #0]
 8007e36:	2b16      	cmp	r3, #22
 8007e38:	d85a      	bhi.n	8007ef0 <_dtoa_r+0x240>
 8007e3a:	9a00      	ldr	r2, [sp, #0]
 8007e3c:	4b57      	ldr	r3, [pc, #348]	; (8007f9c <_dtoa_r+0x2ec>)
 8007e3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e46:	ec51 0b19 	vmov	r0, r1, d9
 8007e4a:	f7f8 fe77 	bl	8000b3c <__aeabi_dcmplt>
 8007e4e:	2800      	cmp	r0, #0
 8007e50:	d050      	beq.n	8007ef4 <_dtoa_r+0x244>
 8007e52:	9b00      	ldr	r3, [sp, #0]
 8007e54:	3b01      	subs	r3, #1
 8007e56:	9300      	str	r3, [sp, #0]
 8007e58:	2300      	movs	r3, #0
 8007e5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e5e:	1b5d      	subs	r5, r3, r5
 8007e60:	1e6b      	subs	r3, r5, #1
 8007e62:	9305      	str	r3, [sp, #20]
 8007e64:	bf45      	ittet	mi
 8007e66:	f1c5 0301 	rsbmi	r3, r5, #1
 8007e6a:	9304      	strmi	r3, [sp, #16]
 8007e6c:	2300      	movpl	r3, #0
 8007e6e:	2300      	movmi	r3, #0
 8007e70:	bf4c      	ite	mi
 8007e72:	9305      	strmi	r3, [sp, #20]
 8007e74:	9304      	strpl	r3, [sp, #16]
 8007e76:	9b00      	ldr	r3, [sp, #0]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	db3d      	blt.n	8007ef8 <_dtoa_r+0x248>
 8007e7c:	9b05      	ldr	r3, [sp, #20]
 8007e7e:	9a00      	ldr	r2, [sp, #0]
 8007e80:	920a      	str	r2, [sp, #40]	; 0x28
 8007e82:	4413      	add	r3, r2
 8007e84:	9305      	str	r3, [sp, #20]
 8007e86:	2300      	movs	r3, #0
 8007e88:	9307      	str	r3, [sp, #28]
 8007e8a:	9b06      	ldr	r3, [sp, #24]
 8007e8c:	2b09      	cmp	r3, #9
 8007e8e:	f200 8089 	bhi.w	8007fa4 <_dtoa_r+0x2f4>
 8007e92:	2b05      	cmp	r3, #5
 8007e94:	bfc4      	itt	gt
 8007e96:	3b04      	subgt	r3, #4
 8007e98:	9306      	strgt	r3, [sp, #24]
 8007e9a:	9b06      	ldr	r3, [sp, #24]
 8007e9c:	f1a3 0302 	sub.w	r3, r3, #2
 8007ea0:	bfcc      	ite	gt
 8007ea2:	2500      	movgt	r5, #0
 8007ea4:	2501      	movle	r5, #1
 8007ea6:	2b03      	cmp	r3, #3
 8007ea8:	f200 8087 	bhi.w	8007fba <_dtoa_r+0x30a>
 8007eac:	e8df f003 	tbb	[pc, r3]
 8007eb0:	59383a2d 	.word	0x59383a2d
 8007eb4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007eb8:	441d      	add	r5, r3
 8007eba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007ebe:	2b20      	cmp	r3, #32
 8007ec0:	bfc1      	itttt	gt
 8007ec2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007ec6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007eca:	fa0b f303 	lslgt.w	r3, fp, r3
 8007ece:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007ed2:	bfda      	itte	le
 8007ed4:	f1c3 0320 	rsble	r3, r3, #32
 8007ed8:	fa06 f003 	lslle.w	r0, r6, r3
 8007edc:	4318      	orrgt	r0, r3
 8007ede:	f7f8 fb41 	bl	8000564 <__aeabi_ui2d>
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	4606      	mov	r6, r0
 8007ee6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007eea:	3d01      	subs	r5, #1
 8007eec:	930e      	str	r3, [sp, #56]	; 0x38
 8007eee:	e76a      	b.n	8007dc6 <_dtoa_r+0x116>
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e7b2      	b.n	8007e5a <_dtoa_r+0x1aa>
 8007ef4:	900b      	str	r0, [sp, #44]	; 0x2c
 8007ef6:	e7b1      	b.n	8007e5c <_dtoa_r+0x1ac>
 8007ef8:	9b04      	ldr	r3, [sp, #16]
 8007efa:	9a00      	ldr	r2, [sp, #0]
 8007efc:	1a9b      	subs	r3, r3, r2
 8007efe:	9304      	str	r3, [sp, #16]
 8007f00:	4253      	negs	r3, r2
 8007f02:	9307      	str	r3, [sp, #28]
 8007f04:	2300      	movs	r3, #0
 8007f06:	930a      	str	r3, [sp, #40]	; 0x28
 8007f08:	e7bf      	b.n	8007e8a <_dtoa_r+0x1da>
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	9308      	str	r3, [sp, #32]
 8007f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	dc55      	bgt.n	8007fc0 <_dtoa_r+0x310>
 8007f14:	2301      	movs	r3, #1
 8007f16:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	9209      	str	r2, [sp, #36]	; 0x24
 8007f1e:	e00c      	b.n	8007f3a <_dtoa_r+0x28a>
 8007f20:	2301      	movs	r3, #1
 8007f22:	e7f3      	b.n	8007f0c <_dtoa_r+0x25c>
 8007f24:	2300      	movs	r3, #0
 8007f26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f28:	9308      	str	r3, [sp, #32]
 8007f2a:	9b00      	ldr	r3, [sp, #0]
 8007f2c:	4413      	add	r3, r2
 8007f2e:	9302      	str	r3, [sp, #8]
 8007f30:	3301      	adds	r3, #1
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	9303      	str	r3, [sp, #12]
 8007f36:	bfb8      	it	lt
 8007f38:	2301      	movlt	r3, #1
 8007f3a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	6042      	str	r2, [r0, #4]
 8007f40:	2204      	movs	r2, #4
 8007f42:	f102 0614 	add.w	r6, r2, #20
 8007f46:	429e      	cmp	r6, r3
 8007f48:	6841      	ldr	r1, [r0, #4]
 8007f4a:	d93d      	bls.n	8007fc8 <_dtoa_r+0x318>
 8007f4c:	4620      	mov	r0, r4
 8007f4e:	f001 f84b 	bl	8008fe8 <_Balloc>
 8007f52:	9001      	str	r0, [sp, #4]
 8007f54:	2800      	cmp	r0, #0
 8007f56:	d13b      	bne.n	8007fd0 <_dtoa_r+0x320>
 8007f58:	4b11      	ldr	r3, [pc, #68]	; (8007fa0 <_dtoa_r+0x2f0>)
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007f60:	e6c0      	b.n	8007ce4 <_dtoa_r+0x34>
 8007f62:	2301      	movs	r3, #1
 8007f64:	e7df      	b.n	8007f26 <_dtoa_r+0x276>
 8007f66:	bf00      	nop
 8007f68:	636f4361 	.word	0x636f4361
 8007f6c:	3fd287a7 	.word	0x3fd287a7
 8007f70:	8b60c8b3 	.word	0x8b60c8b3
 8007f74:	3fc68a28 	.word	0x3fc68a28
 8007f78:	509f79fb 	.word	0x509f79fb
 8007f7c:	3fd34413 	.word	0x3fd34413
 8007f80:	0800ac90 	.word	0x0800ac90
 8007f84:	0800ad4d 	.word	0x0800ad4d
 8007f88:	7ff00000 	.word	0x7ff00000
 8007f8c:	0800ad49 	.word	0x0800ad49
 8007f90:	0800ad40 	.word	0x0800ad40
 8007f94:	0800ac19 	.word	0x0800ac19
 8007f98:	3ff80000 	.word	0x3ff80000
 8007f9c:	0800aeb8 	.word	0x0800aeb8
 8007fa0:	0800ada8 	.word	0x0800ada8
 8007fa4:	2501      	movs	r5, #1
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	9306      	str	r3, [sp, #24]
 8007faa:	9508      	str	r5, [sp, #32]
 8007fac:	f04f 33ff 	mov.w	r3, #4294967295
 8007fb0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	2312      	movs	r3, #18
 8007fb8:	e7b0      	b.n	8007f1c <_dtoa_r+0x26c>
 8007fba:	2301      	movs	r3, #1
 8007fbc:	9308      	str	r3, [sp, #32]
 8007fbe:	e7f5      	b.n	8007fac <_dtoa_r+0x2fc>
 8007fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fc2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007fc6:	e7b8      	b.n	8007f3a <_dtoa_r+0x28a>
 8007fc8:	3101      	adds	r1, #1
 8007fca:	6041      	str	r1, [r0, #4]
 8007fcc:	0052      	lsls	r2, r2, #1
 8007fce:	e7b8      	b.n	8007f42 <_dtoa_r+0x292>
 8007fd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fd2:	9a01      	ldr	r2, [sp, #4]
 8007fd4:	601a      	str	r2, [r3, #0]
 8007fd6:	9b03      	ldr	r3, [sp, #12]
 8007fd8:	2b0e      	cmp	r3, #14
 8007fda:	f200 809d 	bhi.w	8008118 <_dtoa_r+0x468>
 8007fde:	2d00      	cmp	r5, #0
 8007fe0:	f000 809a 	beq.w	8008118 <_dtoa_r+0x468>
 8007fe4:	9b00      	ldr	r3, [sp, #0]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	dd32      	ble.n	8008050 <_dtoa_r+0x3a0>
 8007fea:	4ab7      	ldr	r2, [pc, #732]	; (80082c8 <_dtoa_r+0x618>)
 8007fec:	f003 030f 	and.w	r3, r3, #15
 8007ff0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007ff4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ff8:	9b00      	ldr	r3, [sp, #0]
 8007ffa:	05d8      	lsls	r0, r3, #23
 8007ffc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008000:	d516      	bpl.n	8008030 <_dtoa_r+0x380>
 8008002:	4bb2      	ldr	r3, [pc, #712]	; (80082cc <_dtoa_r+0x61c>)
 8008004:	ec51 0b19 	vmov	r0, r1, d9
 8008008:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800800c:	f7f8 fc4e 	bl	80008ac <__aeabi_ddiv>
 8008010:	f007 070f 	and.w	r7, r7, #15
 8008014:	4682      	mov	sl, r0
 8008016:	468b      	mov	fp, r1
 8008018:	2503      	movs	r5, #3
 800801a:	4eac      	ldr	r6, [pc, #688]	; (80082cc <_dtoa_r+0x61c>)
 800801c:	b957      	cbnz	r7, 8008034 <_dtoa_r+0x384>
 800801e:	4642      	mov	r2, r8
 8008020:	464b      	mov	r3, r9
 8008022:	4650      	mov	r0, sl
 8008024:	4659      	mov	r1, fp
 8008026:	f7f8 fc41 	bl	80008ac <__aeabi_ddiv>
 800802a:	4682      	mov	sl, r0
 800802c:	468b      	mov	fp, r1
 800802e:	e028      	b.n	8008082 <_dtoa_r+0x3d2>
 8008030:	2502      	movs	r5, #2
 8008032:	e7f2      	b.n	800801a <_dtoa_r+0x36a>
 8008034:	07f9      	lsls	r1, r7, #31
 8008036:	d508      	bpl.n	800804a <_dtoa_r+0x39a>
 8008038:	4640      	mov	r0, r8
 800803a:	4649      	mov	r1, r9
 800803c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008040:	f7f8 fb0a 	bl	8000658 <__aeabi_dmul>
 8008044:	3501      	adds	r5, #1
 8008046:	4680      	mov	r8, r0
 8008048:	4689      	mov	r9, r1
 800804a:	107f      	asrs	r7, r7, #1
 800804c:	3608      	adds	r6, #8
 800804e:	e7e5      	b.n	800801c <_dtoa_r+0x36c>
 8008050:	f000 809b 	beq.w	800818a <_dtoa_r+0x4da>
 8008054:	9b00      	ldr	r3, [sp, #0]
 8008056:	4f9d      	ldr	r7, [pc, #628]	; (80082cc <_dtoa_r+0x61c>)
 8008058:	425e      	negs	r6, r3
 800805a:	4b9b      	ldr	r3, [pc, #620]	; (80082c8 <_dtoa_r+0x618>)
 800805c:	f006 020f 	and.w	r2, r6, #15
 8008060:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008068:	ec51 0b19 	vmov	r0, r1, d9
 800806c:	f7f8 faf4 	bl	8000658 <__aeabi_dmul>
 8008070:	1136      	asrs	r6, r6, #4
 8008072:	4682      	mov	sl, r0
 8008074:	468b      	mov	fp, r1
 8008076:	2300      	movs	r3, #0
 8008078:	2502      	movs	r5, #2
 800807a:	2e00      	cmp	r6, #0
 800807c:	d17a      	bne.n	8008174 <_dtoa_r+0x4c4>
 800807e:	2b00      	cmp	r3, #0
 8008080:	d1d3      	bne.n	800802a <_dtoa_r+0x37a>
 8008082:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008084:	2b00      	cmp	r3, #0
 8008086:	f000 8082 	beq.w	800818e <_dtoa_r+0x4de>
 800808a:	4b91      	ldr	r3, [pc, #580]	; (80082d0 <_dtoa_r+0x620>)
 800808c:	2200      	movs	r2, #0
 800808e:	4650      	mov	r0, sl
 8008090:	4659      	mov	r1, fp
 8008092:	f7f8 fd53 	bl	8000b3c <__aeabi_dcmplt>
 8008096:	2800      	cmp	r0, #0
 8008098:	d079      	beq.n	800818e <_dtoa_r+0x4de>
 800809a:	9b03      	ldr	r3, [sp, #12]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d076      	beq.n	800818e <_dtoa_r+0x4de>
 80080a0:	9b02      	ldr	r3, [sp, #8]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	dd36      	ble.n	8008114 <_dtoa_r+0x464>
 80080a6:	9b00      	ldr	r3, [sp, #0]
 80080a8:	4650      	mov	r0, sl
 80080aa:	4659      	mov	r1, fp
 80080ac:	1e5f      	subs	r7, r3, #1
 80080ae:	2200      	movs	r2, #0
 80080b0:	4b88      	ldr	r3, [pc, #544]	; (80082d4 <_dtoa_r+0x624>)
 80080b2:	f7f8 fad1 	bl	8000658 <__aeabi_dmul>
 80080b6:	9e02      	ldr	r6, [sp, #8]
 80080b8:	4682      	mov	sl, r0
 80080ba:	468b      	mov	fp, r1
 80080bc:	3501      	adds	r5, #1
 80080be:	4628      	mov	r0, r5
 80080c0:	f7f8 fa60 	bl	8000584 <__aeabi_i2d>
 80080c4:	4652      	mov	r2, sl
 80080c6:	465b      	mov	r3, fp
 80080c8:	f7f8 fac6 	bl	8000658 <__aeabi_dmul>
 80080cc:	4b82      	ldr	r3, [pc, #520]	; (80082d8 <_dtoa_r+0x628>)
 80080ce:	2200      	movs	r2, #0
 80080d0:	f7f8 f90c 	bl	80002ec <__adddf3>
 80080d4:	46d0      	mov	r8, sl
 80080d6:	46d9      	mov	r9, fp
 80080d8:	4682      	mov	sl, r0
 80080da:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80080de:	2e00      	cmp	r6, #0
 80080e0:	d158      	bne.n	8008194 <_dtoa_r+0x4e4>
 80080e2:	4b7e      	ldr	r3, [pc, #504]	; (80082dc <_dtoa_r+0x62c>)
 80080e4:	2200      	movs	r2, #0
 80080e6:	4640      	mov	r0, r8
 80080e8:	4649      	mov	r1, r9
 80080ea:	f7f8 f8fd 	bl	80002e8 <__aeabi_dsub>
 80080ee:	4652      	mov	r2, sl
 80080f0:	465b      	mov	r3, fp
 80080f2:	4680      	mov	r8, r0
 80080f4:	4689      	mov	r9, r1
 80080f6:	f7f8 fd3f 	bl	8000b78 <__aeabi_dcmpgt>
 80080fa:	2800      	cmp	r0, #0
 80080fc:	f040 8295 	bne.w	800862a <_dtoa_r+0x97a>
 8008100:	4652      	mov	r2, sl
 8008102:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008106:	4640      	mov	r0, r8
 8008108:	4649      	mov	r1, r9
 800810a:	f7f8 fd17 	bl	8000b3c <__aeabi_dcmplt>
 800810e:	2800      	cmp	r0, #0
 8008110:	f040 8289 	bne.w	8008626 <_dtoa_r+0x976>
 8008114:	ec5b ab19 	vmov	sl, fp, d9
 8008118:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800811a:	2b00      	cmp	r3, #0
 800811c:	f2c0 8148 	blt.w	80083b0 <_dtoa_r+0x700>
 8008120:	9a00      	ldr	r2, [sp, #0]
 8008122:	2a0e      	cmp	r2, #14
 8008124:	f300 8144 	bgt.w	80083b0 <_dtoa_r+0x700>
 8008128:	4b67      	ldr	r3, [pc, #412]	; (80082c8 <_dtoa_r+0x618>)
 800812a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800812e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008132:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008134:	2b00      	cmp	r3, #0
 8008136:	f280 80d5 	bge.w	80082e4 <_dtoa_r+0x634>
 800813a:	9b03      	ldr	r3, [sp, #12]
 800813c:	2b00      	cmp	r3, #0
 800813e:	f300 80d1 	bgt.w	80082e4 <_dtoa_r+0x634>
 8008142:	f040 826f 	bne.w	8008624 <_dtoa_r+0x974>
 8008146:	4b65      	ldr	r3, [pc, #404]	; (80082dc <_dtoa_r+0x62c>)
 8008148:	2200      	movs	r2, #0
 800814a:	4640      	mov	r0, r8
 800814c:	4649      	mov	r1, r9
 800814e:	f7f8 fa83 	bl	8000658 <__aeabi_dmul>
 8008152:	4652      	mov	r2, sl
 8008154:	465b      	mov	r3, fp
 8008156:	f7f8 fd05 	bl	8000b64 <__aeabi_dcmpge>
 800815a:	9e03      	ldr	r6, [sp, #12]
 800815c:	4637      	mov	r7, r6
 800815e:	2800      	cmp	r0, #0
 8008160:	f040 8245 	bne.w	80085ee <_dtoa_r+0x93e>
 8008164:	9d01      	ldr	r5, [sp, #4]
 8008166:	2331      	movs	r3, #49	; 0x31
 8008168:	f805 3b01 	strb.w	r3, [r5], #1
 800816c:	9b00      	ldr	r3, [sp, #0]
 800816e:	3301      	adds	r3, #1
 8008170:	9300      	str	r3, [sp, #0]
 8008172:	e240      	b.n	80085f6 <_dtoa_r+0x946>
 8008174:	07f2      	lsls	r2, r6, #31
 8008176:	d505      	bpl.n	8008184 <_dtoa_r+0x4d4>
 8008178:	e9d7 2300 	ldrd	r2, r3, [r7]
 800817c:	f7f8 fa6c 	bl	8000658 <__aeabi_dmul>
 8008180:	3501      	adds	r5, #1
 8008182:	2301      	movs	r3, #1
 8008184:	1076      	asrs	r6, r6, #1
 8008186:	3708      	adds	r7, #8
 8008188:	e777      	b.n	800807a <_dtoa_r+0x3ca>
 800818a:	2502      	movs	r5, #2
 800818c:	e779      	b.n	8008082 <_dtoa_r+0x3d2>
 800818e:	9f00      	ldr	r7, [sp, #0]
 8008190:	9e03      	ldr	r6, [sp, #12]
 8008192:	e794      	b.n	80080be <_dtoa_r+0x40e>
 8008194:	9901      	ldr	r1, [sp, #4]
 8008196:	4b4c      	ldr	r3, [pc, #304]	; (80082c8 <_dtoa_r+0x618>)
 8008198:	4431      	add	r1, r6
 800819a:	910d      	str	r1, [sp, #52]	; 0x34
 800819c:	9908      	ldr	r1, [sp, #32]
 800819e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80081a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80081a6:	2900      	cmp	r1, #0
 80081a8:	d043      	beq.n	8008232 <_dtoa_r+0x582>
 80081aa:	494d      	ldr	r1, [pc, #308]	; (80082e0 <_dtoa_r+0x630>)
 80081ac:	2000      	movs	r0, #0
 80081ae:	f7f8 fb7d 	bl	80008ac <__aeabi_ddiv>
 80081b2:	4652      	mov	r2, sl
 80081b4:	465b      	mov	r3, fp
 80081b6:	f7f8 f897 	bl	80002e8 <__aeabi_dsub>
 80081ba:	9d01      	ldr	r5, [sp, #4]
 80081bc:	4682      	mov	sl, r0
 80081be:	468b      	mov	fp, r1
 80081c0:	4649      	mov	r1, r9
 80081c2:	4640      	mov	r0, r8
 80081c4:	f7f8 fcf8 	bl	8000bb8 <__aeabi_d2iz>
 80081c8:	4606      	mov	r6, r0
 80081ca:	f7f8 f9db 	bl	8000584 <__aeabi_i2d>
 80081ce:	4602      	mov	r2, r0
 80081d0:	460b      	mov	r3, r1
 80081d2:	4640      	mov	r0, r8
 80081d4:	4649      	mov	r1, r9
 80081d6:	f7f8 f887 	bl	80002e8 <__aeabi_dsub>
 80081da:	3630      	adds	r6, #48	; 0x30
 80081dc:	f805 6b01 	strb.w	r6, [r5], #1
 80081e0:	4652      	mov	r2, sl
 80081e2:	465b      	mov	r3, fp
 80081e4:	4680      	mov	r8, r0
 80081e6:	4689      	mov	r9, r1
 80081e8:	f7f8 fca8 	bl	8000b3c <__aeabi_dcmplt>
 80081ec:	2800      	cmp	r0, #0
 80081ee:	d163      	bne.n	80082b8 <_dtoa_r+0x608>
 80081f0:	4642      	mov	r2, r8
 80081f2:	464b      	mov	r3, r9
 80081f4:	4936      	ldr	r1, [pc, #216]	; (80082d0 <_dtoa_r+0x620>)
 80081f6:	2000      	movs	r0, #0
 80081f8:	f7f8 f876 	bl	80002e8 <__aeabi_dsub>
 80081fc:	4652      	mov	r2, sl
 80081fe:	465b      	mov	r3, fp
 8008200:	f7f8 fc9c 	bl	8000b3c <__aeabi_dcmplt>
 8008204:	2800      	cmp	r0, #0
 8008206:	f040 80b5 	bne.w	8008374 <_dtoa_r+0x6c4>
 800820a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800820c:	429d      	cmp	r5, r3
 800820e:	d081      	beq.n	8008114 <_dtoa_r+0x464>
 8008210:	4b30      	ldr	r3, [pc, #192]	; (80082d4 <_dtoa_r+0x624>)
 8008212:	2200      	movs	r2, #0
 8008214:	4650      	mov	r0, sl
 8008216:	4659      	mov	r1, fp
 8008218:	f7f8 fa1e 	bl	8000658 <__aeabi_dmul>
 800821c:	4b2d      	ldr	r3, [pc, #180]	; (80082d4 <_dtoa_r+0x624>)
 800821e:	4682      	mov	sl, r0
 8008220:	468b      	mov	fp, r1
 8008222:	4640      	mov	r0, r8
 8008224:	4649      	mov	r1, r9
 8008226:	2200      	movs	r2, #0
 8008228:	f7f8 fa16 	bl	8000658 <__aeabi_dmul>
 800822c:	4680      	mov	r8, r0
 800822e:	4689      	mov	r9, r1
 8008230:	e7c6      	b.n	80081c0 <_dtoa_r+0x510>
 8008232:	4650      	mov	r0, sl
 8008234:	4659      	mov	r1, fp
 8008236:	f7f8 fa0f 	bl	8000658 <__aeabi_dmul>
 800823a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800823c:	9d01      	ldr	r5, [sp, #4]
 800823e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008240:	4682      	mov	sl, r0
 8008242:	468b      	mov	fp, r1
 8008244:	4649      	mov	r1, r9
 8008246:	4640      	mov	r0, r8
 8008248:	f7f8 fcb6 	bl	8000bb8 <__aeabi_d2iz>
 800824c:	4606      	mov	r6, r0
 800824e:	f7f8 f999 	bl	8000584 <__aeabi_i2d>
 8008252:	3630      	adds	r6, #48	; 0x30
 8008254:	4602      	mov	r2, r0
 8008256:	460b      	mov	r3, r1
 8008258:	4640      	mov	r0, r8
 800825a:	4649      	mov	r1, r9
 800825c:	f7f8 f844 	bl	80002e8 <__aeabi_dsub>
 8008260:	f805 6b01 	strb.w	r6, [r5], #1
 8008264:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008266:	429d      	cmp	r5, r3
 8008268:	4680      	mov	r8, r0
 800826a:	4689      	mov	r9, r1
 800826c:	f04f 0200 	mov.w	r2, #0
 8008270:	d124      	bne.n	80082bc <_dtoa_r+0x60c>
 8008272:	4b1b      	ldr	r3, [pc, #108]	; (80082e0 <_dtoa_r+0x630>)
 8008274:	4650      	mov	r0, sl
 8008276:	4659      	mov	r1, fp
 8008278:	f7f8 f838 	bl	80002ec <__adddf3>
 800827c:	4602      	mov	r2, r0
 800827e:	460b      	mov	r3, r1
 8008280:	4640      	mov	r0, r8
 8008282:	4649      	mov	r1, r9
 8008284:	f7f8 fc78 	bl	8000b78 <__aeabi_dcmpgt>
 8008288:	2800      	cmp	r0, #0
 800828a:	d173      	bne.n	8008374 <_dtoa_r+0x6c4>
 800828c:	4652      	mov	r2, sl
 800828e:	465b      	mov	r3, fp
 8008290:	4913      	ldr	r1, [pc, #76]	; (80082e0 <_dtoa_r+0x630>)
 8008292:	2000      	movs	r0, #0
 8008294:	f7f8 f828 	bl	80002e8 <__aeabi_dsub>
 8008298:	4602      	mov	r2, r0
 800829a:	460b      	mov	r3, r1
 800829c:	4640      	mov	r0, r8
 800829e:	4649      	mov	r1, r9
 80082a0:	f7f8 fc4c 	bl	8000b3c <__aeabi_dcmplt>
 80082a4:	2800      	cmp	r0, #0
 80082a6:	f43f af35 	beq.w	8008114 <_dtoa_r+0x464>
 80082aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80082ac:	1e6b      	subs	r3, r5, #1
 80082ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80082b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80082b4:	2b30      	cmp	r3, #48	; 0x30
 80082b6:	d0f8      	beq.n	80082aa <_dtoa_r+0x5fa>
 80082b8:	9700      	str	r7, [sp, #0]
 80082ba:	e049      	b.n	8008350 <_dtoa_r+0x6a0>
 80082bc:	4b05      	ldr	r3, [pc, #20]	; (80082d4 <_dtoa_r+0x624>)
 80082be:	f7f8 f9cb 	bl	8000658 <__aeabi_dmul>
 80082c2:	4680      	mov	r8, r0
 80082c4:	4689      	mov	r9, r1
 80082c6:	e7bd      	b.n	8008244 <_dtoa_r+0x594>
 80082c8:	0800aeb8 	.word	0x0800aeb8
 80082cc:	0800ae90 	.word	0x0800ae90
 80082d0:	3ff00000 	.word	0x3ff00000
 80082d4:	40240000 	.word	0x40240000
 80082d8:	401c0000 	.word	0x401c0000
 80082dc:	40140000 	.word	0x40140000
 80082e0:	3fe00000 	.word	0x3fe00000
 80082e4:	9d01      	ldr	r5, [sp, #4]
 80082e6:	4656      	mov	r6, sl
 80082e8:	465f      	mov	r7, fp
 80082ea:	4642      	mov	r2, r8
 80082ec:	464b      	mov	r3, r9
 80082ee:	4630      	mov	r0, r6
 80082f0:	4639      	mov	r1, r7
 80082f2:	f7f8 fadb 	bl	80008ac <__aeabi_ddiv>
 80082f6:	f7f8 fc5f 	bl	8000bb8 <__aeabi_d2iz>
 80082fa:	4682      	mov	sl, r0
 80082fc:	f7f8 f942 	bl	8000584 <__aeabi_i2d>
 8008300:	4642      	mov	r2, r8
 8008302:	464b      	mov	r3, r9
 8008304:	f7f8 f9a8 	bl	8000658 <__aeabi_dmul>
 8008308:	4602      	mov	r2, r0
 800830a:	460b      	mov	r3, r1
 800830c:	4630      	mov	r0, r6
 800830e:	4639      	mov	r1, r7
 8008310:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008314:	f7f7 ffe8 	bl	80002e8 <__aeabi_dsub>
 8008318:	f805 6b01 	strb.w	r6, [r5], #1
 800831c:	9e01      	ldr	r6, [sp, #4]
 800831e:	9f03      	ldr	r7, [sp, #12]
 8008320:	1bae      	subs	r6, r5, r6
 8008322:	42b7      	cmp	r7, r6
 8008324:	4602      	mov	r2, r0
 8008326:	460b      	mov	r3, r1
 8008328:	d135      	bne.n	8008396 <_dtoa_r+0x6e6>
 800832a:	f7f7 ffdf 	bl	80002ec <__adddf3>
 800832e:	4642      	mov	r2, r8
 8008330:	464b      	mov	r3, r9
 8008332:	4606      	mov	r6, r0
 8008334:	460f      	mov	r7, r1
 8008336:	f7f8 fc1f 	bl	8000b78 <__aeabi_dcmpgt>
 800833a:	b9d0      	cbnz	r0, 8008372 <_dtoa_r+0x6c2>
 800833c:	4642      	mov	r2, r8
 800833e:	464b      	mov	r3, r9
 8008340:	4630      	mov	r0, r6
 8008342:	4639      	mov	r1, r7
 8008344:	f7f8 fbf0 	bl	8000b28 <__aeabi_dcmpeq>
 8008348:	b110      	cbz	r0, 8008350 <_dtoa_r+0x6a0>
 800834a:	f01a 0f01 	tst.w	sl, #1
 800834e:	d110      	bne.n	8008372 <_dtoa_r+0x6c2>
 8008350:	4620      	mov	r0, r4
 8008352:	ee18 1a10 	vmov	r1, s16
 8008356:	f000 fe87 	bl	8009068 <_Bfree>
 800835a:	2300      	movs	r3, #0
 800835c:	9800      	ldr	r0, [sp, #0]
 800835e:	702b      	strb	r3, [r5, #0]
 8008360:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008362:	3001      	adds	r0, #1
 8008364:	6018      	str	r0, [r3, #0]
 8008366:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008368:	2b00      	cmp	r3, #0
 800836a:	f43f acf1 	beq.w	8007d50 <_dtoa_r+0xa0>
 800836e:	601d      	str	r5, [r3, #0]
 8008370:	e4ee      	b.n	8007d50 <_dtoa_r+0xa0>
 8008372:	9f00      	ldr	r7, [sp, #0]
 8008374:	462b      	mov	r3, r5
 8008376:	461d      	mov	r5, r3
 8008378:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800837c:	2a39      	cmp	r2, #57	; 0x39
 800837e:	d106      	bne.n	800838e <_dtoa_r+0x6de>
 8008380:	9a01      	ldr	r2, [sp, #4]
 8008382:	429a      	cmp	r2, r3
 8008384:	d1f7      	bne.n	8008376 <_dtoa_r+0x6c6>
 8008386:	9901      	ldr	r1, [sp, #4]
 8008388:	2230      	movs	r2, #48	; 0x30
 800838a:	3701      	adds	r7, #1
 800838c:	700a      	strb	r2, [r1, #0]
 800838e:	781a      	ldrb	r2, [r3, #0]
 8008390:	3201      	adds	r2, #1
 8008392:	701a      	strb	r2, [r3, #0]
 8008394:	e790      	b.n	80082b8 <_dtoa_r+0x608>
 8008396:	4ba6      	ldr	r3, [pc, #664]	; (8008630 <_dtoa_r+0x980>)
 8008398:	2200      	movs	r2, #0
 800839a:	f7f8 f95d 	bl	8000658 <__aeabi_dmul>
 800839e:	2200      	movs	r2, #0
 80083a0:	2300      	movs	r3, #0
 80083a2:	4606      	mov	r6, r0
 80083a4:	460f      	mov	r7, r1
 80083a6:	f7f8 fbbf 	bl	8000b28 <__aeabi_dcmpeq>
 80083aa:	2800      	cmp	r0, #0
 80083ac:	d09d      	beq.n	80082ea <_dtoa_r+0x63a>
 80083ae:	e7cf      	b.n	8008350 <_dtoa_r+0x6a0>
 80083b0:	9a08      	ldr	r2, [sp, #32]
 80083b2:	2a00      	cmp	r2, #0
 80083b4:	f000 80d7 	beq.w	8008566 <_dtoa_r+0x8b6>
 80083b8:	9a06      	ldr	r2, [sp, #24]
 80083ba:	2a01      	cmp	r2, #1
 80083bc:	f300 80ba 	bgt.w	8008534 <_dtoa_r+0x884>
 80083c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80083c2:	2a00      	cmp	r2, #0
 80083c4:	f000 80b2 	beq.w	800852c <_dtoa_r+0x87c>
 80083c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80083cc:	9e07      	ldr	r6, [sp, #28]
 80083ce:	9d04      	ldr	r5, [sp, #16]
 80083d0:	9a04      	ldr	r2, [sp, #16]
 80083d2:	441a      	add	r2, r3
 80083d4:	9204      	str	r2, [sp, #16]
 80083d6:	9a05      	ldr	r2, [sp, #20]
 80083d8:	2101      	movs	r1, #1
 80083da:	441a      	add	r2, r3
 80083dc:	4620      	mov	r0, r4
 80083de:	9205      	str	r2, [sp, #20]
 80083e0:	f000 ff44 	bl	800926c <__i2b>
 80083e4:	4607      	mov	r7, r0
 80083e6:	2d00      	cmp	r5, #0
 80083e8:	dd0c      	ble.n	8008404 <_dtoa_r+0x754>
 80083ea:	9b05      	ldr	r3, [sp, #20]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	dd09      	ble.n	8008404 <_dtoa_r+0x754>
 80083f0:	42ab      	cmp	r3, r5
 80083f2:	9a04      	ldr	r2, [sp, #16]
 80083f4:	bfa8      	it	ge
 80083f6:	462b      	movge	r3, r5
 80083f8:	1ad2      	subs	r2, r2, r3
 80083fa:	9204      	str	r2, [sp, #16]
 80083fc:	9a05      	ldr	r2, [sp, #20]
 80083fe:	1aed      	subs	r5, r5, r3
 8008400:	1ad3      	subs	r3, r2, r3
 8008402:	9305      	str	r3, [sp, #20]
 8008404:	9b07      	ldr	r3, [sp, #28]
 8008406:	b31b      	cbz	r3, 8008450 <_dtoa_r+0x7a0>
 8008408:	9b08      	ldr	r3, [sp, #32]
 800840a:	2b00      	cmp	r3, #0
 800840c:	f000 80af 	beq.w	800856e <_dtoa_r+0x8be>
 8008410:	2e00      	cmp	r6, #0
 8008412:	dd13      	ble.n	800843c <_dtoa_r+0x78c>
 8008414:	4639      	mov	r1, r7
 8008416:	4632      	mov	r2, r6
 8008418:	4620      	mov	r0, r4
 800841a:	f000 ffe7 	bl	80093ec <__pow5mult>
 800841e:	ee18 2a10 	vmov	r2, s16
 8008422:	4601      	mov	r1, r0
 8008424:	4607      	mov	r7, r0
 8008426:	4620      	mov	r0, r4
 8008428:	f000 ff36 	bl	8009298 <__multiply>
 800842c:	ee18 1a10 	vmov	r1, s16
 8008430:	4680      	mov	r8, r0
 8008432:	4620      	mov	r0, r4
 8008434:	f000 fe18 	bl	8009068 <_Bfree>
 8008438:	ee08 8a10 	vmov	s16, r8
 800843c:	9b07      	ldr	r3, [sp, #28]
 800843e:	1b9a      	subs	r2, r3, r6
 8008440:	d006      	beq.n	8008450 <_dtoa_r+0x7a0>
 8008442:	ee18 1a10 	vmov	r1, s16
 8008446:	4620      	mov	r0, r4
 8008448:	f000 ffd0 	bl	80093ec <__pow5mult>
 800844c:	ee08 0a10 	vmov	s16, r0
 8008450:	2101      	movs	r1, #1
 8008452:	4620      	mov	r0, r4
 8008454:	f000 ff0a 	bl	800926c <__i2b>
 8008458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800845a:	2b00      	cmp	r3, #0
 800845c:	4606      	mov	r6, r0
 800845e:	f340 8088 	ble.w	8008572 <_dtoa_r+0x8c2>
 8008462:	461a      	mov	r2, r3
 8008464:	4601      	mov	r1, r0
 8008466:	4620      	mov	r0, r4
 8008468:	f000 ffc0 	bl	80093ec <__pow5mult>
 800846c:	9b06      	ldr	r3, [sp, #24]
 800846e:	2b01      	cmp	r3, #1
 8008470:	4606      	mov	r6, r0
 8008472:	f340 8081 	ble.w	8008578 <_dtoa_r+0x8c8>
 8008476:	f04f 0800 	mov.w	r8, #0
 800847a:	6933      	ldr	r3, [r6, #16]
 800847c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008480:	6918      	ldr	r0, [r3, #16]
 8008482:	f000 fea3 	bl	80091cc <__hi0bits>
 8008486:	f1c0 0020 	rsb	r0, r0, #32
 800848a:	9b05      	ldr	r3, [sp, #20]
 800848c:	4418      	add	r0, r3
 800848e:	f010 001f 	ands.w	r0, r0, #31
 8008492:	f000 8092 	beq.w	80085ba <_dtoa_r+0x90a>
 8008496:	f1c0 0320 	rsb	r3, r0, #32
 800849a:	2b04      	cmp	r3, #4
 800849c:	f340 808a 	ble.w	80085b4 <_dtoa_r+0x904>
 80084a0:	f1c0 001c 	rsb	r0, r0, #28
 80084a4:	9b04      	ldr	r3, [sp, #16]
 80084a6:	4403      	add	r3, r0
 80084a8:	9304      	str	r3, [sp, #16]
 80084aa:	9b05      	ldr	r3, [sp, #20]
 80084ac:	4403      	add	r3, r0
 80084ae:	4405      	add	r5, r0
 80084b0:	9305      	str	r3, [sp, #20]
 80084b2:	9b04      	ldr	r3, [sp, #16]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	dd07      	ble.n	80084c8 <_dtoa_r+0x818>
 80084b8:	ee18 1a10 	vmov	r1, s16
 80084bc:	461a      	mov	r2, r3
 80084be:	4620      	mov	r0, r4
 80084c0:	f000 ffee 	bl	80094a0 <__lshift>
 80084c4:	ee08 0a10 	vmov	s16, r0
 80084c8:	9b05      	ldr	r3, [sp, #20]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	dd05      	ble.n	80084da <_dtoa_r+0x82a>
 80084ce:	4631      	mov	r1, r6
 80084d0:	461a      	mov	r2, r3
 80084d2:	4620      	mov	r0, r4
 80084d4:	f000 ffe4 	bl	80094a0 <__lshift>
 80084d8:	4606      	mov	r6, r0
 80084da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d06e      	beq.n	80085be <_dtoa_r+0x90e>
 80084e0:	ee18 0a10 	vmov	r0, s16
 80084e4:	4631      	mov	r1, r6
 80084e6:	f001 f84b 	bl	8009580 <__mcmp>
 80084ea:	2800      	cmp	r0, #0
 80084ec:	da67      	bge.n	80085be <_dtoa_r+0x90e>
 80084ee:	9b00      	ldr	r3, [sp, #0]
 80084f0:	3b01      	subs	r3, #1
 80084f2:	ee18 1a10 	vmov	r1, s16
 80084f6:	9300      	str	r3, [sp, #0]
 80084f8:	220a      	movs	r2, #10
 80084fa:	2300      	movs	r3, #0
 80084fc:	4620      	mov	r0, r4
 80084fe:	f000 fdd5 	bl	80090ac <__multadd>
 8008502:	9b08      	ldr	r3, [sp, #32]
 8008504:	ee08 0a10 	vmov	s16, r0
 8008508:	2b00      	cmp	r3, #0
 800850a:	f000 81b1 	beq.w	8008870 <_dtoa_r+0xbc0>
 800850e:	2300      	movs	r3, #0
 8008510:	4639      	mov	r1, r7
 8008512:	220a      	movs	r2, #10
 8008514:	4620      	mov	r0, r4
 8008516:	f000 fdc9 	bl	80090ac <__multadd>
 800851a:	9b02      	ldr	r3, [sp, #8]
 800851c:	2b00      	cmp	r3, #0
 800851e:	4607      	mov	r7, r0
 8008520:	f300 808e 	bgt.w	8008640 <_dtoa_r+0x990>
 8008524:	9b06      	ldr	r3, [sp, #24]
 8008526:	2b02      	cmp	r3, #2
 8008528:	dc51      	bgt.n	80085ce <_dtoa_r+0x91e>
 800852a:	e089      	b.n	8008640 <_dtoa_r+0x990>
 800852c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800852e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008532:	e74b      	b.n	80083cc <_dtoa_r+0x71c>
 8008534:	9b03      	ldr	r3, [sp, #12]
 8008536:	1e5e      	subs	r6, r3, #1
 8008538:	9b07      	ldr	r3, [sp, #28]
 800853a:	42b3      	cmp	r3, r6
 800853c:	bfbf      	itttt	lt
 800853e:	9b07      	ldrlt	r3, [sp, #28]
 8008540:	9607      	strlt	r6, [sp, #28]
 8008542:	1af2      	sublt	r2, r6, r3
 8008544:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008546:	bfb6      	itet	lt
 8008548:	189b      	addlt	r3, r3, r2
 800854a:	1b9e      	subge	r6, r3, r6
 800854c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800854e:	9b03      	ldr	r3, [sp, #12]
 8008550:	bfb8      	it	lt
 8008552:	2600      	movlt	r6, #0
 8008554:	2b00      	cmp	r3, #0
 8008556:	bfb7      	itett	lt
 8008558:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800855c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008560:	1a9d      	sublt	r5, r3, r2
 8008562:	2300      	movlt	r3, #0
 8008564:	e734      	b.n	80083d0 <_dtoa_r+0x720>
 8008566:	9e07      	ldr	r6, [sp, #28]
 8008568:	9d04      	ldr	r5, [sp, #16]
 800856a:	9f08      	ldr	r7, [sp, #32]
 800856c:	e73b      	b.n	80083e6 <_dtoa_r+0x736>
 800856e:	9a07      	ldr	r2, [sp, #28]
 8008570:	e767      	b.n	8008442 <_dtoa_r+0x792>
 8008572:	9b06      	ldr	r3, [sp, #24]
 8008574:	2b01      	cmp	r3, #1
 8008576:	dc18      	bgt.n	80085aa <_dtoa_r+0x8fa>
 8008578:	f1ba 0f00 	cmp.w	sl, #0
 800857c:	d115      	bne.n	80085aa <_dtoa_r+0x8fa>
 800857e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008582:	b993      	cbnz	r3, 80085aa <_dtoa_r+0x8fa>
 8008584:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008588:	0d1b      	lsrs	r3, r3, #20
 800858a:	051b      	lsls	r3, r3, #20
 800858c:	b183      	cbz	r3, 80085b0 <_dtoa_r+0x900>
 800858e:	9b04      	ldr	r3, [sp, #16]
 8008590:	3301      	adds	r3, #1
 8008592:	9304      	str	r3, [sp, #16]
 8008594:	9b05      	ldr	r3, [sp, #20]
 8008596:	3301      	adds	r3, #1
 8008598:	9305      	str	r3, [sp, #20]
 800859a:	f04f 0801 	mov.w	r8, #1
 800859e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	f47f af6a 	bne.w	800847a <_dtoa_r+0x7ca>
 80085a6:	2001      	movs	r0, #1
 80085a8:	e76f      	b.n	800848a <_dtoa_r+0x7da>
 80085aa:	f04f 0800 	mov.w	r8, #0
 80085ae:	e7f6      	b.n	800859e <_dtoa_r+0x8ee>
 80085b0:	4698      	mov	r8, r3
 80085b2:	e7f4      	b.n	800859e <_dtoa_r+0x8ee>
 80085b4:	f43f af7d 	beq.w	80084b2 <_dtoa_r+0x802>
 80085b8:	4618      	mov	r0, r3
 80085ba:	301c      	adds	r0, #28
 80085bc:	e772      	b.n	80084a4 <_dtoa_r+0x7f4>
 80085be:	9b03      	ldr	r3, [sp, #12]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	dc37      	bgt.n	8008634 <_dtoa_r+0x984>
 80085c4:	9b06      	ldr	r3, [sp, #24]
 80085c6:	2b02      	cmp	r3, #2
 80085c8:	dd34      	ble.n	8008634 <_dtoa_r+0x984>
 80085ca:	9b03      	ldr	r3, [sp, #12]
 80085cc:	9302      	str	r3, [sp, #8]
 80085ce:	9b02      	ldr	r3, [sp, #8]
 80085d0:	b96b      	cbnz	r3, 80085ee <_dtoa_r+0x93e>
 80085d2:	4631      	mov	r1, r6
 80085d4:	2205      	movs	r2, #5
 80085d6:	4620      	mov	r0, r4
 80085d8:	f000 fd68 	bl	80090ac <__multadd>
 80085dc:	4601      	mov	r1, r0
 80085de:	4606      	mov	r6, r0
 80085e0:	ee18 0a10 	vmov	r0, s16
 80085e4:	f000 ffcc 	bl	8009580 <__mcmp>
 80085e8:	2800      	cmp	r0, #0
 80085ea:	f73f adbb 	bgt.w	8008164 <_dtoa_r+0x4b4>
 80085ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085f0:	9d01      	ldr	r5, [sp, #4]
 80085f2:	43db      	mvns	r3, r3
 80085f4:	9300      	str	r3, [sp, #0]
 80085f6:	f04f 0800 	mov.w	r8, #0
 80085fa:	4631      	mov	r1, r6
 80085fc:	4620      	mov	r0, r4
 80085fe:	f000 fd33 	bl	8009068 <_Bfree>
 8008602:	2f00      	cmp	r7, #0
 8008604:	f43f aea4 	beq.w	8008350 <_dtoa_r+0x6a0>
 8008608:	f1b8 0f00 	cmp.w	r8, #0
 800860c:	d005      	beq.n	800861a <_dtoa_r+0x96a>
 800860e:	45b8      	cmp	r8, r7
 8008610:	d003      	beq.n	800861a <_dtoa_r+0x96a>
 8008612:	4641      	mov	r1, r8
 8008614:	4620      	mov	r0, r4
 8008616:	f000 fd27 	bl	8009068 <_Bfree>
 800861a:	4639      	mov	r1, r7
 800861c:	4620      	mov	r0, r4
 800861e:	f000 fd23 	bl	8009068 <_Bfree>
 8008622:	e695      	b.n	8008350 <_dtoa_r+0x6a0>
 8008624:	2600      	movs	r6, #0
 8008626:	4637      	mov	r7, r6
 8008628:	e7e1      	b.n	80085ee <_dtoa_r+0x93e>
 800862a:	9700      	str	r7, [sp, #0]
 800862c:	4637      	mov	r7, r6
 800862e:	e599      	b.n	8008164 <_dtoa_r+0x4b4>
 8008630:	40240000 	.word	0x40240000
 8008634:	9b08      	ldr	r3, [sp, #32]
 8008636:	2b00      	cmp	r3, #0
 8008638:	f000 80ca 	beq.w	80087d0 <_dtoa_r+0xb20>
 800863c:	9b03      	ldr	r3, [sp, #12]
 800863e:	9302      	str	r3, [sp, #8]
 8008640:	2d00      	cmp	r5, #0
 8008642:	dd05      	ble.n	8008650 <_dtoa_r+0x9a0>
 8008644:	4639      	mov	r1, r7
 8008646:	462a      	mov	r2, r5
 8008648:	4620      	mov	r0, r4
 800864a:	f000 ff29 	bl	80094a0 <__lshift>
 800864e:	4607      	mov	r7, r0
 8008650:	f1b8 0f00 	cmp.w	r8, #0
 8008654:	d05b      	beq.n	800870e <_dtoa_r+0xa5e>
 8008656:	6879      	ldr	r1, [r7, #4]
 8008658:	4620      	mov	r0, r4
 800865a:	f000 fcc5 	bl	8008fe8 <_Balloc>
 800865e:	4605      	mov	r5, r0
 8008660:	b928      	cbnz	r0, 800866e <_dtoa_r+0x9be>
 8008662:	4b87      	ldr	r3, [pc, #540]	; (8008880 <_dtoa_r+0xbd0>)
 8008664:	4602      	mov	r2, r0
 8008666:	f240 21ea 	movw	r1, #746	; 0x2ea
 800866a:	f7ff bb3b 	b.w	8007ce4 <_dtoa_r+0x34>
 800866e:	693a      	ldr	r2, [r7, #16]
 8008670:	3202      	adds	r2, #2
 8008672:	0092      	lsls	r2, r2, #2
 8008674:	f107 010c 	add.w	r1, r7, #12
 8008678:	300c      	adds	r0, #12
 800867a:	f000 fca7 	bl	8008fcc <memcpy>
 800867e:	2201      	movs	r2, #1
 8008680:	4629      	mov	r1, r5
 8008682:	4620      	mov	r0, r4
 8008684:	f000 ff0c 	bl	80094a0 <__lshift>
 8008688:	9b01      	ldr	r3, [sp, #4]
 800868a:	f103 0901 	add.w	r9, r3, #1
 800868e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008692:	4413      	add	r3, r2
 8008694:	9305      	str	r3, [sp, #20]
 8008696:	f00a 0301 	and.w	r3, sl, #1
 800869a:	46b8      	mov	r8, r7
 800869c:	9304      	str	r3, [sp, #16]
 800869e:	4607      	mov	r7, r0
 80086a0:	4631      	mov	r1, r6
 80086a2:	ee18 0a10 	vmov	r0, s16
 80086a6:	f7ff fa77 	bl	8007b98 <quorem>
 80086aa:	4641      	mov	r1, r8
 80086ac:	9002      	str	r0, [sp, #8]
 80086ae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80086b2:	ee18 0a10 	vmov	r0, s16
 80086b6:	f000 ff63 	bl	8009580 <__mcmp>
 80086ba:	463a      	mov	r2, r7
 80086bc:	9003      	str	r0, [sp, #12]
 80086be:	4631      	mov	r1, r6
 80086c0:	4620      	mov	r0, r4
 80086c2:	f000 ff79 	bl	80095b8 <__mdiff>
 80086c6:	68c2      	ldr	r2, [r0, #12]
 80086c8:	f109 3bff 	add.w	fp, r9, #4294967295
 80086cc:	4605      	mov	r5, r0
 80086ce:	bb02      	cbnz	r2, 8008712 <_dtoa_r+0xa62>
 80086d0:	4601      	mov	r1, r0
 80086d2:	ee18 0a10 	vmov	r0, s16
 80086d6:	f000 ff53 	bl	8009580 <__mcmp>
 80086da:	4602      	mov	r2, r0
 80086dc:	4629      	mov	r1, r5
 80086de:	4620      	mov	r0, r4
 80086e0:	9207      	str	r2, [sp, #28]
 80086e2:	f000 fcc1 	bl	8009068 <_Bfree>
 80086e6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80086ea:	ea43 0102 	orr.w	r1, r3, r2
 80086ee:	9b04      	ldr	r3, [sp, #16]
 80086f0:	430b      	orrs	r3, r1
 80086f2:	464d      	mov	r5, r9
 80086f4:	d10f      	bne.n	8008716 <_dtoa_r+0xa66>
 80086f6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80086fa:	d02a      	beq.n	8008752 <_dtoa_r+0xaa2>
 80086fc:	9b03      	ldr	r3, [sp, #12]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	dd02      	ble.n	8008708 <_dtoa_r+0xa58>
 8008702:	9b02      	ldr	r3, [sp, #8]
 8008704:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008708:	f88b a000 	strb.w	sl, [fp]
 800870c:	e775      	b.n	80085fa <_dtoa_r+0x94a>
 800870e:	4638      	mov	r0, r7
 8008710:	e7ba      	b.n	8008688 <_dtoa_r+0x9d8>
 8008712:	2201      	movs	r2, #1
 8008714:	e7e2      	b.n	80086dc <_dtoa_r+0xa2c>
 8008716:	9b03      	ldr	r3, [sp, #12]
 8008718:	2b00      	cmp	r3, #0
 800871a:	db04      	blt.n	8008726 <_dtoa_r+0xa76>
 800871c:	9906      	ldr	r1, [sp, #24]
 800871e:	430b      	orrs	r3, r1
 8008720:	9904      	ldr	r1, [sp, #16]
 8008722:	430b      	orrs	r3, r1
 8008724:	d122      	bne.n	800876c <_dtoa_r+0xabc>
 8008726:	2a00      	cmp	r2, #0
 8008728:	ddee      	ble.n	8008708 <_dtoa_r+0xa58>
 800872a:	ee18 1a10 	vmov	r1, s16
 800872e:	2201      	movs	r2, #1
 8008730:	4620      	mov	r0, r4
 8008732:	f000 feb5 	bl	80094a0 <__lshift>
 8008736:	4631      	mov	r1, r6
 8008738:	ee08 0a10 	vmov	s16, r0
 800873c:	f000 ff20 	bl	8009580 <__mcmp>
 8008740:	2800      	cmp	r0, #0
 8008742:	dc03      	bgt.n	800874c <_dtoa_r+0xa9c>
 8008744:	d1e0      	bne.n	8008708 <_dtoa_r+0xa58>
 8008746:	f01a 0f01 	tst.w	sl, #1
 800874a:	d0dd      	beq.n	8008708 <_dtoa_r+0xa58>
 800874c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008750:	d1d7      	bne.n	8008702 <_dtoa_r+0xa52>
 8008752:	2339      	movs	r3, #57	; 0x39
 8008754:	f88b 3000 	strb.w	r3, [fp]
 8008758:	462b      	mov	r3, r5
 800875a:	461d      	mov	r5, r3
 800875c:	3b01      	subs	r3, #1
 800875e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008762:	2a39      	cmp	r2, #57	; 0x39
 8008764:	d071      	beq.n	800884a <_dtoa_r+0xb9a>
 8008766:	3201      	adds	r2, #1
 8008768:	701a      	strb	r2, [r3, #0]
 800876a:	e746      	b.n	80085fa <_dtoa_r+0x94a>
 800876c:	2a00      	cmp	r2, #0
 800876e:	dd07      	ble.n	8008780 <_dtoa_r+0xad0>
 8008770:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008774:	d0ed      	beq.n	8008752 <_dtoa_r+0xaa2>
 8008776:	f10a 0301 	add.w	r3, sl, #1
 800877a:	f88b 3000 	strb.w	r3, [fp]
 800877e:	e73c      	b.n	80085fa <_dtoa_r+0x94a>
 8008780:	9b05      	ldr	r3, [sp, #20]
 8008782:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008786:	4599      	cmp	r9, r3
 8008788:	d047      	beq.n	800881a <_dtoa_r+0xb6a>
 800878a:	ee18 1a10 	vmov	r1, s16
 800878e:	2300      	movs	r3, #0
 8008790:	220a      	movs	r2, #10
 8008792:	4620      	mov	r0, r4
 8008794:	f000 fc8a 	bl	80090ac <__multadd>
 8008798:	45b8      	cmp	r8, r7
 800879a:	ee08 0a10 	vmov	s16, r0
 800879e:	f04f 0300 	mov.w	r3, #0
 80087a2:	f04f 020a 	mov.w	r2, #10
 80087a6:	4641      	mov	r1, r8
 80087a8:	4620      	mov	r0, r4
 80087aa:	d106      	bne.n	80087ba <_dtoa_r+0xb0a>
 80087ac:	f000 fc7e 	bl	80090ac <__multadd>
 80087b0:	4680      	mov	r8, r0
 80087b2:	4607      	mov	r7, r0
 80087b4:	f109 0901 	add.w	r9, r9, #1
 80087b8:	e772      	b.n	80086a0 <_dtoa_r+0x9f0>
 80087ba:	f000 fc77 	bl	80090ac <__multadd>
 80087be:	4639      	mov	r1, r7
 80087c0:	4680      	mov	r8, r0
 80087c2:	2300      	movs	r3, #0
 80087c4:	220a      	movs	r2, #10
 80087c6:	4620      	mov	r0, r4
 80087c8:	f000 fc70 	bl	80090ac <__multadd>
 80087cc:	4607      	mov	r7, r0
 80087ce:	e7f1      	b.n	80087b4 <_dtoa_r+0xb04>
 80087d0:	9b03      	ldr	r3, [sp, #12]
 80087d2:	9302      	str	r3, [sp, #8]
 80087d4:	9d01      	ldr	r5, [sp, #4]
 80087d6:	ee18 0a10 	vmov	r0, s16
 80087da:	4631      	mov	r1, r6
 80087dc:	f7ff f9dc 	bl	8007b98 <quorem>
 80087e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80087e4:	9b01      	ldr	r3, [sp, #4]
 80087e6:	f805 ab01 	strb.w	sl, [r5], #1
 80087ea:	1aea      	subs	r2, r5, r3
 80087ec:	9b02      	ldr	r3, [sp, #8]
 80087ee:	4293      	cmp	r3, r2
 80087f0:	dd09      	ble.n	8008806 <_dtoa_r+0xb56>
 80087f2:	ee18 1a10 	vmov	r1, s16
 80087f6:	2300      	movs	r3, #0
 80087f8:	220a      	movs	r2, #10
 80087fa:	4620      	mov	r0, r4
 80087fc:	f000 fc56 	bl	80090ac <__multadd>
 8008800:	ee08 0a10 	vmov	s16, r0
 8008804:	e7e7      	b.n	80087d6 <_dtoa_r+0xb26>
 8008806:	9b02      	ldr	r3, [sp, #8]
 8008808:	2b00      	cmp	r3, #0
 800880a:	bfc8      	it	gt
 800880c:	461d      	movgt	r5, r3
 800880e:	9b01      	ldr	r3, [sp, #4]
 8008810:	bfd8      	it	le
 8008812:	2501      	movle	r5, #1
 8008814:	441d      	add	r5, r3
 8008816:	f04f 0800 	mov.w	r8, #0
 800881a:	ee18 1a10 	vmov	r1, s16
 800881e:	2201      	movs	r2, #1
 8008820:	4620      	mov	r0, r4
 8008822:	f000 fe3d 	bl	80094a0 <__lshift>
 8008826:	4631      	mov	r1, r6
 8008828:	ee08 0a10 	vmov	s16, r0
 800882c:	f000 fea8 	bl	8009580 <__mcmp>
 8008830:	2800      	cmp	r0, #0
 8008832:	dc91      	bgt.n	8008758 <_dtoa_r+0xaa8>
 8008834:	d102      	bne.n	800883c <_dtoa_r+0xb8c>
 8008836:	f01a 0f01 	tst.w	sl, #1
 800883a:	d18d      	bne.n	8008758 <_dtoa_r+0xaa8>
 800883c:	462b      	mov	r3, r5
 800883e:	461d      	mov	r5, r3
 8008840:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008844:	2a30      	cmp	r2, #48	; 0x30
 8008846:	d0fa      	beq.n	800883e <_dtoa_r+0xb8e>
 8008848:	e6d7      	b.n	80085fa <_dtoa_r+0x94a>
 800884a:	9a01      	ldr	r2, [sp, #4]
 800884c:	429a      	cmp	r2, r3
 800884e:	d184      	bne.n	800875a <_dtoa_r+0xaaa>
 8008850:	9b00      	ldr	r3, [sp, #0]
 8008852:	3301      	adds	r3, #1
 8008854:	9300      	str	r3, [sp, #0]
 8008856:	2331      	movs	r3, #49	; 0x31
 8008858:	7013      	strb	r3, [r2, #0]
 800885a:	e6ce      	b.n	80085fa <_dtoa_r+0x94a>
 800885c:	4b09      	ldr	r3, [pc, #36]	; (8008884 <_dtoa_r+0xbd4>)
 800885e:	f7ff ba95 	b.w	8007d8c <_dtoa_r+0xdc>
 8008862:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008864:	2b00      	cmp	r3, #0
 8008866:	f47f aa6e 	bne.w	8007d46 <_dtoa_r+0x96>
 800886a:	4b07      	ldr	r3, [pc, #28]	; (8008888 <_dtoa_r+0xbd8>)
 800886c:	f7ff ba8e 	b.w	8007d8c <_dtoa_r+0xdc>
 8008870:	9b02      	ldr	r3, [sp, #8]
 8008872:	2b00      	cmp	r3, #0
 8008874:	dcae      	bgt.n	80087d4 <_dtoa_r+0xb24>
 8008876:	9b06      	ldr	r3, [sp, #24]
 8008878:	2b02      	cmp	r3, #2
 800887a:	f73f aea8 	bgt.w	80085ce <_dtoa_r+0x91e>
 800887e:	e7a9      	b.n	80087d4 <_dtoa_r+0xb24>
 8008880:	0800ada8 	.word	0x0800ada8
 8008884:	0800ac18 	.word	0x0800ac18
 8008888:	0800ad40 	.word	0x0800ad40

0800888c <fiprintf>:
 800888c:	b40e      	push	{r1, r2, r3}
 800888e:	b503      	push	{r0, r1, lr}
 8008890:	4601      	mov	r1, r0
 8008892:	ab03      	add	r3, sp, #12
 8008894:	4805      	ldr	r0, [pc, #20]	; (80088ac <fiprintf+0x20>)
 8008896:	f853 2b04 	ldr.w	r2, [r3], #4
 800889a:	6800      	ldr	r0, [r0, #0]
 800889c:	9301      	str	r3, [sp, #4]
 800889e:	f001 fae1 	bl	8009e64 <_vfiprintf_r>
 80088a2:	b002      	add	sp, #8
 80088a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80088a8:	b003      	add	sp, #12
 80088aa:	4770      	bx	lr
 80088ac:	20000060 	.word	0x20000060

080088b0 <rshift>:
 80088b0:	6903      	ldr	r3, [r0, #16]
 80088b2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80088b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80088ba:	ea4f 1261 	mov.w	r2, r1, asr #5
 80088be:	f100 0414 	add.w	r4, r0, #20
 80088c2:	dd45      	ble.n	8008950 <rshift+0xa0>
 80088c4:	f011 011f 	ands.w	r1, r1, #31
 80088c8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80088cc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80088d0:	d10c      	bne.n	80088ec <rshift+0x3c>
 80088d2:	f100 0710 	add.w	r7, r0, #16
 80088d6:	4629      	mov	r1, r5
 80088d8:	42b1      	cmp	r1, r6
 80088da:	d334      	bcc.n	8008946 <rshift+0x96>
 80088dc:	1a9b      	subs	r3, r3, r2
 80088de:	009b      	lsls	r3, r3, #2
 80088e0:	1eea      	subs	r2, r5, #3
 80088e2:	4296      	cmp	r6, r2
 80088e4:	bf38      	it	cc
 80088e6:	2300      	movcc	r3, #0
 80088e8:	4423      	add	r3, r4
 80088ea:	e015      	b.n	8008918 <rshift+0x68>
 80088ec:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80088f0:	f1c1 0820 	rsb	r8, r1, #32
 80088f4:	40cf      	lsrs	r7, r1
 80088f6:	f105 0e04 	add.w	lr, r5, #4
 80088fa:	46a1      	mov	r9, r4
 80088fc:	4576      	cmp	r6, lr
 80088fe:	46f4      	mov	ip, lr
 8008900:	d815      	bhi.n	800892e <rshift+0x7e>
 8008902:	1a9a      	subs	r2, r3, r2
 8008904:	0092      	lsls	r2, r2, #2
 8008906:	3a04      	subs	r2, #4
 8008908:	3501      	adds	r5, #1
 800890a:	42ae      	cmp	r6, r5
 800890c:	bf38      	it	cc
 800890e:	2200      	movcc	r2, #0
 8008910:	18a3      	adds	r3, r4, r2
 8008912:	50a7      	str	r7, [r4, r2]
 8008914:	b107      	cbz	r7, 8008918 <rshift+0x68>
 8008916:	3304      	adds	r3, #4
 8008918:	1b1a      	subs	r2, r3, r4
 800891a:	42a3      	cmp	r3, r4
 800891c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008920:	bf08      	it	eq
 8008922:	2300      	moveq	r3, #0
 8008924:	6102      	str	r2, [r0, #16]
 8008926:	bf08      	it	eq
 8008928:	6143      	streq	r3, [r0, #20]
 800892a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800892e:	f8dc c000 	ldr.w	ip, [ip]
 8008932:	fa0c fc08 	lsl.w	ip, ip, r8
 8008936:	ea4c 0707 	orr.w	r7, ip, r7
 800893a:	f849 7b04 	str.w	r7, [r9], #4
 800893e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008942:	40cf      	lsrs	r7, r1
 8008944:	e7da      	b.n	80088fc <rshift+0x4c>
 8008946:	f851 cb04 	ldr.w	ip, [r1], #4
 800894a:	f847 cf04 	str.w	ip, [r7, #4]!
 800894e:	e7c3      	b.n	80088d8 <rshift+0x28>
 8008950:	4623      	mov	r3, r4
 8008952:	e7e1      	b.n	8008918 <rshift+0x68>

08008954 <__hexdig_fun>:
 8008954:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008958:	2b09      	cmp	r3, #9
 800895a:	d802      	bhi.n	8008962 <__hexdig_fun+0xe>
 800895c:	3820      	subs	r0, #32
 800895e:	b2c0      	uxtb	r0, r0
 8008960:	4770      	bx	lr
 8008962:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008966:	2b05      	cmp	r3, #5
 8008968:	d801      	bhi.n	800896e <__hexdig_fun+0x1a>
 800896a:	3847      	subs	r0, #71	; 0x47
 800896c:	e7f7      	b.n	800895e <__hexdig_fun+0xa>
 800896e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008972:	2b05      	cmp	r3, #5
 8008974:	d801      	bhi.n	800897a <__hexdig_fun+0x26>
 8008976:	3827      	subs	r0, #39	; 0x27
 8008978:	e7f1      	b.n	800895e <__hexdig_fun+0xa>
 800897a:	2000      	movs	r0, #0
 800897c:	4770      	bx	lr
	...

08008980 <__gethex>:
 8008980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008984:	ed2d 8b02 	vpush	{d8}
 8008988:	b089      	sub	sp, #36	; 0x24
 800898a:	ee08 0a10 	vmov	s16, r0
 800898e:	9304      	str	r3, [sp, #16]
 8008990:	4bb4      	ldr	r3, [pc, #720]	; (8008c64 <__gethex+0x2e4>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	9301      	str	r3, [sp, #4]
 8008996:	4618      	mov	r0, r3
 8008998:	468b      	mov	fp, r1
 800899a:	4690      	mov	r8, r2
 800899c:	f7f7 fc42 	bl	8000224 <strlen>
 80089a0:	9b01      	ldr	r3, [sp, #4]
 80089a2:	f8db 2000 	ldr.w	r2, [fp]
 80089a6:	4403      	add	r3, r0
 80089a8:	4682      	mov	sl, r0
 80089aa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80089ae:	9305      	str	r3, [sp, #20]
 80089b0:	1c93      	adds	r3, r2, #2
 80089b2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80089b6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80089ba:	32fe      	adds	r2, #254	; 0xfe
 80089bc:	18d1      	adds	r1, r2, r3
 80089be:	461f      	mov	r7, r3
 80089c0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80089c4:	9100      	str	r1, [sp, #0]
 80089c6:	2830      	cmp	r0, #48	; 0x30
 80089c8:	d0f8      	beq.n	80089bc <__gethex+0x3c>
 80089ca:	f7ff ffc3 	bl	8008954 <__hexdig_fun>
 80089ce:	4604      	mov	r4, r0
 80089d0:	2800      	cmp	r0, #0
 80089d2:	d13a      	bne.n	8008a4a <__gethex+0xca>
 80089d4:	9901      	ldr	r1, [sp, #4]
 80089d6:	4652      	mov	r2, sl
 80089d8:	4638      	mov	r0, r7
 80089da:	f001 fb8d 	bl	800a0f8 <strncmp>
 80089de:	4605      	mov	r5, r0
 80089e0:	2800      	cmp	r0, #0
 80089e2:	d168      	bne.n	8008ab6 <__gethex+0x136>
 80089e4:	f817 000a 	ldrb.w	r0, [r7, sl]
 80089e8:	eb07 060a 	add.w	r6, r7, sl
 80089ec:	f7ff ffb2 	bl	8008954 <__hexdig_fun>
 80089f0:	2800      	cmp	r0, #0
 80089f2:	d062      	beq.n	8008aba <__gethex+0x13a>
 80089f4:	4633      	mov	r3, r6
 80089f6:	7818      	ldrb	r0, [r3, #0]
 80089f8:	2830      	cmp	r0, #48	; 0x30
 80089fa:	461f      	mov	r7, r3
 80089fc:	f103 0301 	add.w	r3, r3, #1
 8008a00:	d0f9      	beq.n	80089f6 <__gethex+0x76>
 8008a02:	f7ff ffa7 	bl	8008954 <__hexdig_fun>
 8008a06:	2301      	movs	r3, #1
 8008a08:	fab0 f480 	clz	r4, r0
 8008a0c:	0964      	lsrs	r4, r4, #5
 8008a0e:	4635      	mov	r5, r6
 8008a10:	9300      	str	r3, [sp, #0]
 8008a12:	463a      	mov	r2, r7
 8008a14:	4616      	mov	r6, r2
 8008a16:	3201      	adds	r2, #1
 8008a18:	7830      	ldrb	r0, [r6, #0]
 8008a1a:	f7ff ff9b 	bl	8008954 <__hexdig_fun>
 8008a1e:	2800      	cmp	r0, #0
 8008a20:	d1f8      	bne.n	8008a14 <__gethex+0x94>
 8008a22:	9901      	ldr	r1, [sp, #4]
 8008a24:	4652      	mov	r2, sl
 8008a26:	4630      	mov	r0, r6
 8008a28:	f001 fb66 	bl	800a0f8 <strncmp>
 8008a2c:	b980      	cbnz	r0, 8008a50 <__gethex+0xd0>
 8008a2e:	b94d      	cbnz	r5, 8008a44 <__gethex+0xc4>
 8008a30:	eb06 050a 	add.w	r5, r6, sl
 8008a34:	462a      	mov	r2, r5
 8008a36:	4616      	mov	r6, r2
 8008a38:	3201      	adds	r2, #1
 8008a3a:	7830      	ldrb	r0, [r6, #0]
 8008a3c:	f7ff ff8a 	bl	8008954 <__hexdig_fun>
 8008a40:	2800      	cmp	r0, #0
 8008a42:	d1f8      	bne.n	8008a36 <__gethex+0xb6>
 8008a44:	1bad      	subs	r5, r5, r6
 8008a46:	00ad      	lsls	r5, r5, #2
 8008a48:	e004      	b.n	8008a54 <__gethex+0xd4>
 8008a4a:	2400      	movs	r4, #0
 8008a4c:	4625      	mov	r5, r4
 8008a4e:	e7e0      	b.n	8008a12 <__gethex+0x92>
 8008a50:	2d00      	cmp	r5, #0
 8008a52:	d1f7      	bne.n	8008a44 <__gethex+0xc4>
 8008a54:	7833      	ldrb	r3, [r6, #0]
 8008a56:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008a5a:	2b50      	cmp	r3, #80	; 0x50
 8008a5c:	d13b      	bne.n	8008ad6 <__gethex+0x156>
 8008a5e:	7873      	ldrb	r3, [r6, #1]
 8008a60:	2b2b      	cmp	r3, #43	; 0x2b
 8008a62:	d02c      	beq.n	8008abe <__gethex+0x13e>
 8008a64:	2b2d      	cmp	r3, #45	; 0x2d
 8008a66:	d02e      	beq.n	8008ac6 <__gethex+0x146>
 8008a68:	1c71      	adds	r1, r6, #1
 8008a6a:	f04f 0900 	mov.w	r9, #0
 8008a6e:	7808      	ldrb	r0, [r1, #0]
 8008a70:	f7ff ff70 	bl	8008954 <__hexdig_fun>
 8008a74:	1e43      	subs	r3, r0, #1
 8008a76:	b2db      	uxtb	r3, r3
 8008a78:	2b18      	cmp	r3, #24
 8008a7a:	d82c      	bhi.n	8008ad6 <__gethex+0x156>
 8008a7c:	f1a0 0210 	sub.w	r2, r0, #16
 8008a80:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008a84:	f7ff ff66 	bl	8008954 <__hexdig_fun>
 8008a88:	1e43      	subs	r3, r0, #1
 8008a8a:	b2db      	uxtb	r3, r3
 8008a8c:	2b18      	cmp	r3, #24
 8008a8e:	d91d      	bls.n	8008acc <__gethex+0x14c>
 8008a90:	f1b9 0f00 	cmp.w	r9, #0
 8008a94:	d000      	beq.n	8008a98 <__gethex+0x118>
 8008a96:	4252      	negs	r2, r2
 8008a98:	4415      	add	r5, r2
 8008a9a:	f8cb 1000 	str.w	r1, [fp]
 8008a9e:	b1e4      	cbz	r4, 8008ada <__gethex+0x15a>
 8008aa0:	9b00      	ldr	r3, [sp, #0]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	bf14      	ite	ne
 8008aa6:	2700      	movne	r7, #0
 8008aa8:	2706      	moveq	r7, #6
 8008aaa:	4638      	mov	r0, r7
 8008aac:	b009      	add	sp, #36	; 0x24
 8008aae:	ecbd 8b02 	vpop	{d8}
 8008ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ab6:	463e      	mov	r6, r7
 8008ab8:	4625      	mov	r5, r4
 8008aba:	2401      	movs	r4, #1
 8008abc:	e7ca      	b.n	8008a54 <__gethex+0xd4>
 8008abe:	f04f 0900 	mov.w	r9, #0
 8008ac2:	1cb1      	adds	r1, r6, #2
 8008ac4:	e7d3      	b.n	8008a6e <__gethex+0xee>
 8008ac6:	f04f 0901 	mov.w	r9, #1
 8008aca:	e7fa      	b.n	8008ac2 <__gethex+0x142>
 8008acc:	230a      	movs	r3, #10
 8008ace:	fb03 0202 	mla	r2, r3, r2, r0
 8008ad2:	3a10      	subs	r2, #16
 8008ad4:	e7d4      	b.n	8008a80 <__gethex+0x100>
 8008ad6:	4631      	mov	r1, r6
 8008ad8:	e7df      	b.n	8008a9a <__gethex+0x11a>
 8008ada:	1bf3      	subs	r3, r6, r7
 8008adc:	3b01      	subs	r3, #1
 8008ade:	4621      	mov	r1, r4
 8008ae0:	2b07      	cmp	r3, #7
 8008ae2:	dc0b      	bgt.n	8008afc <__gethex+0x17c>
 8008ae4:	ee18 0a10 	vmov	r0, s16
 8008ae8:	f000 fa7e 	bl	8008fe8 <_Balloc>
 8008aec:	4604      	mov	r4, r0
 8008aee:	b940      	cbnz	r0, 8008b02 <__gethex+0x182>
 8008af0:	4b5d      	ldr	r3, [pc, #372]	; (8008c68 <__gethex+0x2e8>)
 8008af2:	4602      	mov	r2, r0
 8008af4:	21de      	movs	r1, #222	; 0xde
 8008af6:	485d      	ldr	r0, [pc, #372]	; (8008c6c <__gethex+0x2ec>)
 8008af8:	f7ff f830 	bl	8007b5c <__assert_func>
 8008afc:	3101      	adds	r1, #1
 8008afe:	105b      	asrs	r3, r3, #1
 8008b00:	e7ee      	b.n	8008ae0 <__gethex+0x160>
 8008b02:	f100 0914 	add.w	r9, r0, #20
 8008b06:	f04f 0b00 	mov.w	fp, #0
 8008b0a:	f1ca 0301 	rsb	r3, sl, #1
 8008b0e:	f8cd 9008 	str.w	r9, [sp, #8]
 8008b12:	f8cd b000 	str.w	fp, [sp]
 8008b16:	9306      	str	r3, [sp, #24]
 8008b18:	42b7      	cmp	r7, r6
 8008b1a:	d340      	bcc.n	8008b9e <__gethex+0x21e>
 8008b1c:	9802      	ldr	r0, [sp, #8]
 8008b1e:	9b00      	ldr	r3, [sp, #0]
 8008b20:	f840 3b04 	str.w	r3, [r0], #4
 8008b24:	eba0 0009 	sub.w	r0, r0, r9
 8008b28:	1080      	asrs	r0, r0, #2
 8008b2a:	0146      	lsls	r6, r0, #5
 8008b2c:	6120      	str	r0, [r4, #16]
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f000 fb4c 	bl	80091cc <__hi0bits>
 8008b34:	1a30      	subs	r0, r6, r0
 8008b36:	f8d8 6000 	ldr.w	r6, [r8]
 8008b3a:	42b0      	cmp	r0, r6
 8008b3c:	dd63      	ble.n	8008c06 <__gethex+0x286>
 8008b3e:	1b87      	subs	r7, r0, r6
 8008b40:	4639      	mov	r1, r7
 8008b42:	4620      	mov	r0, r4
 8008b44:	f000 fef0 	bl	8009928 <__any_on>
 8008b48:	4682      	mov	sl, r0
 8008b4a:	b1a8      	cbz	r0, 8008b78 <__gethex+0x1f8>
 8008b4c:	1e7b      	subs	r3, r7, #1
 8008b4e:	1159      	asrs	r1, r3, #5
 8008b50:	f003 021f 	and.w	r2, r3, #31
 8008b54:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008b58:	f04f 0a01 	mov.w	sl, #1
 8008b5c:	fa0a f202 	lsl.w	r2, sl, r2
 8008b60:	420a      	tst	r2, r1
 8008b62:	d009      	beq.n	8008b78 <__gethex+0x1f8>
 8008b64:	4553      	cmp	r3, sl
 8008b66:	dd05      	ble.n	8008b74 <__gethex+0x1f4>
 8008b68:	1eb9      	subs	r1, r7, #2
 8008b6a:	4620      	mov	r0, r4
 8008b6c:	f000 fedc 	bl	8009928 <__any_on>
 8008b70:	2800      	cmp	r0, #0
 8008b72:	d145      	bne.n	8008c00 <__gethex+0x280>
 8008b74:	f04f 0a02 	mov.w	sl, #2
 8008b78:	4639      	mov	r1, r7
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	f7ff fe98 	bl	80088b0 <rshift>
 8008b80:	443d      	add	r5, r7
 8008b82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008b86:	42ab      	cmp	r3, r5
 8008b88:	da4c      	bge.n	8008c24 <__gethex+0x2a4>
 8008b8a:	ee18 0a10 	vmov	r0, s16
 8008b8e:	4621      	mov	r1, r4
 8008b90:	f000 fa6a 	bl	8009068 <_Bfree>
 8008b94:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008b96:	2300      	movs	r3, #0
 8008b98:	6013      	str	r3, [r2, #0]
 8008b9a:	27a3      	movs	r7, #163	; 0xa3
 8008b9c:	e785      	b.n	8008aaa <__gethex+0x12a>
 8008b9e:	1e73      	subs	r3, r6, #1
 8008ba0:	9a05      	ldr	r2, [sp, #20]
 8008ba2:	9303      	str	r3, [sp, #12]
 8008ba4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d019      	beq.n	8008be0 <__gethex+0x260>
 8008bac:	f1bb 0f20 	cmp.w	fp, #32
 8008bb0:	d107      	bne.n	8008bc2 <__gethex+0x242>
 8008bb2:	9b02      	ldr	r3, [sp, #8]
 8008bb4:	9a00      	ldr	r2, [sp, #0]
 8008bb6:	f843 2b04 	str.w	r2, [r3], #4
 8008bba:	9302      	str	r3, [sp, #8]
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	9300      	str	r3, [sp, #0]
 8008bc0:	469b      	mov	fp, r3
 8008bc2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008bc6:	f7ff fec5 	bl	8008954 <__hexdig_fun>
 8008bca:	9b00      	ldr	r3, [sp, #0]
 8008bcc:	f000 000f 	and.w	r0, r0, #15
 8008bd0:	fa00 f00b 	lsl.w	r0, r0, fp
 8008bd4:	4303      	orrs	r3, r0
 8008bd6:	9300      	str	r3, [sp, #0]
 8008bd8:	f10b 0b04 	add.w	fp, fp, #4
 8008bdc:	9b03      	ldr	r3, [sp, #12]
 8008bde:	e00d      	b.n	8008bfc <__gethex+0x27c>
 8008be0:	9b03      	ldr	r3, [sp, #12]
 8008be2:	9a06      	ldr	r2, [sp, #24]
 8008be4:	4413      	add	r3, r2
 8008be6:	42bb      	cmp	r3, r7
 8008be8:	d3e0      	bcc.n	8008bac <__gethex+0x22c>
 8008bea:	4618      	mov	r0, r3
 8008bec:	9901      	ldr	r1, [sp, #4]
 8008bee:	9307      	str	r3, [sp, #28]
 8008bf0:	4652      	mov	r2, sl
 8008bf2:	f001 fa81 	bl	800a0f8 <strncmp>
 8008bf6:	9b07      	ldr	r3, [sp, #28]
 8008bf8:	2800      	cmp	r0, #0
 8008bfa:	d1d7      	bne.n	8008bac <__gethex+0x22c>
 8008bfc:	461e      	mov	r6, r3
 8008bfe:	e78b      	b.n	8008b18 <__gethex+0x198>
 8008c00:	f04f 0a03 	mov.w	sl, #3
 8008c04:	e7b8      	b.n	8008b78 <__gethex+0x1f8>
 8008c06:	da0a      	bge.n	8008c1e <__gethex+0x29e>
 8008c08:	1a37      	subs	r7, r6, r0
 8008c0a:	4621      	mov	r1, r4
 8008c0c:	ee18 0a10 	vmov	r0, s16
 8008c10:	463a      	mov	r2, r7
 8008c12:	f000 fc45 	bl	80094a0 <__lshift>
 8008c16:	1bed      	subs	r5, r5, r7
 8008c18:	4604      	mov	r4, r0
 8008c1a:	f100 0914 	add.w	r9, r0, #20
 8008c1e:	f04f 0a00 	mov.w	sl, #0
 8008c22:	e7ae      	b.n	8008b82 <__gethex+0x202>
 8008c24:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008c28:	42a8      	cmp	r0, r5
 8008c2a:	dd72      	ble.n	8008d12 <__gethex+0x392>
 8008c2c:	1b45      	subs	r5, r0, r5
 8008c2e:	42ae      	cmp	r6, r5
 8008c30:	dc36      	bgt.n	8008ca0 <__gethex+0x320>
 8008c32:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008c36:	2b02      	cmp	r3, #2
 8008c38:	d02a      	beq.n	8008c90 <__gethex+0x310>
 8008c3a:	2b03      	cmp	r3, #3
 8008c3c:	d02c      	beq.n	8008c98 <__gethex+0x318>
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d11c      	bne.n	8008c7c <__gethex+0x2fc>
 8008c42:	42ae      	cmp	r6, r5
 8008c44:	d11a      	bne.n	8008c7c <__gethex+0x2fc>
 8008c46:	2e01      	cmp	r6, #1
 8008c48:	d112      	bne.n	8008c70 <__gethex+0x2f0>
 8008c4a:	9a04      	ldr	r2, [sp, #16]
 8008c4c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008c50:	6013      	str	r3, [r2, #0]
 8008c52:	2301      	movs	r3, #1
 8008c54:	6123      	str	r3, [r4, #16]
 8008c56:	f8c9 3000 	str.w	r3, [r9]
 8008c5a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008c5c:	2762      	movs	r7, #98	; 0x62
 8008c5e:	601c      	str	r4, [r3, #0]
 8008c60:	e723      	b.n	8008aaa <__gethex+0x12a>
 8008c62:	bf00      	nop
 8008c64:	0800ae20 	.word	0x0800ae20
 8008c68:	0800ada8 	.word	0x0800ada8
 8008c6c:	0800adb9 	.word	0x0800adb9
 8008c70:	1e71      	subs	r1, r6, #1
 8008c72:	4620      	mov	r0, r4
 8008c74:	f000 fe58 	bl	8009928 <__any_on>
 8008c78:	2800      	cmp	r0, #0
 8008c7a:	d1e6      	bne.n	8008c4a <__gethex+0x2ca>
 8008c7c:	ee18 0a10 	vmov	r0, s16
 8008c80:	4621      	mov	r1, r4
 8008c82:	f000 f9f1 	bl	8009068 <_Bfree>
 8008c86:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008c88:	2300      	movs	r3, #0
 8008c8a:	6013      	str	r3, [r2, #0]
 8008c8c:	2750      	movs	r7, #80	; 0x50
 8008c8e:	e70c      	b.n	8008aaa <__gethex+0x12a>
 8008c90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d1f2      	bne.n	8008c7c <__gethex+0x2fc>
 8008c96:	e7d8      	b.n	8008c4a <__gethex+0x2ca>
 8008c98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d1d5      	bne.n	8008c4a <__gethex+0x2ca>
 8008c9e:	e7ed      	b.n	8008c7c <__gethex+0x2fc>
 8008ca0:	1e6f      	subs	r7, r5, #1
 8008ca2:	f1ba 0f00 	cmp.w	sl, #0
 8008ca6:	d131      	bne.n	8008d0c <__gethex+0x38c>
 8008ca8:	b127      	cbz	r7, 8008cb4 <__gethex+0x334>
 8008caa:	4639      	mov	r1, r7
 8008cac:	4620      	mov	r0, r4
 8008cae:	f000 fe3b 	bl	8009928 <__any_on>
 8008cb2:	4682      	mov	sl, r0
 8008cb4:	117b      	asrs	r3, r7, #5
 8008cb6:	2101      	movs	r1, #1
 8008cb8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008cbc:	f007 071f 	and.w	r7, r7, #31
 8008cc0:	fa01 f707 	lsl.w	r7, r1, r7
 8008cc4:	421f      	tst	r7, r3
 8008cc6:	4629      	mov	r1, r5
 8008cc8:	4620      	mov	r0, r4
 8008cca:	bf18      	it	ne
 8008ccc:	f04a 0a02 	orrne.w	sl, sl, #2
 8008cd0:	1b76      	subs	r6, r6, r5
 8008cd2:	f7ff fded 	bl	80088b0 <rshift>
 8008cd6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008cda:	2702      	movs	r7, #2
 8008cdc:	f1ba 0f00 	cmp.w	sl, #0
 8008ce0:	d048      	beq.n	8008d74 <__gethex+0x3f4>
 8008ce2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008ce6:	2b02      	cmp	r3, #2
 8008ce8:	d015      	beq.n	8008d16 <__gethex+0x396>
 8008cea:	2b03      	cmp	r3, #3
 8008cec:	d017      	beq.n	8008d1e <__gethex+0x39e>
 8008cee:	2b01      	cmp	r3, #1
 8008cf0:	d109      	bne.n	8008d06 <__gethex+0x386>
 8008cf2:	f01a 0f02 	tst.w	sl, #2
 8008cf6:	d006      	beq.n	8008d06 <__gethex+0x386>
 8008cf8:	f8d9 0000 	ldr.w	r0, [r9]
 8008cfc:	ea4a 0a00 	orr.w	sl, sl, r0
 8008d00:	f01a 0f01 	tst.w	sl, #1
 8008d04:	d10e      	bne.n	8008d24 <__gethex+0x3a4>
 8008d06:	f047 0710 	orr.w	r7, r7, #16
 8008d0a:	e033      	b.n	8008d74 <__gethex+0x3f4>
 8008d0c:	f04f 0a01 	mov.w	sl, #1
 8008d10:	e7d0      	b.n	8008cb4 <__gethex+0x334>
 8008d12:	2701      	movs	r7, #1
 8008d14:	e7e2      	b.n	8008cdc <__gethex+0x35c>
 8008d16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d18:	f1c3 0301 	rsb	r3, r3, #1
 8008d1c:	9315      	str	r3, [sp, #84]	; 0x54
 8008d1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d0f0      	beq.n	8008d06 <__gethex+0x386>
 8008d24:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008d28:	f104 0314 	add.w	r3, r4, #20
 8008d2c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008d30:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008d34:	f04f 0c00 	mov.w	ip, #0
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d3e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008d42:	d01c      	beq.n	8008d7e <__gethex+0x3fe>
 8008d44:	3201      	adds	r2, #1
 8008d46:	6002      	str	r2, [r0, #0]
 8008d48:	2f02      	cmp	r7, #2
 8008d4a:	f104 0314 	add.w	r3, r4, #20
 8008d4e:	d13f      	bne.n	8008dd0 <__gethex+0x450>
 8008d50:	f8d8 2000 	ldr.w	r2, [r8]
 8008d54:	3a01      	subs	r2, #1
 8008d56:	42b2      	cmp	r2, r6
 8008d58:	d10a      	bne.n	8008d70 <__gethex+0x3f0>
 8008d5a:	1171      	asrs	r1, r6, #5
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008d62:	f006 061f 	and.w	r6, r6, #31
 8008d66:	fa02 f606 	lsl.w	r6, r2, r6
 8008d6a:	421e      	tst	r6, r3
 8008d6c:	bf18      	it	ne
 8008d6e:	4617      	movne	r7, r2
 8008d70:	f047 0720 	orr.w	r7, r7, #32
 8008d74:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008d76:	601c      	str	r4, [r3, #0]
 8008d78:	9b04      	ldr	r3, [sp, #16]
 8008d7a:	601d      	str	r5, [r3, #0]
 8008d7c:	e695      	b.n	8008aaa <__gethex+0x12a>
 8008d7e:	4299      	cmp	r1, r3
 8008d80:	f843 cc04 	str.w	ip, [r3, #-4]
 8008d84:	d8d8      	bhi.n	8008d38 <__gethex+0x3b8>
 8008d86:	68a3      	ldr	r3, [r4, #8]
 8008d88:	459b      	cmp	fp, r3
 8008d8a:	db19      	blt.n	8008dc0 <__gethex+0x440>
 8008d8c:	6861      	ldr	r1, [r4, #4]
 8008d8e:	ee18 0a10 	vmov	r0, s16
 8008d92:	3101      	adds	r1, #1
 8008d94:	f000 f928 	bl	8008fe8 <_Balloc>
 8008d98:	4681      	mov	r9, r0
 8008d9a:	b918      	cbnz	r0, 8008da4 <__gethex+0x424>
 8008d9c:	4b1a      	ldr	r3, [pc, #104]	; (8008e08 <__gethex+0x488>)
 8008d9e:	4602      	mov	r2, r0
 8008da0:	2184      	movs	r1, #132	; 0x84
 8008da2:	e6a8      	b.n	8008af6 <__gethex+0x176>
 8008da4:	6922      	ldr	r2, [r4, #16]
 8008da6:	3202      	adds	r2, #2
 8008da8:	f104 010c 	add.w	r1, r4, #12
 8008dac:	0092      	lsls	r2, r2, #2
 8008dae:	300c      	adds	r0, #12
 8008db0:	f000 f90c 	bl	8008fcc <memcpy>
 8008db4:	4621      	mov	r1, r4
 8008db6:	ee18 0a10 	vmov	r0, s16
 8008dba:	f000 f955 	bl	8009068 <_Bfree>
 8008dbe:	464c      	mov	r4, r9
 8008dc0:	6923      	ldr	r3, [r4, #16]
 8008dc2:	1c5a      	adds	r2, r3, #1
 8008dc4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008dc8:	6122      	str	r2, [r4, #16]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	615a      	str	r2, [r3, #20]
 8008dce:	e7bb      	b.n	8008d48 <__gethex+0x3c8>
 8008dd0:	6922      	ldr	r2, [r4, #16]
 8008dd2:	455a      	cmp	r2, fp
 8008dd4:	dd0b      	ble.n	8008dee <__gethex+0x46e>
 8008dd6:	2101      	movs	r1, #1
 8008dd8:	4620      	mov	r0, r4
 8008dda:	f7ff fd69 	bl	80088b0 <rshift>
 8008dde:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008de2:	3501      	adds	r5, #1
 8008de4:	42ab      	cmp	r3, r5
 8008de6:	f6ff aed0 	blt.w	8008b8a <__gethex+0x20a>
 8008dea:	2701      	movs	r7, #1
 8008dec:	e7c0      	b.n	8008d70 <__gethex+0x3f0>
 8008dee:	f016 061f 	ands.w	r6, r6, #31
 8008df2:	d0fa      	beq.n	8008dea <__gethex+0x46a>
 8008df4:	4453      	add	r3, sl
 8008df6:	f1c6 0620 	rsb	r6, r6, #32
 8008dfa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008dfe:	f000 f9e5 	bl	80091cc <__hi0bits>
 8008e02:	42b0      	cmp	r0, r6
 8008e04:	dbe7      	blt.n	8008dd6 <__gethex+0x456>
 8008e06:	e7f0      	b.n	8008dea <__gethex+0x46a>
 8008e08:	0800ada8 	.word	0x0800ada8

08008e0c <L_shift>:
 8008e0c:	f1c2 0208 	rsb	r2, r2, #8
 8008e10:	0092      	lsls	r2, r2, #2
 8008e12:	b570      	push	{r4, r5, r6, lr}
 8008e14:	f1c2 0620 	rsb	r6, r2, #32
 8008e18:	6843      	ldr	r3, [r0, #4]
 8008e1a:	6804      	ldr	r4, [r0, #0]
 8008e1c:	fa03 f506 	lsl.w	r5, r3, r6
 8008e20:	432c      	orrs	r4, r5
 8008e22:	40d3      	lsrs	r3, r2
 8008e24:	6004      	str	r4, [r0, #0]
 8008e26:	f840 3f04 	str.w	r3, [r0, #4]!
 8008e2a:	4288      	cmp	r0, r1
 8008e2c:	d3f4      	bcc.n	8008e18 <L_shift+0xc>
 8008e2e:	bd70      	pop	{r4, r5, r6, pc}

08008e30 <__match>:
 8008e30:	b530      	push	{r4, r5, lr}
 8008e32:	6803      	ldr	r3, [r0, #0]
 8008e34:	3301      	adds	r3, #1
 8008e36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e3a:	b914      	cbnz	r4, 8008e42 <__match+0x12>
 8008e3c:	6003      	str	r3, [r0, #0]
 8008e3e:	2001      	movs	r0, #1
 8008e40:	bd30      	pop	{r4, r5, pc}
 8008e42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e46:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008e4a:	2d19      	cmp	r5, #25
 8008e4c:	bf98      	it	ls
 8008e4e:	3220      	addls	r2, #32
 8008e50:	42a2      	cmp	r2, r4
 8008e52:	d0f0      	beq.n	8008e36 <__match+0x6>
 8008e54:	2000      	movs	r0, #0
 8008e56:	e7f3      	b.n	8008e40 <__match+0x10>

08008e58 <__hexnan>:
 8008e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e5c:	680b      	ldr	r3, [r1, #0]
 8008e5e:	115e      	asrs	r6, r3, #5
 8008e60:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008e64:	f013 031f 	ands.w	r3, r3, #31
 8008e68:	b087      	sub	sp, #28
 8008e6a:	bf18      	it	ne
 8008e6c:	3604      	addne	r6, #4
 8008e6e:	2500      	movs	r5, #0
 8008e70:	1f37      	subs	r7, r6, #4
 8008e72:	4690      	mov	r8, r2
 8008e74:	6802      	ldr	r2, [r0, #0]
 8008e76:	9301      	str	r3, [sp, #4]
 8008e78:	4682      	mov	sl, r0
 8008e7a:	f846 5c04 	str.w	r5, [r6, #-4]
 8008e7e:	46b9      	mov	r9, r7
 8008e80:	463c      	mov	r4, r7
 8008e82:	9502      	str	r5, [sp, #8]
 8008e84:	46ab      	mov	fp, r5
 8008e86:	7851      	ldrb	r1, [r2, #1]
 8008e88:	1c53      	adds	r3, r2, #1
 8008e8a:	9303      	str	r3, [sp, #12]
 8008e8c:	b341      	cbz	r1, 8008ee0 <__hexnan+0x88>
 8008e8e:	4608      	mov	r0, r1
 8008e90:	9205      	str	r2, [sp, #20]
 8008e92:	9104      	str	r1, [sp, #16]
 8008e94:	f7ff fd5e 	bl	8008954 <__hexdig_fun>
 8008e98:	2800      	cmp	r0, #0
 8008e9a:	d14f      	bne.n	8008f3c <__hexnan+0xe4>
 8008e9c:	9904      	ldr	r1, [sp, #16]
 8008e9e:	9a05      	ldr	r2, [sp, #20]
 8008ea0:	2920      	cmp	r1, #32
 8008ea2:	d818      	bhi.n	8008ed6 <__hexnan+0x7e>
 8008ea4:	9b02      	ldr	r3, [sp, #8]
 8008ea6:	459b      	cmp	fp, r3
 8008ea8:	dd13      	ble.n	8008ed2 <__hexnan+0x7a>
 8008eaa:	454c      	cmp	r4, r9
 8008eac:	d206      	bcs.n	8008ebc <__hexnan+0x64>
 8008eae:	2d07      	cmp	r5, #7
 8008eb0:	dc04      	bgt.n	8008ebc <__hexnan+0x64>
 8008eb2:	462a      	mov	r2, r5
 8008eb4:	4649      	mov	r1, r9
 8008eb6:	4620      	mov	r0, r4
 8008eb8:	f7ff ffa8 	bl	8008e0c <L_shift>
 8008ebc:	4544      	cmp	r4, r8
 8008ebe:	d950      	bls.n	8008f62 <__hexnan+0x10a>
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	f1a4 0904 	sub.w	r9, r4, #4
 8008ec6:	f844 3c04 	str.w	r3, [r4, #-4]
 8008eca:	f8cd b008 	str.w	fp, [sp, #8]
 8008ece:	464c      	mov	r4, r9
 8008ed0:	461d      	mov	r5, r3
 8008ed2:	9a03      	ldr	r2, [sp, #12]
 8008ed4:	e7d7      	b.n	8008e86 <__hexnan+0x2e>
 8008ed6:	2929      	cmp	r1, #41	; 0x29
 8008ed8:	d156      	bne.n	8008f88 <__hexnan+0x130>
 8008eda:	3202      	adds	r2, #2
 8008edc:	f8ca 2000 	str.w	r2, [sl]
 8008ee0:	f1bb 0f00 	cmp.w	fp, #0
 8008ee4:	d050      	beq.n	8008f88 <__hexnan+0x130>
 8008ee6:	454c      	cmp	r4, r9
 8008ee8:	d206      	bcs.n	8008ef8 <__hexnan+0xa0>
 8008eea:	2d07      	cmp	r5, #7
 8008eec:	dc04      	bgt.n	8008ef8 <__hexnan+0xa0>
 8008eee:	462a      	mov	r2, r5
 8008ef0:	4649      	mov	r1, r9
 8008ef2:	4620      	mov	r0, r4
 8008ef4:	f7ff ff8a 	bl	8008e0c <L_shift>
 8008ef8:	4544      	cmp	r4, r8
 8008efa:	d934      	bls.n	8008f66 <__hexnan+0x10e>
 8008efc:	f1a8 0204 	sub.w	r2, r8, #4
 8008f00:	4623      	mov	r3, r4
 8008f02:	f853 1b04 	ldr.w	r1, [r3], #4
 8008f06:	f842 1f04 	str.w	r1, [r2, #4]!
 8008f0a:	429f      	cmp	r7, r3
 8008f0c:	d2f9      	bcs.n	8008f02 <__hexnan+0xaa>
 8008f0e:	1b3b      	subs	r3, r7, r4
 8008f10:	f023 0303 	bic.w	r3, r3, #3
 8008f14:	3304      	adds	r3, #4
 8008f16:	3401      	adds	r4, #1
 8008f18:	3e03      	subs	r6, #3
 8008f1a:	42b4      	cmp	r4, r6
 8008f1c:	bf88      	it	hi
 8008f1e:	2304      	movhi	r3, #4
 8008f20:	4443      	add	r3, r8
 8008f22:	2200      	movs	r2, #0
 8008f24:	f843 2b04 	str.w	r2, [r3], #4
 8008f28:	429f      	cmp	r7, r3
 8008f2a:	d2fb      	bcs.n	8008f24 <__hexnan+0xcc>
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	b91b      	cbnz	r3, 8008f38 <__hexnan+0xe0>
 8008f30:	4547      	cmp	r7, r8
 8008f32:	d127      	bne.n	8008f84 <__hexnan+0x12c>
 8008f34:	2301      	movs	r3, #1
 8008f36:	603b      	str	r3, [r7, #0]
 8008f38:	2005      	movs	r0, #5
 8008f3a:	e026      	b.n	8008f8a <__hexnan+0x132>
 8008f3c:	3501      	adds	r5, #1
 8008f3e:	2d08      	cmp	r5, #8
 8008f40:	f10b 0b01 	add.w	fp, fp, #1
 8008f44:	dd06      	ble.n	8008f54 <__hexnan+0xfc>
 8008f46:	4544      	cmp	r4, r8
 8008f48:	d9c3      	bls.n	8008ed2 <__hexnan+0x7a>
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f50:	2501      	movs	r5, #1
 8008f52:	3c04      	subs	r4, #4
 8008f54:	6822      	ldr	r2, [r4, #0]
 8008f56:	f000 000f 	and.w	r0, r0, #15
 8008f5a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008f5e:	6022      	str	r2, [r4, #0]
 8008f60:	e7b7      	b.n	8008ed2 <__hexnan+0x7a>
 8008f62:	2508      	movs	r5, #8
 8008f64:	e7b5      	b.n	8008ed2 <__hexnan+0x7a>
 8008f66:	9b01      	ldr	r3, [sp, #4]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d0df      	beq.n	8008f2c <__hexnan+0xd4>
 8008f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8008f70:	f1c3 0320 	rsb	r3, r3, #32
 8008f74:	fa22 f303 	lsr.w	r3, r2, r3
 8008f78:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008f7c:	401a      	ands	r2, r3
 8008f7e:	f846 2c04 	str.w	r2, [r6, #-4]
 8008f82:	e7d3      	b.n	8008f2c <__hexnan+0xd4>
 8008f84:	3f04      	subs	r7, #4
 8008f86:	e7d1      	b.n	8008f2c <__hexnan+0xd4>
 8008f88:	2004      	movs	r0, #4
 8008f8a:	b007      	add	sp, #28
 8008f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008f90 <_localeconv_r>:
 8008f90:	4800      	ldr	r0, [pc, #0]	; (8008f94 <_localeconv_r+0x4>)
 8008f92:	4770      	bx	lr
 8008f94:	200001b8 	.word	0x200001b8

08008f98 <malloc>:
 8008f98:	4b02      	ldr	r3, [pc, #8]	; (8008fa4 <malloc+0xc>)
 8008f9a:	4601      	mov	r1, r0
 8008f9c:	6818      	ldr	r0, [r3, #0]
 8008f9e:	f000 bd67 	b.w	8009a70 <_malloc_r>
 8008fa2:	bf00      	nop
 8008fa4:	20000060 	.word	0x20000060

08008fa8 <__ascii_mbtowc>:
 8008fa8:	b082      	sub	sp, #8
 8008faa:	b901      	cbnz	r1, 8008fae <__ascii_mbtowc+0x6>
 8008fac:	a901      	add	r1, sp, #4
 8008fae:	b142      	cbz	r2, 8008fc2 <__ascii_mbtowc+0x1a>
 8008fb0:	b14b      	cbz	r3, 8008fc6 <__ascii_mbtowc+0x1e>
 8008fb2:	7813      	ldrb	r3, [r2, #0]
 8008fb4:	600b      	str	r3, [r1, #0]
 8008fb6:	7812      	ldrb	r2, [r2, #0]
 8008fb8:	1e10      	subs	r0, r2, #0
 8008fba:	bf18      	it	ne
 8008fbc:	2001      	movne	r0, #1
 8008fbe:	b002      	add	sp, #8
 8008fc0:	4770      	bx	lr
 8008fc2:	4610      	mov	r0, r2
 8008fc4:	e7fb      	b.n	8008fbe <__ascii_mbtowc+0x16>
 8008fc6:	f06f 0001 	mvn.w	r0, #1
 8008fca:	e7f8      	b.n	8008fbe <__ascii_mbtowc+0x16>

08008fcc <memcpy>:
 8008fcc:	440a      	add	r2, r1
 8008fce:	4291      	cmp	r1, r2
 8008fd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8008fd4:	d100      	bne.n	8008fd8 <memcpy+0xc>
 8008fd6:	4770      	bx	lr
 8008fd8:	b510      	push	{r4, lr}
 8008fda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008fe2:	4291      	cmp	r1, r2
 8008fe4:	d1f9      	bne.n	8008fda <memcpy+0xe>
 8008fe6:	bd10      	pop	{r4, pc}

08008fe8 <_Balloc>:
 8008fe8:	b570      	push	{r4, r5, r6, lr}
 8008fea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008fec:	4604      	mov	r4, r0
 8008fee:	460d      	mov	r5, r1
 8008ff0:	b976      	cbnz	r6, 8009010 <_Balloc+0x28>
 8008ff2:	2010      	movs	r0, #16
 8008ff4:	f7ff ffd0 	bl	8008f98 <malloc>
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	6260      	str	r0, [r4, #36]	; 0x24
 8008ffc:	b920      	cbnz	r0, 8009008 <_Balloc+0x20>
 8008ffe:	4b18      	ldr	r3, [pc, #96]	; (8009060 <_Balloc+0x78>)
 8009000:	4818      	ldr	r0, [pc, #96]	; (8009064 <_Balloc+0x7c>)
 8009002:	2166      	movs	r1, #102	; 0x66
 8009004:	f7fe fdaa 	bl	8007b5c <__assert_func>
 8009008:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800900c:	6006      	str	r6, [r0, #0]
 800900e:	60c6      	str	r6, [r0, #12]
 8009010:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009012:	68f3      	ldr	r3, [r6, #12]
 8009014:	b183      	cbz	r3, 8009038 <_Balloc+0x50>
 8009016:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009018:	68db      	ldr	r3, [r3, #12]
 800901a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800901e:	b9b8      	cbnz	r0, 8009050 <_Balloc+0x68>
 8009020:	2101      	movs	r1, #1
 8009022:	fa01 f605 	lsl.w	r6, r1, r5
 8009026:	1d72      	adds	r2, r6, #5
 8009028:	0092      	lsls	r2, r2, #2
 800902a:	4620      	mov	r0, r4
 800902c:	f000 fc9d 	bl	800996a <_calloc_r>
 8009030:	b160      	cbz	r0, 800904c <_Balloc+0x64>
 8009032:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009036:	e00e      	b.n	8009056 <_Balloc+0x6e>
 8009038:	2221      	movs	r2, #33	; 0x21
 800903a:	2104      	movs	r1, #4
 800903c:	4620      	mov	r0, r4
 800903e:	f000 fc94 	bl	800996a <_calloc_r>
 8009042:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009044:	60f0      	str	r0, [r6, #12]
 8009046:	68db      	ldr	r3, [r3, #12]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d1e4      	bne.n	8009016 <_Balloc+0x2e>
 800904c:	2000      	movs	r0, #0
 800904e:	bd70      	pop	{r4, r5, r6, pc}
 8009050:	6802      	ldr	r2, [r0, #0]
 8009052:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009056:	2300      	movs	r3, #0
 8009058:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800905c:	e7f7      	b.n	800904e <_Balloc+0x66>
 800905e:	bf00      	nop
 8009060:	0800ac90 	.word	0x0800ac90
 8009064:	0800ae34 	.word	0x0800ae34

08009068 <_Bfree>:
 8009068:	b570      	push	{r4, r5, r6, lr}
 800906a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800906c:	4605      	mov	r5, r0
 800906e:	460c      	mov	r4, r1
 8009070:	b976      	cbnz	r6, 8009090 <_Bfree+0x28>
 8009072:	2010      	movs	r0, #16
 8009074:	f7ff ff90 	bl	8008f98 <malloc>
 8009078:	4602      	mov	r2, r0
 800907a:	6268      	str	r0, [r5, #36]	; 0x24
 800907c:	b920      	cbnz	r0, 8009088 <_Bfree+0x20>
 800907e:	4b09      	ldr	r3, [pc, #36]	; (80090a4 <_Bfree+0x3c>)
 8009080:	4809      	ldr	r0, [pc, #36]	; (80090a8 <_Bfree+0x40>)
 8009082:	218a      	movs	r1, #138	; 0x8a
 8009084:	f7fe fd6a 	bl	8007b5c <__assert_func>
 8009088:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800908c:	6006      	str	r6, [r0, #0]
 800908e:	60c6      	str	r6, [r0, #12]
 8009090:	b13c      	cbz	r4, 80090a2 <_Bfree+0x3a>
 8009092:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009094:	6862      	ldr	r2, [r4, #4]
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800909c:	6021      	str	r1, [r4, #0]
 800909e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80090a2:	bd70      	pop	{r4, r5, r6, pc}
 80090a4:	0800ac90 	.word	0x0800ac90
 80090a8:	0800ae34 	.word	0x0800ae34

080090ac <__multadd>:
 80090ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090b0:	690d      	ldr	r5, [r1, #16]
 80090b2:	4607      	mov	r7, r0
 80090b4:	460c      	mov	r4, r1
 80090b6:	461e      	mov	r6, r3
 80090b8:	f101 0c14 	add.w	ip, r1, #20
 80090bc:	2000      	movs	r0, #0
 80090be:	f8dc 3000 	ldr.w	r3, [ip]
 80090c2:	b299      	uxth	r1, r3
 80090c4:	fb02 6101 	mla	r1, r2, r1, r6
 80090c8:	0c1e      	lsrs	r6, r3, #16
 80090ca:	0c0b      	lsrs	r3, r1, #16
 80090cc:	fb02 3306 	mla	r3, r2, r6, r3
 80090d0:	b289      	uxth	r1, r1
 80090d2:	3001      	adds	r0, #1
 80090d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80090d8:	4285      	cmp	r5, r0
 80090da:	f84c 1b04 	str.w	r1, [ip], #4
 80090de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80090e2:	dcec      	bgt.n	80090be <__multadd+0x12>
 80090e4:	b30e      	cbz	r6, 800912a <__multadd+0x7e>
 80090e6:	68a3      	ldr	r3, [r4, #8]
 80090e8:	42ab      	cmp	r3, r5
 80090ea:	dc19      	bgt.n	8009120 <__multadd+0x74>
 80090ec:	6861      	ldr	r1, [r4, #4]
 80090ee:	4638      	mov	r0, r7
 80090f0:	3101      	adds	r1, #1
 80090f2:	f7ff ff79 	bl	8008fe8 <_Balloc>
 80090f6:	4680      	mov	r8, r0
 80090f8:	b928      	cbnz	r0, 8009106 <__multadd+0x5a>
 80090fa:	4602      	mov	r2, r0
 80090fc:	4b0c      	ldr	r3, [pc, #48]	; (8009130 <__multadd+0x84>)
 80090fe:	480d      	ldr	r0, [pc, #52]	; (8009134 <__multadd+0x88>)
 8009100:	21b5      	movs	r1, #181	; 0xb5
 8009102:	f7fe fd2b 	bl	8007b5c <__assert_func>
 8009106:	6922      	ldr	r2, [r4, #16]
 8009108:	3202      	adds	r2, #2
 800910a:	f104 010c 	add.w	r1, r4, #12
 800910e:	0092      	lsls	r2, r2, #2
 8009110:	300c      	adds	r0, #12
 8009112:	f7ff ff5b 	bl	8008fcc <memcpy>
 8009116:	4621      	mov	r1, r4
 8009118:	4638      	mov	r0, r7
 800911a:	f7ff ffa5 	bl	8009068 <_Bfree>
 800911e:	4644      	mov	r4, r8
 8009120:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009124:	3501      	adds	r5, #1
 8009126:	615e      	str	r6, [r3, #20]
 8009128:	6125      	str	r5, [r4, #16]
 800912a:	4620      	mov	r0, r4
 800912c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009130:	0800ada8 	.word	0x0800ada8
 8009134:	0800ae34 	.word	0x0800ae34

08009138 <__s2b>:
 8009138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800913c:	460c      	mov	r4, r1
 800913e:	4615      	mov	r5, r2
 8009140:	461f      	mov	r7, r3
 8009142:	2209      	movs	r2, #9
 8009144:	3308      	adds	r3, #8
 8009146:	4606      	mov	r6, r0
 8009148:	fb93 f3f2 	sdiv	r3, r3, r2
 800914c:	2100      	movs	r1, #0
 800914e:	2201      	movs	r2, #1
 8009150:	429a      	cmp	r2, r3
 8009152:	db09      	blt.n	8009168 <__s2b+0x30>
 8009154:	4630      	mov	r0, r6
 8009156:	f7ff ff47 	bl	8008fe8 <_Balloc>
 800915a:	b940      	cbnz	r0, 800916e <__s2b+0x36>
 800915c:	4602      	mov	r2, r0
 800915e:	4b19      	ldr	r3, [pc, #100]	; (80091c4 <__s2b+0x8c>)
 8009160:	4819      	ldr	r0, [pc, #100]	; (80091c8 <__s2b+0x90>)
 8009162:	21ce      	movs	r1, #206	; 0xce
 8009164:	f7fe fcfa 	bl	8007b5c <__assert_func>
 8009168:	0052      	lsls	r2, r2, #1
 800916a:	3101      	adds	r1, #1
 800916c:	e7f0      	b.n	8009150 <__s2b+0x18>
 800916e:	9b08      	ldr	r3, [sp, #32]
 8009170:	6143      	str	r3, [r0, #20]
 8009172:	2d09      	cmp	r5, #9
 8009174:	f04f 0301 	mov.w	r3, #1
 8009178:	6103      	str	r3, [r0, #16]
 800917a:	dd16      	ble.n	80091aa <__s2b+0x72>
 800917c:	f104 0909 	add.w	r9, r4, #9
 8009180:	46c8      	mov	r8, r9
 8009182:	442c      	add	r4, r5
 8009184:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009188:	4601      	mov	r1, r0
 800918a:	3b30      	subs	r3, #48	; 0x30
 800918c:	220a      	movs	r2, #10
 800918e:	4630      	mov	r0, r6
 8009190:	f7ff ff8c 	bl	80090ac <__multadd>
 8009194:	45a0      	cmp	r8, r4
 8009196:	d1f5      	bne.n	8009184 <__s2b+0x4c>
 8009198:	f1a5 0408 	sub.w	r4, r5, #8
 800919c:	444c      	add	r4, r9
 800919e:	1b2d      	subs	r5, r5, r4
 80091a0:	1963      	adds	r3, r4, r5
 80091a2:	42bb      	cmp	r3, r7
 80091a4:	db04      	blt.n	80091b0 <__s2b+0x78>
 80091a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091aa:	340a      	adds	r4, #10
 80091ac:	2509      	movs	r5, #9
 80091ae:	e7f6      	b.n	800919e <__s2b+0x66>
 80091b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80091b4:	4601      	mov	r1, r0
 80091b6:	3b30      	subs	r3, #48	; 0x30
 80091b8:	220a      	movs	r2, #10
 80091ba:	4630      	mov	r0, r6
 80091bc:	f7ff ff76 	bl	80090ac <__multadd>
 80091c0:	e7ee      	b.n	80091a0 <__s2b+0x68>
 80091c2:	bf00      	nop
 80091c4:	0800ada8 	.word	0x0800ada8
 80091c8:	0800ae34 	.word	0x0800ae34

080091cc <__hi0bits>:
 80091cc:	0c03      	lsrs	r3, r0, #16
 80091ce:	041b      	lsls	r3, r3, #16
 80091d0:	b9d3      	cbnz	r3, 8009208 <__hi0bits+0x3c>
 80091d2:	0400      	lsls	r0, r0, #16
 80091d4:	2310      	movs	r3, #16
 80091d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80091da:	bf04      	itt	eq
 80091dc:	0200      	lsleq	r0, r0, #8
 80091de:	3308      	addeq	r3, #8
 80091e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80091e4:	bf04      	itt	eq
 80091e6:	0100      	lsleq	r0, r0, #4
 80091e8:	3304      	addeq	r3, #4
 80091ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80091ee:	bf04      	itt	eq
 80091f0:	0080      	lsleq	r0, r0, #2
 80091f2:	3302      	addeq	r3, #2
 80091f4:	2800      	cmp	r0, #0
 80091f6:	db05      	blt.n	8009204 <__hi0bits+0x38>
 80091f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80091fc:	f103 0301 	add.w	r3, r3, #1
 8009200:	bf08      	it	eq
 8009202:	2320      	moveq	r3, #32
 8009204:	4618      	mov	r0, r3
 8009206:	4770      	bx	lr
 8009208:	2300      	movs	r3, #0
 800920a:	e7e4      	b.n	80091d6 <__hi0bits+0xa>

0800920c <__lo0bits>:
 800920c:	6803      	ldr	r3, [r0, #0]
 800920e:	f013 0207 	ands.w	r2, r3, #7
 8009212:	4601      	mov	r1, r0
 8009214:	d00b      	beq.n	800922e <__lo0bits+0x22>
 8009216:	07da      	lsls	r2, r3, #31
 8009218:	d423      	bmi.n	8009262 <__lo0bits+0x56>
 800921a:	0798      	lsls	r0, r3, #30
 800921c:	bf49      	itett	mi
 800921e:	085b      	lsrmi	r3, r3, #1
 8009220:	089b      	lsrpl	r3, r3, #2
 8009222:	2001      	movmi	r0, #1
 8009224:	600b      	strmi	r3, [r1, #0]
 8009226:	bf5c      	itt	pl
 8009228:	600b      	strpl	r3, [r1, #0]
 800922a:	2002      	movpl	r0, #2
 800922c:	4770      	bx	lr
 800922e:	b298      	uxth	r0, r3
 8009230:	b9a8      	cbnz	r0, 800925e <__lo0bits+0x52>
 8009232:	0c1b      	lsrs	r3, r3, #16
 8009234:	2010      	movs	r0, #16
 8009236:	b2da      	uxtb	r2, r3
 8009238:	b90a      	cbnz	r2, 800923e <__lo0bits+0x32>
 800923a:	3008      	adds	r0, #8
 800923c:	0a1b      	lsrs	r3, r3, #8
 800923e:	071a      	lsls	r2, r3, #28
 8009240:	bf04      	itt	eq
 8009242:	091b      	lsreq	r3, r3, #4
 8009244:	3004      	addeq	r0, #4
 8009246:	079a      	lsls	r2, r3, #30
 8009248:	bf04      	itt	eq
 800924a:	089b      	lsreq	r3, r3, #2
 800924c:	3002      	addeq	r0, #2
 800924e:	07da      	lsls	r2, r3, #31
 8009250:	d403      	bmi.n	800925a <__lo0bits+0x4e>
 8009252:	085b      	lsrs	r3, r3, #1
 8009254:	f100 0001 	add.w	r0, r0, #1
 8009258:	d005      	beq.n	8009266 <__lo0bits+0x5a>
 800925a:	600b      	str	r3, [r1, #0]
 800925c:	4770      	bx	lr
 800925e:	4610      	mov	r0, r2
 8009260:	e7e9      	b.n	8009236 <__lo0bits+0x2a>
 8009262:	2000      	movs	r0, #0
 8009264:	4770      	bx	lr
 8009266:	2020      	movs	r0, #32
 8009268:	4770      	bx	lr
	...

0800926c <__i2b>:
 800926c:	b510      	push	{r4, lr}
 800926e:	460c      	mov	r4, r1
 8009270:	2101      	movs	r1, #1
 8009272:	f7ff feb9 	bl	8008fe8 <_Balloc>
 8009276:	4602      	mov	r2, r0
 8009278:	b928      	cbnz	r0, 8009286 <__i2b+0x1a>
 800927a:	4b05      	ldr	r3, [pc, #20]	; (8009290 <__i2b+0x24>)
 800927c:	4805      	ldr	r0, [pc, #20]	; (8009294 <__i2b+0x28>)
 800927e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009282:	f7fe fc6b 	bl	8007b5c <__assert_func>
 8009286:	2301      	movs	r3, #1
 8009288:	6144      	str	r4, [r0, #20]
 800928a:	6103      	str	r3, [r0, #16]
 800928c:	bd10      	pop	{r4, pc}
 800928e:	bf00      	nop
 8009290:	0800ada8 	.word	0x0800ada8
 8009294:	0800ae34 	.word	0x0800ae34

08009298 <__multiply>:
 8009298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800929c:	4691      	mov	r9, r2
 800929e:	690a      	ldr	r2, [r1, #16]
 80092a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80092a4:	429a      	cmp	r2, r3
 80092a6:	bfb8      	it	lt
 80092a8:	460b      	movlt	r3, r1
 80092aa:	460c      	mov	r4, r1
 80092ac:	bfbc      	itt	lt
 80092ae:	464c      	movlt	r4, r9
 80092b0:	4699      	movlt	r9, r3
 80092b2:	6927      	ldr	r7, [r4, #16]
 80092b4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80092b8:	68a3      	ldr	r3, [r4, #8]
 80092ba:	6861      	ldr	r1, [r4, #4]
 80092bc:	eb07 060a 	add.w	r6, r7, sl
 80092c0:	42b3      	cmp	r3, r6
 80092c2:	b085      	sub	sp, #20
 80092c4:	bfb8      	it	lt
 80092c6:	3101      	addlt	r1, #1
 80092c8:	f7ff fe8e 	bl	8008fe8 <_Balloc>
 80092cc:	b930      	cbnz	r0, 80092dc <__multiply+0x44>
 80092ce:	4602      	mov	r2, r0
 80092d0:	4b44      	ldr	r3, [pc, #272]	; (80093e4 <__multiply+0x14c>)
 80092d2:	4845      	ldr	r0, [pc, #276]	; (80093e8 <__multiply+0x150>)
 80092d4:	f240 115d 	movw	r1, #349	; 0x15d
 80092d8:	f7fe fc40 	bl	8007b5c <__assert_func>
 80092dc:	f100 0514 	add.w	r5, r0, #20
 80092e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80092e4:	462b      	mov	r3, r5
 80092e6:	2200      	movs	r2, #0
 80092e8:	4543      	cmp	r3, r8
 80092ea:	d321      	bcc.n	8009330 <__multiply+0x98>
 80092ec:	f104 0314 	add.w	r3, r4, #20
 80092f0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80092f4:	f109 0314 	add.w	r3, r9, #20
 80092f8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80092fc:	9202      	str	r2, [sp, #8]
 80092fe:	1b3a      	subs	r2, r7, r4
 8009300:	3a15      	subs	r2, #21
 8009302:	f022 0203 	bic.w	r2, r2, #3
 8009306:	3204      	adds	r2, #4
 8009308:	f104 0115 	add.w	r1, r4, #21
 800930c:	428f      	cmp	r7, r1
 800930e:	bf38      	it	cc
 8009310:	2204      	movcc	r2, #4
 8009312:	9201      	str	r2, [sp, #4]
 8009314:	9a02      	ldr	r2, [sp, #8]
 8009316:	9303      	str	r3, [sp, #12]
 8009318:	429a      	cmp	r2, r3
 800931a:	d80c      	bhi.n	8009336 <__multiply+0x9e>
 800931c:	2e00      	cmp	r6, #0
 800931e:	dd03      	ble.n	8009328 <__multiply+0x90>
 8009320:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009324:	2b00      	cmp	r3, #0
 8009326:	d05a      	beq.n	80093de <__multiply+0x146>
 8009328:	6106      	str	r6, [r0, #16]
 800932a:	b005      	add	sp, #20
 800932c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009330:	f843 2b04 	str.w	r2, [r3], #4
 8009334:	e7d8      	b.n	80092e8 <__multiply+0x50>
 8009336:	f8b3 a000 	ldrh.w	sl, [r3]
 800933a:	f1ba 0f00 	cmp.w	sl, #0
 800933e:	d024      	beq.n	800938a <__multiply+0xf2>
 8009340:	f104 0e14 	add.w	lr, r4, #20
 8009344:	46a9      	mov	r9, r5
 8009346:	f04f 0c00 	mov.w	ip, #0
 800934a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800934e:	f8d9 1000 	ldr.w	r1, [r9]
 8009352:	fa1f fb82 	uxth.w	fp, r2
 8009356:	b289      	uxth	r1, r1
 8009358:	fb0a 110b 	mla	r1, sl, fp, r1
 800935c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009360:	f8d9 2000 	ldr.w	r2, [r9]
 8009364:	4461      	add	r1, ip
 8009366:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800936a:	fb0a c20b 	mla	r2, sl, fp, ip
 800936e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009372:	b289      	uxth	r1, r1
 8009374:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009378:	4577      	cmp	r7, lr
 800937a:	f849 1b04 	str.w	r1, [r9], #4
 800937e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009382:	d8e2      	bhi.n	800934a <__multiply+0xb2>
 8009384:	9a01      	ldr	r2, [sp, #4]
 8009386:	f845 c002 	str.w	ip, [r5, r2]
 800938a:	9a03      	ldr	r2, [sp, #12]
 800938c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009390:	3304      	adds	r3, #4
 8009392:	f1b9 0f00 	cmp.w	r9, #0
 8009396:	d020      	beq.n	80093da <__multiply+0x142>
 8009398:	6829      	ldr	r1, [r5, #0]
 800939a:	f104 0c14 	add.w	ip, r4, #20
 800939e:	46ae      	mov	lr, r5
 80093a0:	f04f 0a00 	mov.w	sl, #0
 80093a4:	f8bc b000 	ldrh.w	fp, [ip]
 80093a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80093ac:	fb09 220b 	mla	r2, r9, fp, r2
 80093b0:	4492      	add	sl, r2
 80093b2:	b289      	uxth	r1, r1
 80093b4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80093b8:	f84e 1b04 	str.w	r1, [lr], #4
 80093bc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80093c0:	f8be 1000 	ldrh.w	r1, [lr]
 80093c4:	0c12      	lsrs	r2, r2, #16
 80093c6:	fb09 1102 	mla	r1, r9, r2, r1
 80093ca:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80093ce:	4567      	cmp	r7, ip
 80093d0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80093d4:	d8e6      	bhi.n	80093a4 <__multiply+0x10c>
 80093d6:	9a01      	ldr	r2, [sp, #4]
 80093d8:	50a9      	str	r1, [r5, r2]
 80093da:	3504      	adds	r5, #4
 80093dc:	e79a      	b.n	8009314 <__multiply+0x7c>
 80093de:	3e01      	subs	r6, #1
 80093e0:	e79c      	b.n	800931c <__multiply+0x84>
 80093e2:	bf00      	nop
 80093e4:	0800ada8 	.word	0x0800ada8
 80093e8:	0800ae34 	.word	0x0800ae34

080093ec <__pow5mult>:
 80093ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093f0:	4615      	mov	r5, r2
 80093f2:	f012 0203 	ands.w	r2, r2, #3
 80093f6:	4606      	mov	r6, r0
 80093f8:	460f      	mov	r7, r1
 80093fa:	d007      	beq.n	800940c <__pow5mult+0x20>
 80093fc:	4c25      	ldr	r4, [pc, #148]	; (8009494 <__pow5mult+0xa8>)
 80093fe:	3a01      	subs	r2, #1
 8009400:	2300      	movs	r3, #0
 8009402:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009406:	f7ff fe51 	bl	80090ac <__multadd>
 800940a:	4607      	mov	r7, r0
 800940c:	10ad      	asrs	r5, r5, #2
 800940e:	d03d      	beq.n	800948c <__pow5mult+0xa0>
 8009410:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009412:	b97c      	cbnz	r4, 8009434 <__pow5mult+0x48>
 8009414:	2010      	movs	r0, #16
 8009416:	f7ff fdbf 	bl	8008f98 <malloc>
 800941a:	4602      	mov	r2, r0
 800941c:	6270      	str	r0, [r6, #36]	; 0x24
 800941e:	b928      	cbnz	r0, 800942c <__pow5mult+0x40>
 8009420:	4b1d      	ldr	r3, [pc, #116]	; (8009498 <__pow5mult+0xac>)
 8009422:	481e      	ldr	r0, [pc, #120]	; (800949c <__pow5mult+0xb0>)
 8009424:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009428:	f7fe fb98 	bl	8007b5c <__assert_func>
 800942c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009430:	6004      	str	r4, [r0, #0]
 8009432:	60c4      	str	r4, [r0, #12]
 8009434:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009438:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800943c:	b94c      	cbnz	r4, 8009452 <__pow5mult+0x66>
 800943e:	f240 2171 	movw	r1, #625	; 0x271
 8009442:	4630      	mov	r0, r6
 8009444:	f7ff ff12 	bl	800926c <__i2b>
 8009448:	2300      	movs	r3, #0
 800944a:	f8c8 0008 	str.w	r0, [r8, #8]
 800944e:	4604      	mov	r4, r0
 8009450:	6003      	str	r3, [r0, #0]
 8009452:	f04f 0900 	mov.w	r9, #0
 8009456:	07eb      	lsls	r3, r5, #31
 8009458:	d50a      	bpl.n	8009470 <__pow5mult+0x84>
 800945a:	4639      	mov	r1, r7
 800945c:	4622      	mov	r2, r4
 800945e:	4630      	mov	r0, r6
 8009460:	f7ff ff1a 	bl	8009298 <__multiply>
 8009464:	4639      	mov	r1, r7
 8009466:	4680      	mov	r8, r0
 8009468:	4630      	mov	r0, r6
 800946a:	f7ff fdfd 	bl	8009068 <_Bfree>
 800946e:	4647      	mov	r7, r8
 8009470:	106d      	asrs	r5, r5, #1
 8009472:	d00b      	beq.n	800948c <__pow5mult+0xa0>
 8009474:	6820      	ldr	r0, [r4, #0]
 8009476:	b938      	cbnz	r0, 8009488 <__pow5mult+0x9c>
 8009478:	4622      	mov	r2, r4
 800947a:	4621      	mov	r1, r4
 800947c:	4630      	mov	r0, r6
 800947e:	f7ff ff0b 	bl	8009298 <__multiply>
 8009482:	6020      	str	r0, [r4, #0]
 8009484:	f8c0 9000 	str.w	r9, [r0]
 8009488:	4604      	mov	r4, r0
 800948a:	e7e4      	b.n	8009456 <__pow5mult+0x6a>
 800948c:	4638      	mov	r0, r7
 800948e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009492:	bf00      	nop
 8009494:	0800af80 	.word	0x0800af80
 8009498:	0800ac90 	.word	0x0800ac90
 800949c:	0800ae34 	.word	0x0800ae34

080094a0 <__lshift>:
 80094a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094a4:	460c      	mov	r4, r1
 80094a6:	6849      	ldr	r1, [r1, #4]
 80094a8:	6923      	ldr	r3, [r4, #16]
 80094aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80094ae:	68a3      	ldr	r3, [r4, #8]
 80094b0:	4607      	mov	r7, r0
 80094b2:	4691      	mov	r9, r2
 80094b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80094b8:	f108 0601 	add.w	r6, r8, #1
 80094bc:	42b3      	cmp	r3, r6
 80094be:	db0b      	blt.n	80094d8 <__lshift+0x38>
 80094c0:	4638      	mov	r0, r7
 80094c2:	f7ff fd91 	bl	8008fe8 <_Balloc>
 80094c6:	4605      	mov	r5, r0
 80094c8:	b948      	cbnz	r0, 80094de <__lshift+0x3e>
 80094ca:	4602      	mov	r2, r0
 80094cc:	4b2a      	ldr	r3, [pc, #168]	; (8009578 <__lshift+0xd8>)
 80094ce:	482b      	ldr	r0, [pc, #172]	; (800957c <__lshift+0xdc>)
 80094d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80094d4:	f7fe fb42 	bl	8007b5c <__assert_func>
 80094d8:	3101      	adds	r1, #1
 80094da:	005b      	lsls	r3, r3, #1
 80094dc:	e7ee      	b.n	80094bc <__lshift+0x1c>
 80094de:	2300      	movs	r3, #0
 80094e0:	f100 0114 	add.w	r1, r0, #20
 80094e4:	f100 0210 	add.w	r2, r0, #16
 80094e8:	4618      	mov	r0, r3
 80094ea:	4553      	cmp	r3, sl
 80094ec:	db37      	blt.n	800955e <__lshift+0xbe>
 80094ee:	6920      	ldr	r0, [r4, #16]
 80094f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80094f4:	f104 0314 	add.w	r3, r4, #20
 80094f8:	f019 091f 	ands.w	r9, r9, #31
 80094fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009500:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009504:	d02f      	beq.n	8009566 <__lshift+0xc6>
 8009506:	f1c9 0e20 	rsb	lr, r9, #32
 800950a:	468a      	mov	sl, r1
 800950c:	f04f 0c00 	mov.w	ip, #0
 8009510:	681a      	ldr	r2, [r3, #0]
 8009512:	fa02 f209 	lsl.w	r2, r2, r9
 8009516:	ea42 020c 	orr.w	r2, r2, ip
 800951a:	f84a 2b04 	str.w	r2, [sl], #4
 800951e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009522:	4298      	cmp	r0, r3
 8009524:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009528:	d8f2      	bhi.n	8009510 <__lshift+0x70>
 800952a:	1b03      	subs	r3, r0, r4
 800952c:	3b15      	subs	r3, #21
 800952e:	f023 0303 	bic.w	r3, r3, #3
 8009532:	3304      	adds	r3, #4
 8009534:	f104 0215 	add.w	r2, r4, #21
 8009538:	4290      	cmp	r0, r2
 800953a:	bf38      	it	cc
 800953c:	2304      	movcc	r3, #4
 800953e:	f841 c003 	str.w	ip, [r1, r3]
 8009542:	f1bc 0f00 	cmp.w	ip, #0
 8009546:	d001      	beq.n	800954c <__lshift+0xac>
 8009548:	f108 0602 	add.w	r6, r8, #2
 800954c:	3e01      	subs	r6, #1
 800954e:	4638      	mov	r0, r7
 8009550:	612e      	str	r6, [r5, #16]
 8009552:	4621      	mov	r1, r4
 8009554:	f7ff fd88 	bl	8009068 <_Bfree>
 8009558:	4628      	mov	r0, r5
 800955a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800955e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009562:	3301      	adds	r3, #1
 8009564:	e7c1      	b.n	80094ea <__lshift+0x4a>
 8009566:	3904      	subs	r1, #4
 8009568:	f853 2b04 	ldr.w	r2, [r3], #4
 800956c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009570:	4298      	cmp	r0, r3
 8009572:	d8f9      	bhi.n	8009568 <__lshift+0xc8>
 8009574:	e7ea      	b.n	800954c <__lshift+0xac>
 8009576:	bf00      	nop
 8009578:	0800ada8 	.word	0x0800ada8
 800957c:	0800ae34 	.word	0x0800ae34

08009580 <__mcmp>:
 8009580:	b530      	push	{r4, r5, lr}
 8009582:	6902      	ldr	r2, [r0, #16]
 8009584:	690c      	ldr	r4, [r1, #16]
 8009586:	1b12      	subs	r2, r2, r4
 8009588:	d10e      	bne.n	80095a8 <__mcmp+0x28>
 800958a:	f100 0314 	add.w	r3, r0, #20
 800958e:	3114      	adds	r1, #20
 8009590:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009594:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009598:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800959c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80095a0:	42a5      	cmp	r5, r4
 80095a2:	d003      	beq.n	80095ac <__mcmp+0x2c>
 80095a4:	d305      	bcc.n	80095b2 <__mcmp+0x32>
 80095a6:	2201      	movs	r2, #1
 80095a8:	4610      	mov	r0, r2
 80095aa:	bd30      	pop	{r4, r5, pc}
 80095ac:	4283      	cmp	r3, r0
 80095ae:	d3f3      	bcc.n	8009598 <__mcmp+0x18>
 80095b0:	e7fa      	b.n	80095a8 <__mcmp+0x28>
 80095b2:	f04f 32ff 	mov.w	r2, #4294967295
 80095b6:	e7f7      	b.n	80095a8 <__mcmp+0x28>

080095b8 <__mdiff>:
 80095b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095bc:	460c      	mov	r4, r1
 80095be:	4606      	mov	r6, r0
 80095c0:	4611      	mov	r1, r2
 80095c2:	4620      	mov	r0, r4
 80095c4:	4690      	mov	r8, r2
 80095c6:	f7ff ffdb 	bl	8009580 <__mcmp>
 80095ca:	1e05      	subs	r5, r0, #0
 80095cc:	d110      	bne.n	80095f0 <__mdiff+0x38>
 80095ce:	4629      	mov	r1, r5
 80095d0:	4630      	mov	r0, r6
 80095d2:	f7ff fd09 	bl	8008fe8 <_Balloc>
 80095d6:	b930      	cbnz	r0, 80095e6 <__mdiff+0x2e>
 80095d8:	4b3a      	ldr	r3, [pc, #232]	; (80096c4 <__mdiff+0x10c>)
 80095da:	4602      	mov	r2, r0
 80095dc:	f240 2132 	movw	r1, #562	; 0x232
 80095e0:	4839      	ldr	r0, [pc, #228]	; (80096c8 <__mdiff+0x110>)
 80095e2:	f7fe fabb 	bl	8007b5c <__assert_func>
 80095e6:	2301      	movs	r3, #1
 80095e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80095ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095f0:	bfa4      	itt	ge
 80095f2:	4643      	movge	r3, r8
 80095f4:	46a0      	movge	r8, r4
 80095f6:	4630      	mov	r0, r6
 80095f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80095fc:	bfa6      	itte	ge
 80095fe:	461c      	movge	r4, r3
 8009600:	2500      	movge	r5, #0
 8009602:	2501      	movlt	r5, #1
 8009604:	f7ff fcf0 	bl	8008fe8 <_Balloc>
 8009608:	b920      	cbnz	r0, 8009614 <__mdiff+0x5c>
 800960a:	4b2e      	ldr	r3, [pc, #184]	; (80096c4 <__mdiff+0x10c>)
 800960c:	4602      	mov	r2, r0
 800960e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009612:	e7e5      	b.n	80095e0 <__mdiff+0x28>
 8009614:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009618:	6926      	ldr	r6, [r4, #16]
 800961a:	60c5      	str	r5, [r0, #12]
 800961c:	f104 0914 	add.w	r9, r4, #20
 8009620:	f108 0514 	add.w	r5, r8, #20
 8009624:	f100 0e14 	add.w	lr, r0, #20
 8009628:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800962c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009630:	f108 0210 	add.w	r2, r8, #16
 8009634:	46f2      	mov	sl, lr
 8009636:	2100      	movs	r1, #0
 8009638:	f859 3b04 	ldr.w	r3, [r9], #4
 800963c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009640:	fa1f f883 	uxth.w	r8, r3
 8009644:	fa11 f18b 	uxtah	r1, r1, fp
 8009648:	0c1b      	lsrs	r3, r3, #16
 800964a:	eba1 0808 	sub.w	r8, r1, r8
 800964e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009652:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009656:	fa1f f888 	uxth.w	r8, r8
 800965a:	1419      	asrs	r1, r3, #16
 800965c:	454e      	cmp	r6, r9
 800965e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009662:	f84a 3b04 	str.w	r3, [sl], #4
 8009666:	d8e7      	bhi.n	8009638 <__mdiff+0x80>
 8009668:	1b33      	subs	r3, r6, r4
 800966a:	3b15      	subs	r3, #21
 800966c:	f023 0303 	bic.w	r3, r3, #3
 8009670:	3304      	adds	r3, #4
 8009672:	3415      	adds	r4, #21
 8009674:	42a6      	cmp	r6, r4
 8009676:	bf38      	it	cc
 8009678:	2304      	movcc	r3, #4
 800967a:	441d      	add	r5, r3
 800967c:	4473      	add	r3, lr
 800967e:	469e      	mov	lr, r3
 8009680:	462e      	mov	r6, r5
 8009682:	4566      	cmp	r6, ip
 8009684:	d30e      	bcc.n	80096a4 <__mdiff+0xec>
 8009686:	f10c 0203 	add.w	r2, ip, #3
 800968a:	1b52      	subs	r2, r2, r5
 800968c:	f022 0203 	bic.w	r2, r2, #3
 8009690:	3d03      	subs	r5, #3
 8009692:	45ac      	cmp	ip, r5
 8009694:	bf38      	it	cc
 8009696:	2200      	movcc	r2, #0
 8009698:	441a      	add	r2, r3
 800969a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800969e:	b17b      	cbz	r3, 80096c0 <__mdiff+0x108>
 80096a0:	6107      	str	r7, [r0, #16]
 80096a2:	e7a3      	b.n	80095ec <__mdiff+0x34>
 80096a4:	f856 8b04 	ldr.w	r8, [r6], #4
 80096a8:	fa11 f288 	uxtah	r2, r1, r8
 80096ac:	1414      	asrs	r4, r2, #16
 80096ae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80096b2:	b292      	uxth	r2, r2
 80096b4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80096b8:	f84e 2b04 	str.w	r2, [lr], #4
 80096bc:	1421      	asrs	r1, r4, #16
 80096be:	e7e0      	b.n	8009682 <__mdiff+0xca>
 80096c0:	3f01      	subs	r7, #1
 80096c2:	e7ea      	b.n	800969a <__mdiff+0xe2>
 80096c4:	0800ada8 	.word	0x0800ada8
 80096c8:	0800ae34 	.word	0x0800ae34

080096cc <__ulp>:
 80096cc:	b082      	sub	sp, #8
 80096ce:	ed8d 0b00 	vstr	d0, [sp]
 80096d2:	9b01      	ldr	r3, [sp, #4]
 80096d4:	4912      	ldr	r1, [pc, #72]	; (8009720 <__ulp+0x54>)
 80096d6:	4019      	ands	r1, r3
 80096d8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80096dc:	2900      	cmp	r1, #0
 80096de:	dd05      	ble.n	80096ec <__ulp+0x20>
 80096e0:	2200      	movs	r2, #0
 80096e2:	460b      	mov	r3, r1
 80096e4:	ec43 2b10 	vmov	d0, r2, r3
 80096e8:	b002      	add	sp, #8
 80096ea:	4770      	bx	lr
 80096ec:	4249      	negs	r1, r1
 80096ee:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80096f2:	ea4f 5021 	mov.w	r0, r1, asr #20
 80096f6:	f04f 0200 	mov.w	r2, #0
 80096fa:	f04f 0300 	mov.w	r3, #0
 80096fe:	da04      	bge.n	800970a <__ulp+0x3e>
 8009700:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009704:	fa41 f300 	asr.w	r3, r1, r0
 8009708:	e7ec      	b.n	80096e4 <__ulp+0x18>
 800970a:	f1a0 0114 	sub.w	r1, r0, #20
 800970e:	291e      	cmp	r1, #30
 8009710:	bfda      	itte	le
 8009712:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009716:	fa20 f101 	lsrle.w	r1, r0, r1
 800971a:	2101      	movgt	r1, #1
 800971c:	460a      	mov	r2, r1
 800971e:	e7e1      	b.n	80096e4 <__ulp+0x18>
 8009720:	7ff00000 	.word	0x7ff00000

08009724 <__b2d>:
 8009724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009726:	6905      	ldr	r5, [r0, #16]
 8009728:	f100 0714 	add.w	r7, r0, #20
 800972c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009730:	1f2e      	subs	r6, r5, #4
 8009732:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009736:	4620      	mov	r0, r4
 8009738:	f7ff fd48 	bl	80091cc <__hi0bits>
 800973c:	f1c0 0320 	rsb	r3, r0, #32
 8009740:	280a      	cmp	r0, #10
 8009742:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80097c0 <__b2d+0x9c>
 8009746:	600b      	str	r3, [r1, #0]
 8009748:	dc14      	bgt.n	8009774 <__b2d+0x50>
 800974a:	f1c0 0e0b 	rsb	lr, r0, #11
 800974e:	fa24 f10e 	lsr.w	r1, r4, lr
 8009752:	42b7      	cmp	r7, r6
 8009754:	ea41 030c 	orr.w	r3, r1, ip
 8009758:	bf34      	ite	cc
 800975a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800975e:	2100      	movcs	r1, #0
 8009760:	3015      	adds	r0, #21
 8009762:	fa04 f000 	lsl.w	r0, r4, r0
 8009766:	fa21 f10e 	lsr.w	r1, r1, lr
 800976a:	ea40 0201 	orr.w	r2, r0, r1
 800976e:	ec43 2b10 	vmov	d0, r2, r3
 8009772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009774:	42b7      	cmp	r7, r6
 8009776:	bf3a      	itte	cc
 8009778:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800977c:	f1a5 0608 	subcc.w	r6, r5, #8
 8009780:	2100      	movcs	r1, #0
 8009782:	380b      	subs	r0, #11
 8009784:	d017      	beq.n	80097b6 <__b2d+0x92>
 8009786:	f1c0 0c20 	rsb	ip, r0, #32
 800978a:	fa04 f500 	lsl.w	r5, r4, r0
 800978e:	42be      	cmp	r6, r7
 8009790:	fa21 f40c 	lsr.w	r4, r1, ip
 8009794:	ea45 0504 	orr.w	r5, r5, r4
 8009798:	bf8c      	ite	hi
 800979a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800979e:	2400      	movls	r4, #0
 80097a0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80097a4:	fa01 f000 	lsl.w	r0, r1, r0
 80097a8:	fa24 f40c 	lsr.w	r4, r4, ip
 80097ac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80097b0:	ea40 0204 	orr.w	r2, r0, r4
 80097b4:	e7db      	b.n	800976e <__b2d+0x4a>
 80097b6:	ea44 030c 	orr.w	r3, r4, ip
 80097ba:	460a      	mov	r2, r1
 80097bc:	e7d7      	b.n	800976e <__b2d+0x4a>
 80097be:	bf00      	nop
 80097c0:	3ff00000 	.word	0x3ff00000

080097c4 <__d2b>:
 80097c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80097c8:	4689      	mov	r9, r1
 80097ca:	2101      	movs	r1, #1
 80097cc:	ec57 6b10 	vmov	r6, r7, d0
 80097d0:	4690      	mov	r8, r2
 80097d2:	f7ff fc09 	bl	8008fe8 <_Balloc>
 80097d6:	4604      	mov	r4, r0
 80097d8:	b930      	cbnz	r0, 80097e8 <__d2b+0x24>
 80097da:	4602      	mov	r2, r0
 80097dc:	4b25      	ldr	r3, [pc, #148]	; (8009874 <__d2b+0xb0>)
 80097de:	4826      	ldr	r0, [pc, #152]	; (8009878 <__d2b+0xb4>)
 80097e0:	f240 310a 	movw	r1, #778	; 0x30a
 80097e4:	f7fe f9ba 	bl	8007b5c <__assert_func>
 80097e8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80097ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80097f0:	bb35      	cbnz	r5, 8009840 <__d2b+0x7c>
 80097f2:	2e00      	cmp	r6, #0
 80097f4:	9301      	str	r3, [sp, #4]
 80097f6:	d028      	beq.n	800984a <__d2b+0x86>
 80097f8:	4668      	mov	r0, sp
 80097fa:	9600      	str	r6, [sp, #0]
 80097fc:	f7ff fd06 	bl	800920c <__lo0bits>
 8009800:	9900      	ldr	r1, [sp, #0]
 8009802:	b300      	cbz	r0, 8009846 <__d2b+0x82>
 8009804:	9a01      	ldr	r2, [sp, #4]
 8009806:	f1c0 0320 	rsb	r3, r0, #32
 800980a:	fa02 f303 	lsl.w	r3, r2, r3
 800980e:	430b      	orrs	r3, r1
 8009810:	40c2      	lsrs	r2, r0
 8009812:	6163      	str	r3, [r4, #20]
 8009814:	9201      	str	r2, [sp, #4]
 8009816:	9b01      	ldr	r3, [sp, #4]
 8009818:	61a3      	str	r3, [r4, #24]
 800981a:	2b00      	cmp	r3, #0
 800981c:	bf14      	ite	ne
 800981e:	2202      	movne	r2, #2
 8009820:	2201      	moveq	r2, #1
 8009822:	6122      	str	r2, [r4, #16]
 8009824:	b1d5      	cbz	r5, 800985c <__d2b+0x98>
 8009826:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800982a:	4405      	add	r5, r0
 800982c:	f8c9 5000 	str.w	r5, [r9]
 8009830:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009834:	f8c8 0000 	str.w	r0, [r8]
 8009838:	4620      	mov	r0, r4
 800983a:	b003      	add	sp, #12
 800983c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009840:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009844:	e7d5      	b.n	80097f2 <__d2b+0x2e>
 8009846:	6161      	str	r1, [r4, #20]
 8009848:	e7e5      	b.n	8009816 <__d2b+0x52>
 800984a:	a801      	add	r0, sp, #4
 800984c:	f7ff fcde 	bl	800920c <__lo0bits>
 8009850:	9b01      	ldr	r3, [sp, #4]
 8009852:	6163      	str	r3, [r4, #20]
 8009854:	2201      	movs	r2, #1
 8009856:	6122      	str	r2, [r4, #16]
 8009858:	3020      	adds	r0, #32
 800985a:	e7e3      	b.n	8009824 <__d2b+0x60>
 800985c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009860:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009864:	f8c9 0000 	str.w	r0, [r9]
 8009868:	6918      	ldr	r0, [r3, #16]
 800986a:	f7ff fcaf 	bl	80091cc <__hi0bits>
 800986e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009872:	e7df      	b.n	8009834 <__d2b+0x70>
 8009874:	0800ada8 	.word	0x0800ada8
 8009878:	0800ae34 	.word	0x0800ae34

0800987c <__ratio>:
 800987c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009880:	4688      	mov	r8, r1
 8009882:	4669      	mov	r1, sp
 8009884:	4681      	mov	r9, r0
 8009886:	f7ff ff4d 	bl	8009724 <__b2d>
 800988a:	a901      	add	r1, sp, #4
 800988c:	4640      	mov	r0, r8
 800988e:	ec55 4b10 	vmov	r4, r5, d0
 8009892:	f7ff ff47 	bl	8009724 <__b2d>
 8009896:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800989a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800989e:	eba3 0c02 	sub.w	ip, r3, r2
 80098a2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80098a6:	1a9b      	subs	r3, r3, r2
 80098a8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80098ac:	ec51 0b10 	vmov	r0, r1, d0
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	bfd6      	itet	le
 80098b4:	460a      	movle	r2, r1
 80098b6:	462a      	movgt	r2, r5
 80098b8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80098bc:	468b      	mov	fp, r1
 80098be:	462f      	mov	r7, r5
 80098c0:	bfd4      	ite	le
 80098c2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80098c6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80098ca:	4620      	mov	r0, r4
 80098cc:	ee10 2a10 	vmov	r2, s0
 80098d0:	465b      	mov	r3, fp
 80098d2:	4639      	mov	r1, r7
 80098d4:	f7f6 ffea 	bl	80008ac <__aeabi_ddiv>
 80098d8:	ec41 0b10 	vmov	d0, r0, r1
 80098dc:	b003      	add	sp, #12
 80098de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080098e2 <__copybits>:
 80098e2:	3901      	subs	r1, #1
 80098e4:	b570      	push	{r4, r5, r6, lr}
 80098e6:	1149      	asrs	r1, r1, #5
 80098e8:	6914      	ldr	r4, [r2, #16]
 80098ea:	3101      	adds	r1, #1
 80098ec:	f102 0314 	add.w	r3, r2, #20
 80098f0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80098f4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80098f8:	1f05      	subs	r5, r0, #4
 80098fa:	42a3      	cmp	r3, r4
 80098fc:	d30c      	bcc.n	8009918 <__copybits+0x36>
 80098fe:	1aa3      	subs	r3, r4, r2
 8009900:	3b11      	subs	r3, #17
 8009902:	f023 0303 	bic.w	r3, r3, #3
 8009906:	3211      	adds	r2, #17
 8009908:	42a2      	cmp	r2, r4
 800990a:	bf88      	it	hi
 800990c:	2300      	movhi	r3, #0
 800990e:	4418      	add	r0, r3
 8009910:	2300      	movs	r3, #0
 8009912:	4288      	cmp	r0, r1
 8009914:	d305      	bcc.n	8009922 <__copybits+0x40>
 8009916:	bd70      	pop	{r4, r5, r6, pc}
 8009918:	f853 6b04 	ldr.w	r6, [r3], #4
 800991c:	f845 6f04 	str.w	r6, [r5, #4]!
 8009920:	e7eb      	b.n	80098fa <__copybits+0x18>
 8009922:	f840 3b04 	str.w	r3, [r0], #4
 8009926:	e7f4      	b.n	8009912 <__copybits+0x30>

08009928 <__any_on>:
 8009928:	f100 0214 	add.w	r2, r0, #20
 800992c:	6900      	ldr	r0, [r0, #16]
 800992e:	114b      	asrs	r3, r1, #5
 8009930:	4298      	cmp	r0, r3
 8009932:	b510      	push	{r4, lr}
 8009934:	db11      	blt.n	800995a <__any_on+0x32>
 8009936:	dd0a      	ble.n	800994e <__any_on+0x26>
 8009938:	f011 011f 	ands.w	r1, r1, #31
 800993c:	d007      	beq.n	800994e <__any_on+0x26>
 800993e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009942:	fa24 f001 	lsr.w	r0, r4, r1
 8009946:	fa00 f101 	lsl.w	r1, r0, r1
 800994a:	428c      	cmp	r4, r1
 800994c:	d10b      	bne.n	8009966 <__any_on+0x3e>
 800994e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009952:	4293      	cmp	r3, r2
 8009954:	d803      	bhi.n	800995e <__any_on+0x36>
 8009956:	2000      	movs	r0, #0
 8009958:	bd10      	pop	{r4, pc}
 800995a:	4603      	mov	r3, r0
 800995c:	e7f7      	b.n	800994e <__any_on+0x26>
 800995e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009962:	2900      	cmp	r1, #0
 8009964:	d0f5      	beq.n	8009952 <__any_on+0x2a>
 8009966:	2001      	movs	r0, #1
 8009968:	e7f6      	b.n	8009958 <__any_on+0x30>

0800996a <_calloc_r>:
 800996a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800996c:	fba1 2402 	umull	r2, r4, r1, r2
 8009970:	b94c      	cbnz	r4, 8009986 <_calloc_r+0x1c>
 8009972:	4611      	mov	r1, r2
 8009974:	9201      	str	r2, [sp, #4]
 8009976:	f000 f87b 	bl	8009a70 <_malloc_r>
 800997a:	9a01      	ldr	r2, [sp, #4]
 800997c:	4605      	mov	r5, r0
 800997e:	b930      	cbnz	r0, 800998e <_calloc_r+0x24>
 8009980:	4628      	mov	r0, r5
 8009982:	b003      	add	sp, #12
 8009984:	bd30      	pop	{r4, r5, pc}
 8009986:	220c      	movs	r2, #12
 8009988:	6002      	str	r2, [r0, #0]
 800998a:	2500      	movs	r5, #0
 800998c:	e7f8      	b.n	8009980 <_calloc_r+0x16>
 800998e:	4621      	mov	r1, r4
 8009990:	f7fc fdc6 	bl	8006520 <memset>
 8009994:	e7f4      	b.n	8009980 <_calloc_r+0x16>
	...

08009998 <_free_r>:
 8009998:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800999a:	2900      	cmp	r1, #0
 800999c:	d044      	beq.n	8009a28 <_free_r+0x90>
 800999e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099a2:	9001      	str	r0, [sp, #4]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	f1a1 0404 	sub.w	r4, r1, #4
 80099aa:	bfb8      	it	lt
 80099ac:	18e4      	addlt	r4, r4, r3
 80099ae:	f000 fec7 	bl	800a740 <__malloc_lock>
 80099b2:	4a1e      	ldr	r2, [pc, #120]	; (8009a2c <_free_r+0x94>)
 80099b4:	9801      	ldr	r0, [sp, #4]
 80099b6:	6813      	ldr	r3, [r2, #0]
 80099b8:	b933      	cbnz	r3, 80099c8 <_free_r+0x30>
 80099ba:	6063      	str	r3, [r4, #4]
 80099bc:	6014      	str	r4, [r2, #0]
 80099be:	b003      	add	sp, #12
 80099c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80099c4:	f000 bec2 	b.w	800a74c <__malloc_unlock>
 80099c8:	42a3      	cmp	r3, r4
 80099ca:	d908      	bls.n	80099de <_free_r+0x46>
 80099cc:	6825      	ldr	r5, [r4, #0]
 80099ce:	1961      	adds	r1, r4, r5
 80099d0:	428b      	cmp	r3, r1
 80099d2:	bf01      	itttt	eq
 80099d4:	6819      	ldreq	r1, [r3, #0]
 80099d6:	685b      	ldreq	r3, [r3, #4]
 80099d8:	1949      	addeq	r1, r1, r5
 80099da:	6021      	streq	r1, [r4, #0]
 80099dc:	e7ed      	b.n	80099ba <_free_r+0x22>
 80099de:	461a      	mov	r2, r3
 80099e0:	685b      	ldr	r3, [r3, #4]
 80099e2:	b10b      	cbz	r3, 80099e8 <_free_r+0x50>
 80099e4:	42a3      	cmp	r3, r4
 80099e6:	d9fa      	bls.n	80099de <_free_r+0x46>
 80099e8:	6811      	ldr	r1, [r2, #0]
 80099ea:	1855      	adds	r5, r2, r1
 80099ec:	42a5      	cmp	r5, r4
 80099ee:	d10b      	bne.n	8009a08 <_free_r+0x70>
 80099f0:	6824      	ldr	r4, [r4, #0]
 80099f2:	4421      	add	r1, r4
 80099f4:	1854      	adds	r4, r2, r1
 80099f6:	42a3      	cmp	r3, r4
 80099f8:	6011      	str	r1, [r2, #0]
 80099fa:	d1e0      	bne.n	80099be <_free_r+0x26>
 80099fc:	681c      	ldr	r4, [r3, #0]
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	6053      	str	r3, [r2, #4]
 8009a02:	4421      	add	r1, r4
 8009a04:	6011      	str	r1, [r2, #0]
 8009a06:	e7da      	b.n	80099be <_free_r+0x26>
 8009a08:	d902      	bls.n	8009a10 <_free_r+0x78>
 8009a0a:	230c      	movs	r3, #12
 8009a0c:	6003      	str	r3, [r0, #0]
 8009a0e:	e7d6      	b.n	80099be <_free_r+0x26>
 8009a10:	6825      	ldr	r5, [r4, #0]
 8009a12:	1961      	adds	r1, r4, r5
 8009a14:	428b      	cmp	r3, r1
 8009a16:	bf04      	itt	eq
 8009a18:	6819      	ldreq	r1, [r3, #0]
 8009a1a:	685b      	ldreq	r3, [r3, #4]
 8009a1c:	6063      	str	r3, [r4, #4]
 8009a1e:	bf04      	itt	eq
 8009a20:	1949      	addeq	r1, r1, r5
 8009a22:	6021      	streq	r1, [r4, #0]
 8009a24:	6054      	str	r4, [r2, #4]
 8009a26:	e7ca      	b.n	80099be <_free_r+0x26>
 8009a28:	b003      	add	sp, #12
 8009a2a:	bd30      	pop	{r4, r5, pc}
 8009a2c:	200004f0 	.word	0x200004f0

08009a30 <sbrk_aligned>:
 8009a30:	b570      	push	{r4, r5, r6, lr}
 8009a32:	4e0e      	ldr	r6, [pc, #56]	; (8009a6c <sbrk_aligned+0x3c>)
 8009a34:	460c      	mov	r4, r1
 8009a36:	6831      	ldr	r1, [r6, #0]
 8009a38:	4605      	mov	r5, r0
 8009a3a:	b911      	cbnz	r1, 8009a42 <sbrk_aligned+0x12>
 8009a3c:	f000 fb4c 	bl	800a0d8 <_sbrk_r>
 8009a40:	6030      	str	r0, [r6, #0]
 8009a42:	4621      	mov	r1, r4
 8009a44:	4628      	mov	r0, r5
 8009a46:	f000 fb47 	bl	800a0d8 <_sbrk_r>
 8009a4a:	1c43      	adds	r3, r0, #1
 8009a4c:	d00a      	beq.n	8009a64 <sbrk_aligned+0x34>
 8009a4e:	1cc4      	adds	r4, r0, #3
 8009a50:	f024 0403 	bic.w	r4, r4, #3
 8009a54:	42a0      	cmp	r0, r4
 8009a56:	d007      	beq.n	8009a68 <sbrk_aligned+0x38>
 8009a58:	1a21      	subs	r1, r4, r0
 8009a5a:	4628      	mov	r0, r5
 8009a5c:	f000 fb3c 	bl	800a0d8 <_sbrk_r>
 8009a60:	3001      	adds	r0, #1
 8009a62:	d101      	bne.n	8009a68 <sbrk_aligned+0x38>
 8009a64:	f04f 34ff 	mov.w	r4, #4294967295
 8009a68:	4620      	mov	r0, r4
 8009a6a:	bd70      	pop	{r4, r5, r6, pc}
 8009a6c:	200004f4 	.word	0x200004f4

08009a70 <_malloc_r>:
 8009a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a74:	1ccd      	adds	r5, r1, #3
 8009a76:	f025 0503 	bic.w	r5, r5, #3
 8009a7a:	3508      	adds	r5, #8
 8009a7c:	2d0c      	cmp	r5, #12
 8009a7e:	bf38      	it	cc
 8009a80:	250c      	movcc	r5, #12
 8009a82:	2d00      	cmp	r5, #0
 8009a84:	4607      	mov	r7, r0
 8009a86:	db01      	blt.n	8009a8c <_malloc_r+0x1c>
 8009a88:	42a9      	cmp	r1, r5
 8009a8a:	d905      	bls.n	8009a98 <_malloc_r+0x28>
 8009a8c:	230c      	movs	r3, #12
 8009a8e:	603b      	str	r3, [r7, #0]
 8009a90:	2600      	movs	r6, #0
 8009a92:	4630      	mov	r0, r6
 8009a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a98:	4e2e      	ldr	r6, [pc, #184]	; (8009b54 <_malloc_r+0xe4>)
 8009a9a:	f000 fe51 	bl	800a740 <__malloc_lock>
 8009a9e:	6833      	ldr	r3, [r6, #0]
 8009aa0:	461c      	mov	r4, r3
 8009aa2:	bb34      	cbnz	r4, 8009af2 <_malloc_r+0x82>
 8009aa4:	4629      	mov	r1, r5
 8009aa6:	4638      	mov	r0, r7
 8009aa8:	f7ff ffc2 	bl	8009a30 <sbrk_aligned>
 8009aac:	1c43      	adds	r3, r0, #1
 8009aae:	4604      	mov	r4, r0
 8009ab0:	d14d      	bne.n	8009b4e <_malloc_r+0xde>
 8009ab2:	6834      	ldr	r4, [r6, #0]
 8009ab4:	4626      	mov	r6, r4
 8009ab6:	2e00      	cmp	r6, #0
 8009ab8:	d140      	bne.n	8009b3c <_malloc_r+0xcc>
 8009aba:	6823      	ldr	r3, [r4, #0]
 8009abc:	4631      	mov	r1, r6
 8009abe:	4638      	mov	r0, r7
 8009ac0:	eb04 0803 	add.w	r8, r4, r3
 8009ac4:	f000 fb08 	bl	800a0d8 <_sbrk_r>
 8009ac8:	4580      	cmp	r8, r0
 8009aca:	d13a      	bne.n	8009b42 <_malloc_r+0xd2>
 8009acc:	6821      	ldr	r1, [r4, #0]
 8009ace:	3503      	adds	r5, #3
 8009ad0:	1a6d      	subs	r5, r5, r1
 8009ad2:	f025 0503 	bic.w	r5, r5, #3
 8009ad6:	3508      	adds	r5, #8
 8009ad8:	2d0c      	cmp	r5, #12
 8009ada:	bf38      	it	cc
 8009adc:	250c      	movcc	r5, #12
 8009ade:	4629      	mov	r1, r5
 8009ae0:	4638      	mov	r0, r7
 8009ae2:	f7ff ffa5 	bl	8009a30 <sbrk_aligned>
 8009ae6:	3001      	adds	r0, #1
 8009ae8:	d02b      	beq.n	8009b42 <_malloc_r+0xd2>
 8009aea:	6823      	ldr	r3, [r4, #0]
 8009aec:	442b      	add	r3, r5
 8009aee:	6023      	str	r3, [r4, #0]
 8009af0:	e00e      	b.n	8009b10 <_malloc_r+0xa0>
 8009af2:	6822      	ldr	r2, [r4, #0]
 8009af4:	1b52      	subs	r2, r2, r5
 8009af6:	d41e      	bmi.n	8009b36 <_malloc_r+0xc6>
 8009af8:	2a0b      	cmp	r2, #11
 8009afa:	d916      	bls.n	8009b2a <_malloc_r+0xba>
 8009afc:	1961      	adds	r1, r4, r5
 8009afe:	42a3      	cmp	r3, r4
 8009b00:	6025      	str	r5, [r4, #0]
 8009b02:	bf18      	it	ne
 8009b04:	6059      	strne	r1, [r3, #4]
 8009b06:	6863      	ldr	r3, [r4, #4]
 8009b08:	bf08      	it	eq
 8009b0a:	6031      	streq	r1, [r6, #0]
 8009b0c:	5162      	str	r2, [r4, r5]
 8009b0e:	604b      	str	r3, [r1, #4]
 8009b10:	4638      	mov	r0, r7
 8009b12:	f104 060b 	add.w	r6, r4, #11
 8009b16:	f000 fe19 	bl	800a74c <__malloc_unlock>
 8009b1a:	f026 0607 	bic.w	r6, r6, #7
 8009b1e:	1d23      	adds	r3, r4, #4
 8009b20:	1af2      	subs	r2, r6, r3
 8009b22:	d0b6      	beq.n	8009a92 <_malloc_r+0x22>
 8009b24:	1b9b      	subs	r3, r3, r6
 8009b26:	50a3      	str	r3, [r4, r2]
 8009b28:	e7b3      	b.n	8009a92 <_malloc_r+0x22>
 8009b2a:	6862      	ldr	r2, [r4, #4]
 8009b2c:	42a3      	cmp	r3, r4
 8009b2e:	bf0c      	ite	eq
 8009b30:	6032      	streq	r2, [r6, #0]
 8009b32:	605a      	strne	r2, [r3, #4]
 8009b34:	e7ec      	b.n	8009b10 <_malloc_r+0xa0>
 8009b36:	4623      	mov	r3, r4
 8009b38:	6864      	ldr	r4, [r4, #4]
 8009b3a:	e7b2      	b.n	8009aa2 <_malloc_r+0x32>
 8009b3c:	4634      	mov	r4, r6
 8009b3e:	6876      	ldr	r6, [r6, #4]
 8009b40:	e7b9      	b.n	8009ab6 <_malloc_r+0x46>
 8009b42:	230c      	movs	r3, #12
 8009b44:	603b      	str	r3, [r7, #0]
 8009b46:	4638      	mov	r0, r7
 8009b48:	f000 fe00 	bl	800a74c <__malloc_unlock>
 8009b4c:	e7a1      	b.n	8009a92 <_malloc_r+0x22>
 8009b4e:	6025      	str	r5, [r4, #0]
 8009b50:	e7de      	b.n	8009b10 <_malloc_r+0xa0>
 8009b52:	bf00      	nop
 8009b54:	200004f0 	.word	0x200004f0

08009b58 <__ssputs_r>:
 8009b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b5c:	688e      	ldr	r6, [r1, #8]
 8009b5e:	429e      	cmp	r6, r3
 8009b60:	4682      	mov	sl, r0
 8009b62:	460c      	mov	r4, r1
 8009b64:	4690      	mov	r8, r2
 8009b66:	461f      	mov	r7, r3
 8009b68:	d838      	bhi.n	8009bdc <__ssputs_r+0x84>
 8009b6a:	898a      	ldrh	r2, [r1, #12]
 8009b6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009b70:	d032      	beq.n	8009bd8 <__ssputs_r+0x80>
 8009b72:	6825      	ldr	r5, [r4, #0]
 8009b74:	6909      	ldr	r1, [r1, #16]
 8009b76:	eba5 0901 	sub.w	r9, r5, r1
 8009b7a:	6965      	ldr	r5, [r4, #20]
 8009b7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b84:	3301      	adds	r3, #1
 8009b86:	444b      	add	r3, r9
 8009b88:	106d      	asrs	r5, r5, #1
 8009b8a:	429d      	cmp	r5, r3
 8009b8c:	bf38      	it	cc
 8009b8e:	461d      	movcc	r5, r3
 8009b90:	0553      	lsls	r3, r2, #21
 8009b92:	d531      	bpl.n	8009bf8 <__ssputs_r+0xa0>
 8009b94:	4629      	mov	r1, r5
 8009b96:	f7ff ff6b 	bl	8009a70 <_malloc_r>
 8009b9a:	4606      	mov	r6, r0
 8009b9c:	b950      	cbnz	r0, 8009bb4 <__ssputs_r+0x5c>
 8009b9e:	230c      	movs	r3, #12
 8009ba0:	f8ca 3000 	str.w	r3, [sl]
 8009ba4:	89a3      	ldrh	r3, [r4, #12]
 8009ba6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009baa:	81a3      	strh	r3, [r4, #12]
 8009bac:	f04f 30ff 	mov.w	r0, #4294967295
 8009bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bb4:	6921      	ldr	r1, [r4, #16]
 8009bb6:	464a      	mov	r2, r9
 8009bb8:	f7ff fa08 	bl	8008fcc <memcpy>
 8009bbc:	89a3      	ldrh	r3, [r4, #12]
 8009bbe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bc6:	81a3      	strh	r3, [r4, #12]
 8009bc8:	6126      	str	r6, [r4, #16]
 8009bca:	6165      	str	r5, [r4, #20]
 8009bcc:	444e      	add	r6, r9
 8009bce:	eba5 0509 	sub.w	r5, r5, r9
 8009bd2:	6026      	str	r6, [r4, #0]
 8009bd4:	60a5      	str	r5, [r4, #8]
 8009bd6:	463e      	mov	r6, r7
 8009bd8:	42be      	cmp	r6, r7
 8009bda:	d900      	bls.n	8009bde <__ssputs_r+0x86>
 8009bdc:	463e      	mov	r6, r7
 8009bde:	6820      	ldr	r0, [r4, #0]
 8009be0:	4632      	mov	r2, r6
 8009be2:	4641      	mov	r1, r8
 8009be4:	f000 fd92 	bl	800a70c <memmove>
 8009be8:	68a3      	ldr	r3, [r4, #8]
 8009bea:	1b9b      	subs	r3, r3, r6
 8009bec:	60a3      	str	r3, [r4, #8]
 8009bee:	6823      	ldr	r3, [r4, #0]
 8009bf0:	4433      	add	r3, r6
 8009bf2:	6023      	str	r3, [r4, #0]
 8009bf4:	2000      	movs	r0, #0
 8009bf6:	e7db      	b.n	8009bb0 <__ssputs_r+0x58>
 8009bf8:	462a      	mov	r2, r5
 8009bfa:	f000 fdad 	bl	800a758 <_realloc_r>
 8009bfe:	4606      	mov	r6, r0
 8009c00:	2800      	cmp	r0, #0
 8009c02:	d1e1      	bne.n	8009bc8 <__ssputs_r+0x70>
 8009c04:	6921      	ldr	r1, [r4, #16]
 8009c06:	4650      	mov	r0, sl
 8009c08:	f7ff fec6 	bl	8009998 <_free_r>
 8009c0c:	e7c7      	b.n	8009b9e <__ssputs_r+0x46>
	...

08009c10 <_svfiprintf_r>:
 8009c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c14:	4698      	mov	r8, r3
 8009c16:	898b      	ldrh	r3, [r1, #12]
 8009c18:	061b      	lsls	r3, r3, #24
 8009c1a:	b09d      	sub	sp, #116	; 0x74
 8009c1c:	4607      	mov	r7, r0
 8009c1e:	460d      	mov	r5, r1
 8009c20:	4614      	mov	r4, r2
 8009c22:	d50e      	bpl.n	8009c42 <_svfiprintf_r+0x32>
 8009c24:	690b      	ldr	r3, [r1, #16]
 8009c26:	b963      	cbnz	r3, 8009c42 <_svfiprintf_r+0x32>
 8009c28:	2140      	movs	r1, #64	; 0x40
 8009c2a:	f7ff ff21 	bl	8009a70 <_malloc_r>
 8009c2e:	6028      	str	r0, [r5, #0]
 8009c30:	6128      	str	r0, [r5, #16]
 8009c32:	b920      	cbnz	r0, 8009c3e <_svfiprintf_r+0x2e>
 8009c34:	230c      	movs	r3, #12
 8009c36:	603b      	str	r3, [r7, #0]
 8009c38:	f04f 30ff 	mov.w	r0, #4294967295
 8009c3c:	e0d1      	b.n	8009de2 <_svfiprintf_r+0x1d2>
 8009c3e:	2340      	movs	r3, #64	; 0x40
 8009c40:	616b      	str	r3, [r5, #20]
 8009c42:	2300      	movs	r3, #0
 8009c44:	9309      	str	r3, [sp, #36]	; 0x24
 8009c46:	2320      	movs	r3, #32
 8009c48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c50:	2330      	movs	r3, #48	; 0x30
 8009c52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009dfc <_svfiprintf_r+0x1ec>
 8009c56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c5a:	f04f 0901 	mov.w	r9, #1
 8009c5e:	4623      	mov	r3, r4
 8009c60:	469a      	mov	sl, r3
 8009c62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c66:	b10a      	cbz	r2, 8009c6c <_svfiprintf_r+0x5c>
 8009c68:	2a25      	cmp	r2, #37	; 0x25
 8009c6a:	d1f9      	bne.n	8009c60 <_svfiprintf_r+0x50>
 8009c6c:	ebba 0b04 	subs.w	fp, sl, r4
 8009c70:	d00b      	beq.n	8009c8a <_svfiprintf_r+0x7a>
 8009c72:	465b      	mov	r3, fp
 8009c74:	4622      	mov	r2, r4
 8009c76:	4629      	mov	r1, r5
 8009c78:	4638      	mov	r0, r7
 8009c7a:	f7ff ff6d 	bl	8009b58 <__ssputs_r>
 8009c7e:	3001      	adds	r0, #1
 8009c80:	f000 80aa 	beq.w	8009dd8 <_svfiprintf_r+0x1c8>
 8009c84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c86:	445a      	add	r2, fp
 8009c88:	9209      	str	r2, [sp, #36]	; 0x24
 8009c8a:	f89a 3000 	ldrb.w	r3, [sl]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	f000 80a2 	beq.w	8009dd8 <_svfiprintf_r+0x1c8>
 8009c94:	2300      	movs	r3, #0
 8009c96:	f04f 32ff 	mov.w	r2, #4294967295
 8009c9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c9e:	f10a 0a01 	add.w	sl, sl, #1
 8009ca2:	9304      	str	r3, [sp, #16]
 8009ca4:	9307      	str	r3, [sp, #28]
 8009ca6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009caa:	931a      	str	r3, [sp, #104]	; 0x68
 8009cac:	4654      	mov	r4, sl
 8009cae:	2205      	movs	r2, #5
 8009cb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cb4:	4851      	ldr	r0, [pc, #324]	; (8009dfc <_svfiprintf_r+0x1ec>)
 8009cb6:	f7f6 fac3 	bl	8000240 <memchr>
 8009cba:	9a04      	ldr	r2, [sp, #16]
 8009cbc:	b9d8      	cbnz	r0, 8009cf6 <_svfiprintf_r+0xe6>
 8009cbe:	06d0      	lsls	r0, r2, #27
 8009cc0:	bf44      	itt	mi
 8009cc2:	2320      	movmi	r3, #32
 8009cc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cc8:	0711      	lsls	r1, r2, #28
 8009cca:	bf44      	itt	mi
 8009ccc:	232b      	movmi	r3, #43	; 0x2b
 8009cce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cd2:	f89a 3000 	ldrb.w	r3, [sl]
 8009cd6:	2b2a      	cmp	r3, #42	; 0x2a
 8009cd8:	d015      	beq.n	8009d06 <_svfiprintf_r+0xf6>
 8009cda:	9a07      	ldr	r2, [sp, #28]
 8009cdc:	4654      	mov	r4, sl
 8009cde:	2000      	movs	r0, #0
 8009ce0:	f04f 0c0a 	mov.w	ip, #10
 8009ce4:	4621      	mov	r1, r4
 8009ce6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cea:	3b30      	subs	r3, #48	; 0x30
 8009cec:	2b09      	cmp	r3, #9
 8009cee:	d94e      	bls.n	8009d8e <_svfiprintf_r+0x17e>
 8009cf0:	b1b0      	cbz	r0, 8009d20 <_svfiprintf_r+0x110>
 8009cf2:	9207      	str	r2, [sp, #28]
 8009cf4:	e014      	b.n	8009d20 <_svfiprintf_r+0x110>
 8009cf6:	eba0 0308 	sub.w	r3, r0, r8
 8009cfa:	fa09 f303 	lsl.w	r3, r9, r3
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	9304      	str	r3, [sp, #16]
 8009d02:	46a2      	mov	sl, r4
 8009d04:	e7d2      	b.n	8009cac <_svfiprintf_r+0x9c>
 8009d06:	9b03      	ldr	r3, [sp, #12]
 8009d08:	1d19      	adds	r1, r3, #4
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	9103      	str	r1, [sp, #12]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	bfbb      	ittet	lt
 8009d12:	425b      	neglt	r3, r3
 8009d14:	f042 0202 	orrlt.w	r2, r2, #2
 8009d18:	9307      	strge	r3, [sp, #28]
 8009d1a:	9307      	strlt	r3, [sp, #28]
 8009d1c:	bfb8      	it	lt
 8009d1e:	9204      	strlt	r2, [sp, #16]
 8009d20:	7823      	ldrb	r3, [r4, #0]
 8009d22:	2b2e      	cmp	r3, #46	; 0x2e
 8009d24:	d10c      	bne.n	8009d40 <_svfiprintf_r+0x130>
 8009d26:	7863      	ldrb	r3, [r4, #1]
 8009d28:	2b2a      	cmp	r3, #42	; 0x2a
 8009d2a:	d135      	bne.n	8009d98 <_svfiprintf_r+0x188>
 8009d2c:	9b03      	ldr	r3, [sp, #12]
 8009d2e:	1d1a      	adds	r2, r3, #4
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	9203      	str	r2, [sp, #12]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	bfb8      	it	lt
 8009d38:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d3c:	3402      	adds	r4, #2
 8009d3e:	9305      	str	r3, [sp, #20]
 8009d40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009e0c <_svfiprintf_r+0x1fc>
 8009d44:	7821      	ldrb	r1, [r4, #0]
 8009d46:	2203      	movs	r2, #3
 8009d48:	4650      	mov	r0, sl
 8009d4a:	f7f6 fa79 	bl	8000240 <memchr>
 8009d4e:	b140      	cbz	r0, 8009d62 <_svfiprintf_r+0x152>
 8009d50:	2340      	movs	r3, #64	; 0x40
 8009d52:	eba0 000a 	sub.w	r0, r0, sl
 8009d56:	fa03 f000 	lsl.w	r0, r3, r0
 8009d5a:	9b04      	ldr	r3, [sp, #16]
 8009d5c:	4303      	orrs	r3, r0
 8009d5e:	3401      	adds	r4, #1
 8009d60:	9304      	str	r3, [sp, #16]
 8009d62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d66:	4826      	ldr	r0, [pc, #152]	; (8009e00 <_svfiprintf_r+0x1f0>)
 8009d68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d6c:	2206      	movs	r2, #6
 8009d6e:	f7f6 fa67 	bl	8000240 <memchr>
 8009d72:	2800      	cmp	r0, #0
 8009d74:	d038      	beq.n	8009de8 <_svfiprintf_r+0x1d8>
 8009d76:	4b23      	ldr	r3, [pc, #140]	; (8009e04 <_svfiprintf_r+0x1f4>)
 8009d78:	bb1b      	cbnz	r3, 8009dc2 <_svfiprintf_r+0x1b2>
 8009d7a:	9b03      	ldr	r3, [sp, #12]
 8009d7c:	3307      	adds	r3, #7
 8009d7e:	f023 0307 	bic.w	r3, r3, #7
 8009d82:	3308      	adds	r3, #8
 8009d84:	9303      	str	r3, [sp, #12]
 8009d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d88:	4433      	add	r3, r6
 8009d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8009d8c:	e767      	b.n	8009c5e <_svfiprintf_r+0x4e>
 8009d8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d92:	460c      	mov	r4, r1
 8009d94:	2001      	movs	r0, #1
 8009d96:	e7a5      	b.n	8009ce4 <_svfiprintf_r+0xd4>
 8009d98:	2300      	movs	r3, #0
 8009d9a:	3401      	adds	r4, #1
 8009d9c:	9305      	str	r3, [sp, #20]
 8009d9e:	4619      	mov	r1, r3
 8009da0:	f04f 0c0a 	mov.w	ip, #10
 8009da4:	4620      	mov	r0, r4
 8009da6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009daa:	3a30      	subs	r2, #48	; 0x30
 8009dac:	2a09      	cmp	r2, #9
 8009dae:	d903      	bls.n	8009db8 <_svfiprintf_r+0x1a8>
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d0c5      	beq.n	8009d40 <_svfiprintf_r+0x130>
 8009db4:	9105      	str	r1, [sp, #20]
 8009db6:	e7c3      	b.n	8009d40 <_svfiprintf_r+0x130>
 8009db8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009dbc:	4604      	mov	r4, r0
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	e7f0      	b.n	8009da4 <_svfiprintf_r+0x194>
 8009dc2:	ab03      	add	r3, sp, #12
 8009dc4:	9300      	str	r3, [sp, #0]
 8009dc6:	462a      	mov	r2, r5
 8009dc8:	4b0f      	ldr	r3, [pc, #60]	; (8009e08 <_svfiprintf_r+0x1f8>)
 8009dca:	a904      	add	r1, sp, #16
 8009dcc:	4638      	mov	r0, r7
 8009dce:	f7fc fc4f 	bl	8006670 <_printf_float>
 8009dd2:	1c42      	adds	r2, r0, #1
 8009dd4:	4606      	mov	r6, r0
 8009dd6:	d1d6      	bne.n	8009d86 <_svfiprintf_r+0x176>
 8009dd8:	89ab      	ldrh	r3, [r5, #12]
 8009dda:	065b      	lsls	r3, r3, #25
 8009ddc:	f53f af2c 	bmi.w	8009c38 <_svfiprintf_r+0x28>
 8009de0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009de2:	b01d      	add	sp, #116	; 0x74
 8009de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009de8:	ab03      	add	r3, sp, #12
 8009dea:	9300      	str	r3, [sp, #0]
 8009dec:	462a      	mov	r2, r5
 8009dee:	4b06      	ldr	r3, [pc, #24]	; (8009e08 <_svfiprintf_r+0x1f8>)
 8009df0:	a904      	add	r1, sp, #16
 8009df2:	4638      	mov	r0, r7
 8009df4:	f7fc fee0 	bl	8006bb8 <_printf_i>
 8009df8:	e7eb      	b.n	8009dd2 <_svfiprintf_r+0x1c2>
 8009dfa:	bf00      	nop
 8009dfc:	0800af8c 	.word	0x0800af8c
 8009e00:	0800af96 	.word	0x0800af96
 8009e04:	08006671 	.word	0x08006671
 8009e08:	08009b59 	.word	0x08009b59
 8009e0c:	0800af92 	.word	0x0800af92

08009e10 <__sfputc_r>:
 8009e10:	6893      	ldr	r3, [r2, #8]
 8009e12:	3b01      	subs	r3, #1
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	b410      	push	{r4}
 8009e18:	6093      	str	r3, [r2, #8]
 8009e1a:	da08      	bge.n	8009e2e <__sfputc_r+0x1e>
 8009e1c:	6994      	ldr	r4, [r2, #24]
 8009e1e:	42a3      	cmp	r3, r4
 8009e20:	db01      	blt.n	8009e26 <__sfputc_r+0x16>
 8009e22:	290a      	cmp	r1, #10
 8009e24:	d103      	bne.n	8009e2e <__sfputc_r+0x1e>
 8009e26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e2a:	f000 b979 	b.w	800a120 <__swbuf_r>
 8009e2e:	6813      	ldr	r3, [r2, #0]
 8009e30:	1c58      	adds	r0, r3, #1
 8009e32:	6010      	str	r0, [r2, #0]
 8009e34:	7019      	strb	r1, [r3, #0]
 8009e36:	4608      	mov	r0, r1
 8009e38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e3c:	4770      	bx	lr

08009e3e <__sfputs_r>:
 8009e3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e40:	4606      	mov	r6, r0
 8009e42:	460f      	mov	r7, r1
 8009e44:	4614      	mov	r4, r2
 8009e46:	18d5      	adds	r5, r2, r3
 8009e48:	42ac      	cmp	r4, r5
 8009e4a:	d101      	bne.n	8009e50 <__sfputs_r+0x12>
 8009e4c:	2000      	movs	r0, #0
 8009e4e:	e007      	b.n	8009e60 <__sfputs_r+0x22>
 8009e50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e54:	463a      	mov	r2, r7
 8009e56:	4630      	mov	r0, r6
 8009e58:	f7ff ffda 	bl	8009e10 <__sfputc_r>
 8009e5c:	1c43      	adds	r3, r0, #1
 8009e5e:	d1f3      	bne.n	8009e48 <__sfputs_r+0xa>
 8009e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009e64 <_vfiprintf_r>:
 8009e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e68:	460d      	mov	r5, r1
 8009e6a:	b09d      	sub	sp, #116	; 0x74
 8009e6c:	4614      	mov	r4, r2
 8009e6e:	4698      	mov	r8, r3
 8009e70:	4606      	mov	r6, r0
 8009e72:	b118      	cbz	r0, 8009e7c <_vfiprintf_r+0x18>
 8009e74:	6983      	ldr	r3, [r0, #24]
 8009e76:	b90b      	cbnz	r3, 8009e7c <_vfiprintf_r+0x18>
 8009e78:	f000 fb42 	bl	800a500 <__sinit>
 8009e7c:	4b89      	ldr	r3, [pc, #548]	; (800a0a4 <_vfiprintf_r+0x240>)
 8009e7e:	429d      	cmp	r5, r3
 8009e80:	d11b      	bne.n	8009eba <_vfiprintf_r+0x56>
 8009e82:	6875      	ldr	r5, [r6, #4]
 8009e84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e86:	07d9      	lsls	r1, r3, #31
 8009e88:	d405      	bmi.n	8009e96 <_vfiprintf_r+0x32>
 8009e8a:	89ab      	ldrh	r3, [r5, #12]
 8009e8c:	059a      	lsls	r2, r3, #22
 8009e8e:	d402      	bmi.n	8009e96 <_vfiprintf_r+0x32>
 8009e90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e92:	f000 fbd3 	bl	800a63c <__retarget_lock_acquire_recursive>
 8009e96:	89ab      	ldrh	r3, [r5, #12]
 8009e98:	071b      	lsls	r3, r3, #28
 8009e9a:	d501      	bpl.n	8009ea0 <_vfiprintf_r+0x3c>
 8009e9c:	692b      	ldr	r3, [r5, #16]
 8009e9e:	b9eb      	cbnz	r3, 8009edc <_vfiprintf_r+0x78>
 8009ea0:	4629      	mov	r1, r5
 8009ea2:	4630      	mov	r0, r6
 8009ea4:	f000 f99c 	bl	800a1e0 <__swsetup_r>
 8009ea8:	b1c0      	cbz	r0, 8009edc <_vfiprintf_r+0x78>
 8009eaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009eac:	07dc      	lsls	r4, r3, #31
 8009eae:	d50e      	bpl.n	8009ece <_vfiprintf_r+0x6a>
 8009eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8009eb4:	b01d      	add	sp, #116	; 0x74
 8009eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eba:	4b7b      	ldr	r3, [pc, #492]	; (800a0a8 <_vfiprintf_r+0x244>)
 8009ebc:	429d      	cmp	r5, r3
 8009ebe:	d101      	bne.n	8009ec4 <_vfiprintf_r+0x60>
 8009ec0:	68b5      	ldr	r5, [r6, #8]
 8009ec2:	e7df      	b.n	8009e84 <_vfiprintf_r+0x20>
 8009ec4:	4b79      	ldr	r3, [pc, #484]	; (800a0ac <_vfiprintf_r+0x248>)
 8009ec6:	429d      	cmp	r5, r3
 8009ec8:	bf08      	it	eq
 8009eca:	68f5      	ldreq	r5, [r6, #12]
 8009ecc:	e7da      	b.n	8009e84 <_vfiprintf_r+0x20>
 8009ece:	89ab      	ldrh	r3, [r5, #12]
 8009ed0:	0598      	lsls	r0, r3, #22
 8009ed2:	d4ed      	bmi.n	8009eb0 <_vfiprintf_r+0x4c>
 8009ed4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ed6:	f000 fbb2 	bl	800a63e <__retarget_lock_release_recursive>
 8009eda:	e7e9      	b.n	8009eb0 <_vfiprintf_r+0x4c>
 8009edc:	2300      	movs	r3, #0
 8009ede:	9309      	str	r3, [sp, #36]	; 0x24
 8009ee0:	2320      	movs	r3, #32
 8009ee2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ee6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009eea:	2330      	movs	r3, #48	; 0x30
 8009eec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a0b0 <_vfiprintf_r+0x24c>
 8009ef0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ef4:	f04f 0901 	mov.w	r9, #1
 8009ef8:	4623      	mov	r3, r4
 8009efa:	469a      	mov	sl, r3
 8009efc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f00:	b10a      	cbz	r2, 8009f06 <_vfiprintf_r+0xa2>
 8009f02:	2a25      	cmp	r2, #37	; 0x25
 8009f04:	d1f9      	bne.n	8009efa <_vfiprintf_r+0x96>
 8009f06:	ebba 0b04 	subs.w	fp, sl, r4
 8009f0a:	d00b      	beq.n	8009f24 <_vfiprintf_r+0xc0>
 8009f0c:	465b      	mov	r3, fp
 8009f0e:	4622      	mov	r2, r4
 8009f10:	4629      	mov	r1, r5
 8009f12:	4630      	mov	r0, r6
 8009f14:	f7ff ff93 	bl	8009e3e <__sfputs_r>
 8009f18:	3001      	adds	r0, #1
 8009f1a:	f000 80aa 	beq.w	800a072 <_vfiprintf_r+0x20e>
 8009f1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f20:	445a      	add	r2, fp
 8009f22:	9209      	str	r2, [sp, #36]	; 0x24
 8009f24:	f89a 3000 	ldrb.w	r3, [sl]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	f000 80a2 	beq.w	800a072 <_vfiprintf_r+0x20e>
 8009f2e:	2300      	movs	r3, #0
 8009f30:	f04f 32ff 	mov.w	r2, #4294967295
 8009f34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f38:	f10a 0a01 	add.w	sl, sl, #1
 8009f3c:	9304      	str	r3, [sp, #16]
 8009f3e:	9307      	str	r3, [sp, #28]
 8009f40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f44:	931a      	str	r3, [sp, #104]	; 0x68
 8009f46:	4654      	mov	r4, sl
 8009f48:	2205      	movs	r2, #5
 8009f4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f4e:	4858      	ldr	r0, [pc, #352]	; (800a0b0 <_vfiprintf_r+0x24c>)
 8009f50:	f7f6 f976 	bl	8000240 <memchr>
 8009f54:	9a04      	ldr	r2, [sp, #16]
 8009f56:	b9d8      	cbnz	r0, 8009f90 <_vfiprintf_r+0x12c>
 8009f58:	06d1      	lsls	r1, r2, #27
 8009f5a:	bf44      	itt	mi
 8009f5c:	2320      	movmi	r3, #32
 8009f5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f62:	0713      	lsls	r3, r2, #28
 8009f64:	bf44      	itt	mi
 8009f66:	232b      	movmi	r3, #43	; 0x2b
 8009f68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f6c:	f89a 3000 	ldrb.w	r3, [sl]
 8009f70:	2b2a      	cmp	r3, #42	; 0x2a
 8009f72:	d015      	beq.n	8009fa0 <_vfiprintf_r+0x13c>
 8009f74:	9a07      	ldr	r2, [sp, #28]
 8009f76:	4654      	mov	r4, sl
 8009f78:	2000      	movs	r0, #0
 8009f7a:	f04f 0c0a 	mov.w	ip, #10
 8009f7e:	4621      	mov	r1, r4
 8009f80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f84:	3b30      	subs	r3, #48	; 0x30
 8009f86:	2b09      	cmp	r3, #9
 8009f88:	d94e      	bls.n	800a028 <_vfiprintf_r+0x1c4>
 8009f8a:	b1b0      	cbz	r0, 8009fba <_vfiprintf_r+0x156>
 8009f8c:	9207      	str	r2, [sp, #28]
 8009f8e:	e014      	b.n	8009fba <_vfiprintf_r+0x156>
 8009f90:	eba0 0308 	sub.w	r3, r0, r8
 8009f94:	fa09 f303 	lsl.w	r3, r9, r3
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	9304      	str	r3, [sp, #16]
 8009f9c:	46a2      	mov	sl, r4
 8009f9e:	e7d2      	b.n	8009f46 <_vfiprintf_r+0xe2>
 8009fa0:	9b03      	ldr	r3, [sp, #12]
 8009fa2:	1d19      	adds	r1, r3, #4
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	9103      	str	r1, [sp, #12]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	bfbb      	ittet	lt
 8009fac:	425b      	neglt	r3, r3
 8009fae:	f042 0202 	orrlt.w	r2, r2, #2
 8009fb2:	9307      	strge	r3, [sp, #28]
 8009fb4:	9307      	strlt	r3, [sp, #28]
 8009fb6:	bfb8      	it	lt
 8009fb8:	9204      	strlt	r2, [sp, #16]
 8009fba:	7823      	ldrb	r3, [r4, #0]
 8009fbc:	2b2e      	cmp	r3, #46	; 0x2e
 8009fbe:	d10c      	bne.n	8009fda <_vfiprintf_r+0x176>
 8009fc0:	7863      	ldrb	r3, [r4, #1]
 8009fc2:	2b2a      	cmp	r3, #42	; 0x2a
 8009fc4:	d135      	bne.n	800a032 <_vfiprintf_r+0x1ce>
 8009fc6:	9b03      	ldr	r3, [sp, #12]
 8009fc8:	1d1a      	adds	r2, r3, #4
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	9203      	str	r2, [sp, #12]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	bfb8      	it	lt
 8009fd2:	f04f 33ff 	movlt.w	r3, #4294967295
 8009fd6:	3402      	adds	r4, #2
 8009fd8:	9305      	str	r3, [sp, #20]
 8009fda:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a0c0 <_vfiprintf_r+0x25c>
 8009fde:	7821      	ldrb	r1, [r4, #0]
 8009fe0:	2203      	movs	r2, #3
 8009fe2:	4650      	mov	r0, sl
 8009fe4:	f7f6 f92c 	bl	8000240 <memchr>
 8009fe8:	b140      	cbz	r0, 8009ffc <_vfiprintf_r+0x198>
 8009fea:	2340      	movs	r3, #64	; 0x40
 8009fec:	eba0 000a 	sub.w	r0, r0, sl
 8009ff0:	fa03 f000 	lsl.w	r0, r3, r0
 8009ff4:	9b04      	ldr	r3, [sp, #16]
 8009ff6:	4303      	orrs	r3, r0
 8009ff8:	3401      	adds	r4, #1
 8009ffa:	9304      	str	r3, [sp, #16]
 8009ffc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a000:	482c      	ldr	r0, [pc, #176]	; (800a0b4 <_vfiprintf_r+0x250>)
 800a002:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a006:	2206      	movs	r2, #6
 800a008:	f7f6 f91a 	bl	8000240 <memchr>
 800a00c:	2800      	cmp	r0, #0
 800a00e:	d03f      	beq.n	800a090 <_vfiprintf_r+0x22c>
 800a010:	4b29      	ldr	r3, [pc, #164]	; (800a0b8 <_vfiprintf_r+0x254>)
 800a012:	bb1b      	cbnz	r3, 800a05c <_vfiprintf_r+0x1f8>
 800a014:	9b03      	ldr	r3, [sp, #12]
 800a016:	3307      	adds	r3, #7
 800a018:	f023 0307 	bic.w	r3, r3, #7
 800a01c:	3308      	adds	r3, #8
 800a01e:	9303      	str	r3, [sp, #12]
 800a020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a022:	443b      	add	r3, r7
 800a024:	9309      	str	r3, [sp, #36]	; 0x24
 800a026:	e767      	b.n	8009ef8 <_vfiprintf_r+0x94>
 800a028:	fb0c 3202 	mla	r2, ip, r2, r3
 800a02c:	460c      	mov	r4, r1
 800a02e:	2001      	movs	r0, #1
 800a030:	e7a5      	b.n	8009f7e <_vfiprintf_r+0x11a>
 800a032:	2300      	movs	r3, #0
 800a034:	3401      	adds	r4, #1
 800a036:	9305      	str	r3, [sp, #20]
 800a038:	4619      	mov	r1, r3
 800a03a:	f04f 0c0a 	mov.w	ip, #10
 800a03e:	4620      	mov	r0, r4
 800a040:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a044:	3a30      	subs	r2, #48	; 0x30
 800a046:	2a09      	cmp	r2, #9
 800a048:	d903      	bls.n	800a052 <_vfiprintf_r+0x1ee>
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d0c5      	beq.n	8009fda <_vfiprintf_r+0x176>
 800a04e:	9105      	str	r1, [sp, #20]
 800a050:	e7c3      	b.n	8009fda <_vfiprintf_r+0x176>
 800a052:	fb0c 2101 	mla	r1, ip, r1, r2
 800a056:	4604      	mov	r4, r0
 800a058:	2301      	movs	r3, #1
 800a05a:	e7f0      	b.n	800a03e <_vfiprintf_r+0x1da>
 800a05c:	ab03      	add	r3, sp, #12
 800a05e:	9300      	str	r3, [sp, #0]
 800a060:	462a      	mov	r2, r5
 800a062:	4b16      	ldr	r3, [pc, #88]	; (800a0bc <_vfiprintf_r+0x258>)
 800a064:	a904      	add	r1, sp, #16
 800a066:	4630      	mov	r0, r6
 800a068:	f7fc fb02 	bl	8006670 <_printf_float>
 800a06c:	4607      	mov	r7, r0
 800a06e:	1c78      	adds	r0, r7, #1
 800a070:	d1d6      	bne.n	800a020 <_vfiprintf_r+0x1bc>
 800a072:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a074:	07d9      	lsls	r1, r3, #31
 800a076:	d405      	bmi.n	800a084 <_vfiprintf_r+0x220>
 800a078:	89ab      	ldrh	r3, [r5, #12]
 800a07a:	059a      	lsls	r2, r3, #22
 800a07c:	d402      	bmi.n	800a084 <_vfiprintf_r+0x220>
 800a07e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a080:	f000 fadd 	bl	800a63e <__retarget_lock_release_recursive>
 800a084:	89ab      	ldrh	r3, [r5, #12]
 800a086:	065b      	lsls	r3, r3, #25
 800a088:	f53f af12 	bmi.w	8009eb0 <_vfiprintf_r+0x4c>
 800a08c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a08e:	e711      	b.n	8009eb4 <_vfiprintf_r+0x50>
 800a090:	ab03      	add	r3, sp, #12
 800a092:	9300      	str	r3, [sp, #0]
 800a094:	462a      	mov	r2, r5
 800a096:	4b09      	ldr	r3, [pc, #36]	; (800a0bc <_vfiprintf_r+0x258>)
 800a098:	a904      	add	r1, sp, #16
 800a09a:	4630      	mov	r0, r6
 800a09c:	f7fc fd8c 	bl	8006bb8 <_printf_i>
 800a0a0:	e7e4      	b.n	800a06c <_vfiprintf_r+0x208>
 800a0a2:	bf00      	nop
 800a0a4:	0800b0c0 	.word	0x0800b0c0
 800a0a8:	0800b0e0 	.word	0x0800b0e0
 800a0ac:	0800b0a0 	.word	0x0800b0a0
 800a0b0:	0800af8c 	.word	0x0800af8c
 800a0b4:	0800af96 	.word	0x0800af96
 800a0b8:	08006671 	.word	0x08006671
 800a0bc:	08009e3f 	.word	0x08009e3f
 800a0c0:	0800af92 	.word	0x0800af92
 800a0c4:	00000000 	.word	0x00000000

0800a0c8 <nan>:
 800a0c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a0d0 <nan+0x8>
 800a0cc:	4770      	bx	lr
 800a0ce:	bf00      	nop
 800a0d0:	00000000 	.word	0x00000000
 800a0d4:	7ff80000 	.word	0x7ff80000

0800a0d8 <_sbrk_r>:
 800a0d8:	b538      	push	{r3, r4, r5, lr}
 800a0da:	4d06      	ldr	r5, [pc, #24]	; (800a0f4 <_sbrk_r+0x1c>)
 800a0dc:	2300      	movs	r3, #0
 800a0de:	4604      	mov	r4, r0
 800a0e0:	4608      	mov	r0, r1
 800a0e2:	602b      	str	r3, [r5, #0]
 800a0e4:	f7f9 f806 	bl	80030f4 <_sbrk>
 800a0e8:	1c43      	adds	r3, r0, #1
 800a0ea:	d102      	bne.n	800a0f2 <_sbrk_r+0x1a>
 800a0ec:	682b      	ldr	r3, [r5, #0]
 800a0ee:	b103      	cbz	r3, 800a0f2 <_sbrk_r+0x1a>
 800a0f0:	6023      	str	r3, [r4, #0]
 800a0f2:	bd38      	pop	{r3, r4, r5, pc}
 800a0f4:	200004fc 	.word	0x200004fc

0800a0f8 <strncmp>:
 800a0f8:	b510      	push	{r4, lr}
 800a0fa:	b17a      	cbz	r2, 800a11c <strncmp+0x24>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	3901      	subs	r1, #1
 800a100:	1884      	adds	r4, r0, r2
 800a102:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a106:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a10a:	4290      	cmp	r0, r2
 800a10c:	d101      	bne.n	800a112 <strncmp+0x1a>
 800a10e:	42a3      	cmp	r3, r4
 800a110:	d101      	bne.n	800a116 <strncmp+0x1e>
 800a112:	1a80      	subs	r0, r0, r2
 800a114:	bd10      	pop	{r4, pc}
 800a116:	2800      	cmp	r0, #0
 800a118:	d1f3      	bne.n	800a102 <strncmp+0xa>
 800a11a:	e7fa      	b.n	800a112 <strncmp+0x1a>
 800a11c:	4610      	mov	r0, r2
 800a11e:	e7f9      	b.n	800a114 <strncmp+0x1c>

0800a120 <__swbuf_r>:
 800a120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a122:	460e      	mov	r6, r1
 800a124:	4614      	mov	r4, r2
 800a126:	4605      	mov	r5, r0
 800a128:	b118      	cbz	r0, 800a132 <__swbuf_r+0x12>
 800a12a:	6983      	ldr	r3, [r0, #24]
 800a12c:	b90b      	cbnz	r3, 800a132 <__swbuf_r+0x12>
 800a12e:	f000 f9e7 	bl	800a500 <__sinit>
 800a132:	4b21      	ldr	r3, [pc, #132]	; (800a1b8 <__swbuf_r+0x98>)
 800a134:	429c      	cmp	r4, r3
 800a136:	d12b      	bne.n	800a190 <__swbuf_r+0x70>
 800a138:	686c      	ldr	r4, [r5, #4]
 800a13a:	69a3      	ldr	r3, [r4, #24]
 800a13c:	60a3      	str	r3, [r4, #8]
 800a13e:	89a3      	ldrh	r3, [r4, #12]
 800a140:	071a      	lsls	r2, r3, #28
 800a142:	d52f      	bpl.n	800a1a4 <__swbuf_r+0x84>
 800a144:	6923      	ldr	r3, [r4, #16]
 800a146:	b36b      	cbz	r3, 800a1a4 <__swbuf_r+0x84>
 800a148:	6923      	ldr	r3, [r4, #16]
 800a14a:	6820      	ldr	r0, [r4, #0]
 800a14c:	1ac0      	subs	r0, r0, r3
 800a14e:	6963      	ldr	r3, [r4, #20]
 800a150:	b2f6      	uxtb	r6, r6
 800a152:	4283      	cmp	r3, r0
 800a154:	4637      	mov	r7, r6
 800a156:	dc04      	bgt.n	800a162 <__swbuf_r+0x42>
 800a158:	4621      	mov	r1, r4
 800a15a:	4628      	mov	r0, r5
 800a15c:	f000 f93c 	bl	800a3d8 <_fflush_r>
 800a160:	bb30      	cbnz	r0, 800a1b0 <__swbuf_r+0x90>
 800a162:	68a3      	ldr	r3, [r4, #8]
 800a164:	3b01      	subs	r3, #1
 800a166:	60a3      	str	r3, [r4, #8]
 800a168:	6823      	ldr	r3, [r4, #0]
 800a16a:	1c5a      	adds	r2, r3, #1
 800a16c:	6022      	str	r2, [r4, #0]
 800a16e:	701e      	strb	r6, [r3, #0]
 800a170:	6963      	ldr	r3, [r4, #20]
 800a172:	3001      	adds	r0, #1
 800a174:	4283      	cmp	r3, r0
 800a176:	d004      	beq.n	800a182 <__swbuf_r+0x62>
 800a178:	89a3      	ldrh	r3, [r4, #12]
 800a17a:	07db      	lsls	r3, r3, #31
 800a17c:	d506      	bpl.n	800a18c <__swbuf_r+0x6c>
 800a17e:	2e0a      	cmp	r6, #10
 800a180:	d104      	bne.n	800a18c <__swbuf_r+0x6c>
 800a182:	4621      	mov	r1, r4
 800a184:	4628      	mov	r0, r5
 800a186:	f000 f927 	bl	800a3d8 <_fflush_r>
 800a18a:	b988      	cbnz	r0, 800a1b0 <__swbuf_r+0x90>
 800a18c:	4638      	mov	r0, r7
 800a18e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a190:	4b0a      	ldr	r3, [pc, #40]	; (800a1bc <__swbuf_r+0x9c>)
 800a192:	429c      	cmp	r4, r3
 800a194:	d101      	bne.n	800a19a <__swbuf_r+0x7a>
 800a196:	68ac      	ldr	r4, [r5, #8]
 800a198:	e7cf      	b.n	800a13a <__swbuf_r+0x1a>
 800a19a:	4b09      	ldr	r3, [pc, #36]	; (800a1c0 <__swbuf_r+0xa0>)
 800a19c:	429c      	cmp	r4, r3
 800a19e:	bf08      	it	eq
 800a1a0:	68ec      	ldreq	r4, [r5, #12]
 800a1a2:	e7ca      	b.n	800a13a <__swbuf_r+0x1a>
 800a1a4:	4621      	mov	r1, r4
 800a1a6:	4628      	mov	r0, r5
 800a1a8:	f000 f81a 	bl	800a1e0 <__swsetup_r>
 800a1ac:	2800      	cmp	r0, #0
 800a1ae:	d0cb      	beq.n	800a148 <__swbuf_r+0x28>
 800a1b0:	f04f 37ff 	mov.w	r7, #4294967295
 800a1b4:	e7ea      	b.n	800a18c <__swbuf_r+0x6c>
 800a1b6:	bf00      	nop
 800a1b8:	0800b0c0 	.word	0x0800b0c0
 800a1bc:	0800b0e0 	.word	0x0800b0e0
 800a1c0:	0800b0a0 	.word	0x0800b0a0

0800a1c4 <__ascii_wctomb>:
 800a1c4:	b149      	cbz	r1, 800a1da <__ascii_wctomb+0x16>
 800a1c6:	2aff      	cmp	r2, #255	; 0xff
 800a1c8:	bf85      	ittet	hi
 800a1ca:	238a      	movhi	r3, #138	; 0x8a
 800a1cc:	6003      	strhi	r3, [r0, #0]
 800a1ce:	700a      	strbls	r2, [r1, #0]
 800a1d0:	f04f 30ff 	movhi.w	r0, #4294967295
 800a1d4:	bf98      	it	ls
 800a1d6:	2001      	movls	r0, #1
 800a1d8:	4770      	bx	lr
 800a1da:	4608      	mov	r0, r1
 800a1dc:	4770      	bx	lr
	...

0800a1e0 <__swsetup_r>:
 800a1e0:	4b32      	ldr	r3, [pc, #200]	; (800a2ac <__swsetup_r+0xcc>)
 800a1e2:	b570      	push	{r4, r5, r6, lr}
 800a1e4:	681d      	ldr	r5, [r3, #0]
 800a1e6:	4606      	mov	r6, r0
 800a1e8:	460c      	mov	r4, r1
 800a1ea:	b125      	cbz	r5, 800a1f6 <__swsetup_r+0x16>
 800a1ec:	69ab      	ldr	r3, [r5, #24]
 800a1ee:	b913      	cbnz	r3, 800a1f6 <__swsetup_r+0x16>
 800a1f0:	4628      	mov	r0, r5
 800a1f2:	f000 f985 	bl	800a500 <__sinit>
 800a1f6:	4b2e      	ldr	r3, [pc, #184]	; (800a2b0 <__swsetup_r+0xd0>)
 800a1f8:	429c      	cmp	r4, r3
 800a1fa:	d10f      	bne.n	800a21c <__swsetup_r+0x3c>
 800a1fc:	686c      	ldr	r4, [r5, #4]
 800a1fe:	89a3      	ldrh	r3, [r4, #12]
 800a200:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a204:	0719      	lsls	r1, r3, #28
 800a206:	d42c      	bmi.n	800a262 <__swsetup_r+0x82>
 800a208:	06dd      	lsls	r5, r3, #27
 800a20a:	d411      	bmi.n	800a230 <__swsetup_r+0x50>
 800a20c:	2309      	movs	r3, #9
 800a20e:	6033      	str	r3, [r6, #0]
 800a210:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a214:	81a3      	strh	r3, [r4, #12]
 800a216:	f04f 30ff 	mov.w	r0, #4294967295
 800a21a:	e03e      	b.n	800a29a <__swsetup_r+0xba>
 800a21c:	4b25      	ldr	r3, [pc, #148]	; (800a2b4 <__swsetup_r+0xd4>)
 800a21e:	429c      	cmp	r4, r3
 800a220:	d101      	bne.n	800a226 <__swsetup_r+0x46>
 800a222:	68ac      	ldr	r4, [r5, #8]
 800a224:	e7eb      	b.n	800a1fe <__swsetup_r+0x1e>
 800a226:	4b24      	ldr	r3, [pc, #144]	; (800a2b8 <__swsetup_r+0xd8>)
 800a228:	429c      	cmp	r4, r3
 800a22a:	bf08      	it	eq
 800a22c:	68ec      	ldreq	r4, [r5, #12]
 800a22e:	e7e6      	b.n	800a1fe <__swsetup_r+0x1e>
 800a230:	0758      	lsls	r0, r3, #29
 800a232:	d512      	bpl.n	800a25a <__swsetup_r+0x7a>
 800a234:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a236:	b141      	cbz	r1, 800a24a <__swsetup_r+0x6a>
 800a238:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a23c:	4299      	cmp	r1, r3
 800a23e:	d002      	beq.n	800a246 <__swsetup_r+0x66>
 800a240:	4630      	mov	r0, r6
 800a242:	f7ff fba9 	bl	8009998 <_free_r>
 800a246:	2300      	movs	r3, #0
 800a248:	6363      	str	r3, [r4, #52]	; 0x34
 800a24a:	89a3      	ldrh	r3, [r4, #12]
 800a24c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a250:	81a3      	strh	r3, [r4, #12]
 800a252:	2300      	movs	r3, #0
 800a254:	6063      	str	r3, [r4, #4]
 800a256:	6923      	ldr	r3, [r4, #16]
 800a258:	6023      	str	r3, [r4, #0]
 800a25a:	89a3      	ldrh	r3, [r4, #12]
 800a25c:	f043 0308 	orr.w	r3, r3, #8
 800a260:	81a3      	strh	r3, [r4, #12]
 800a262:	6923      	ldr	r3, [r4, #16]
 800a264:	b94b      	cbnz	r3, 800a27a <__swsetup_r+0x9a>
 800a266:	89a3      	ldrh	r3, [r4, #12]
 800a268:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a26c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a270:	d003      	beq.n	800a27a <__swsetup_r+0x9a>
 800a272:	4621      	mov	r1, r4
 800a274:	4630      	mov	r0, r6
 800a276:	f000 fa09 	bl	800a68c <__smakebuf_r>
 800a27a:	89a0      	ldrh	r0, [r4, #12]
 800a27c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a280:	f010 0301 	ands.w	r3, r0, #1
 800a284:	d00a      	beq.n	800a29c <__swsetup_r+0xbc>
 800a286:	2300      	movs	r3, #0
 800a288:	60a3      	str	r3, [r4, #8]
 800a28a:	6963      	ldr	r3, [r4, #20]
 800a28c:	425b      	negs	r3, r3
 800a28e:	61a3      	str	r3, [r4, #24]
 800a290:	6923      	ldr	r3, [r4, #16]
 800a292:	b943      	cbnz	r3, 800a2a6 <__swsetup_r+0xc6>
 800a294:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a298:	d1ba      	bne.n	800a210 <__swsetup_r+0x30>
 800a29a:	bd70      	pop	{r4, r5, r6, pc}
 800a29c:	0781      	lsls	r1, r0, #30
 800a29e:	bf58      	it	pl
 800a2a0:	6963      	ldrpl	r3, [r4, #20]
 800a2a2:	60a3      	str	r3, [r4, #8]
 800a2a4:	e7f4      	b.n	800a290 <__swsetup_r+0xb0>
 800a2a6:	2000      	movs	r0, #0
 800a2a8:	e7f7      	b.n	800a29a <__swsetup_r+0xba>
 800a2aa:	bf00      	nop
 800a2ac:	20000060 	.word	0x20000060
 800a2b0:	0800b0c0 	.word	0x0800b0c0
 800a2b4:	0800b0e0 	.word	0x0800b0e0
 800a2b8:	0800b0a0 	.word	0x0800b0a0

0800a2bc <abort>:
 800a2bc:	b508      	push	{r3, lr}
 800a2be:	2006      	movs	r0, #6
 800a2c0:	f000 faa2 	bl	800a808 <raise>
 800a2c4:	2001      	movs	r0, #1
 800a2c6:	f7f8 fe9d 	bl	8003004 <_exit>
	...

0800a2cc <__sflush_r>:
 800a2cc:	898a      	ldrh	r2, [r1, #12]
 800a2ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2d2:	4605      	mov	r5, r0
 800a2d4:	0710      	lsls	r0, r2, #28
 800a2d6:	460c      	mov	r4, r1
 800a2d8:	d458      	bmi.n	800a38c <__sflush_r+0xc0>
 800a2da:	684b      	ldr	r3, [r1, #4]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	dc05      	bgt.n	800a2ec <__sflush_r+0x20>
 800a2e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	dc02      	bgt.n	800a2ec <__sflush_r+0x20>
 800a2e6:	2000      	movs	r0, #0
 800a2e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a2ee:	2e00      	cmp	r6, #0
 800a2f0:	d0f9      	beq.n	800a2e6 <__sflush_r+0x1a>
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a2f8:	682f      	ldr	r7, [r5, #0]
 800a2fa:	602b      	str	r3, [r5, #0]
 800a2fc:	d032      	beq.n	800a364 <__sflush_r+0x98>
 800a2fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a300:	89a3      	ldrh	r3, [r4, #12]
 800a302:	075a      	lsls	r2, r3, #29
 800a304:	d505      	bpl.n	800a312 <__sflush_r+0x46>
 800a306:	6863      	ldr	r3, [r4, #4]
 800a308:	1ac0      	subs	r0, r0, r3
 800a30a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a30c:	b10b      	cbz	r3, 800a312 <__sflush_r+0x46>
 800a30e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a310:	1ac0      	subs	r0, r0, r3
 800a312:	2300      	movs	r3, #0
 800a314:	4602      	mov	r2, r0
 800a316:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a318:	6a21      	ldr	r1, [r4, #32]
 800a31a:	4628      	mov	r0, r5
 800a31c:	47b0      	blx	r6
 800a31e:	1c43      	adds	r3, r0, #1
 800a320:	89a3      	ldrh	r3, [r4, #12]
 800a322:	d106      	bne.n	800a332 <__sflush_r+0x66>
 800a324:	6829      	ldr	r1, [r5, #0]
 800a326:	291d      	cmp	r1, #29
 800a328:	d82c      	bhi.n	800a384 <__sflush_r+0xb8>
 800a32a:	4a2a      	ldr	r2, [pc, #168]	; (800a3d4 <__sflush_r+0x108>)
 800a32c:	40ca      	lsrs	r2, r1
 800a32e:	07d6      	lsls	r6, r2, #31
 800a330:	d528      	bpl.n	800a384 <__sflush_r+0xb8>
 800a332:	2200      	movs	r2, #0
 800a334:	6062      	str	r2, [r4, #4]
 800a336:	04d9      	lsls	r1, r3, #19
 800a338:	6922      	ldr	r2, [r4, #16]
 800a33a:	6022      	str	r2, [r4, #0]
 800a33c:	d504      	bpl.n	800a348 <__sflush_r+0x7c>
 800a33e:	1c42      	adds	r2, r0, #1
 800a340:	d101      	bne.n	800a346 <__sflush_r+0x7a>
 800a342:	682b      	ldr	r3, [r5, #0]
 800a344:	b903      	cbnz	r3, 800a348 <__sflush_r+0x7c>
 800a346:	6560      	str	r0, [r4, #84]	; 0x54
 800a348:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a34a:	602f      	str	r7, [r5, #0]
 800a34c:	2900      	cmp	r1, #0
 800a34e:	d0ca      	beq.n	800a2e6 <__sflush_r+0x1a>
 800a350:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a354:	4299      	cmp	r1, r3
 800a356:	d002      	beq.n	800a35e <__sflush_r+0x92>
 800a358:	4628      	mov	r0, r5
 800a35a:	f7ff fb1d 	bl	8009998 <_free_r>
 800a35e:	2000      	movs	r0, #0
 800a360:	6360      	str	r0, [r4, #52]	; 0x34
 800a362:	e7c1      	b.n	800a2e8 <__sflush_r+0x1c>
 800a364:	6a21      	ldr	r1, [r4, #32]
 800a366:	2301      	movs	r3, #1
 800a368:	4628      	mov	r0, r5
 800a36a:	47b0      	blx	r6
 800a36c:	1c41      	adds	r1, r0, #1
 800a36e:	d1c7      	bne.n	800a300 <__sflush_r+0x34>
 800a370:	682b      	ldr	r3, [r5, #0]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d0c4      	beq.n	800a300 <__sflush_r+0x34>
 800a376:	2b1d      	cmp	r3, #29
 800a378:	d001      	beq.n	800a37e <__sflush_r+0xb2>
 800a37a:	2b16      	cmp	r3, #22
 800a37c:	d101      	bne.n	800a382 <__sflush_r+0xb6>
 800a37e:	602f      	str	r7, [r5, #0]
 800a380:	e7b1      	b.n	800a2e6 <__sflush_r+0x1a>
 800a382:	89a3      	ldrh	r3, [r4, #12]
 800a384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a388:	81a3      	strh	r3, [r4, #12]
 800a38a:	e7ad      	b.n	800a2e8 <__sflush_r+0x1c>
 800a38c:	690f      	ldr	r7, [r1, #16]
 800a38e:	2f00      	cmp	r7, #0
 800a390:	d0a9      	beq.n	800a2e6 <__sflush_r+0x1a>
 800a392:	0793      	lsls	r3, r2, #30
 800a394:	680e      	ldr	r6, [r1, #0]
 800a396:	bf08      	it	eq
 800a398:	694b      	ldreq	r3, [r1, #20]
 800a39a:	600f      	str	r7, [r1, #0]
 800a39c:	bf18      	it	ne
 800a39e:	2300      	movne	r3, #0
 800a3a0:	eba6 0807 	sub.w	r8, r6, r7
 800a3a4:	608b      	str	r3, [r1, #8]
 800a3a6:	f1b8 0f00 	cmp.w	r8, #0
 800a3aa:	dd9c      	ble.n	800a2e6 <__sflush_r+0x1a>
 800a3ac:	6a21      	ldr	r1, [r4, #32]
 800a3ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a3b0:	4643      	mov	r3, r8
 800a3b2:	463a      	mov	r2, r7
 800a3b4:	4628      	mov	r0, r5
 800a3b6:	47b0      	blx	r6
 800a3b8:	2800      	cmp	r0, #0
 800a3ba:	dc06      	bgt.n	800a3ca <__sflush_r+0xfe>
 800a3bc:	89a3      	ldrh	r3, [r4, #12]
 800a3be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3c2:	81a3      	strh	r3, [r4, #12]
 800a3c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3c8:	e78e      	b.n	800a2e8 <__sflush_r+0x1c>
 800a3ca:	4407      	add	r7, r0
 800a3cc:	eba8 0800 	sub.w	r8, r8, r0
 800a3d0:	e7e9      	b.n	800a3a6 <__sflush_r+0xda>
 800a3d2:	bf00      	nop
 800a3d4:	20400001 	.word	0x20400001

0800a3d8 <_fflush_r>:
 800a3d8:	b538      	push	{r3, r4, r5, lr}
 800a3da:	690b      	ldr	r3, [r1, #16]
 800a3dc:	4605      	mov	r5, r0
 800a3de:	460c      	mov	r4, r1
 800a3e0:	b913      	cbnz	r3, 800a3e8 <_fflush_r+0x10>
 800a3e2:	2500      	movs	r5, #0
 800a3e4:	4628      	mov	r0, r5
 800a3e6:	bd38      	pop	{r3, r4, r5, pc}
 800a3e8:	b118      	cbz	r0, 800a3f2 <_fflush_r+0x1a>
 800a3ea:	6983      	ldr	r3, [r0, #24]
 800a3ec:	b90b      	cbnz	r3, 800a3f2 <_fflush_r+0x1a>
 800a3ee:	f000 f887 	bl	800a500 <__sinit>
 800a3f2:	4b14      	ldr	r3, [pc, #80]	; (800a444 <_fflush_r+0x6c>)
 800a3f4:	429c      	cmp	r4, r3
 800a3f6:	d11b      	bne.n	800a430 <_fflush_r+0x58>
 800a3f8:	686c      	ldr	r4, [r5, #4]
 800a3fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d0ef      	beq.n	800a3e2 <_fflush_r+0xa>
 800a402:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a404:	07d0      	lsls	r0, r2, #31
 800a406:	d404      	bmi.n	800a412 <_fflush_r+0x3a>
 800a408:	0599      	lsls	r1, r3, #22
 800a40a:	d402      	bmi.n	800a412 <_fflush_r+0x3a>
 800a40c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a40e:	f000 f915 	bl	800a63c <__retarget_lock_acquire_recursive>
 800a412:	4628      	mov	r0, r5
 800a414:	4621      	mov	r1, r4
 800a416:	f7ff ff59 	bl	800a2cc <__sflush_r>
 800a41a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a41c:	07da      	lsls	r2, r3, #31
 800a41e:	4605      	mov	r5, r0
 800a420:	d4e0      	bmi.n	800a3e4 <_fflush_r+0xc>
 800a422:	89a3      	ldrh	r3, [r4, #12]
 800a424:	059b      	lsls	r3, r3, #22
 800a426:	d4dd      	bmi.n	800a3e4 <_fflush_r+0xc>
 800a428:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a42a:	f000 f908 	bl	800a63e <__retarget_lock_release_recursive>
 800a42e:	e7d9      	b.n	800a3e4 <_fflush_r+0xc>
 800a430:	4b05      	ldr	r3, [pc, #20]	; (800a448 <_fflush_r+0x70>)
 800a432:	429c      	cmp	r4, r3
 800a434:	d101      	bne.n	800a43a <_fflush_r+0x62>
 800a436:	68ac      	ldr	r4, [r5, #8]
 800a438:	e7df      	b.n	800a3fa <_fflush_r+0x22>
 800a43a:	4b04      	ldr	r3, [pc, #16]	; (800a44c <_fflush_r+0x74>)
 800a43c:	429c      	cmp	r4, r3
 800a43e:	bf08      	it	eq
 800a440:	68ec      	ldreq	r4, [r5, #12]
 800a442:	e7da      	b.n	800a3fa <_fflush_r+0x22>
 800a444:	0800b0c0 	.word	0x0800b0c0
 800a448:	0800b0e0 	.word	0x0800b0e0
 800a44c:	0800b0a0 	.word	0x0800b0a0

0800a450 <std>:
 800a450:	2300      	movs	r3, #0
 800a452:	b510      	push	{r4, lr}
 800a454:	4604      	mov	r4, r0
 800a456:	e9c0 3300 	strd	r3, r3, [r0]
 800a45a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a45e:	6083      	str	r3, [r0, #8]
 800a460:	8181      	strh	r1, [r0, #12]
 800a462:	6643      	str	r3, [r0, #100]	; 0x64
 800a464:	81c2      	strh	r2, [r0, #14]
 800a466:	6183      	str	r3, [r0, #24]
 800a468:	4619      	mov	r1, r3
 800a46a:	2208      	movs	r2, #8
 800a46c:	305c      	adds	r0, #92	; 0x5c
 800a46e:	f7fc f857 	bl	8006520 <memset>
 800a472:	4b05      	ldr	r3, [pc, #20]	; (800a488 <std+0x38>)
 800a474:	6263      	str	r3, [r4, #36]	; 0x24
 800a476:	4b05      	ldr	r3, [pc, #20]	; (800a48c <std+0x3c>)
 800a478:	62a3      	str	r3, [r4, #40]	; 0x28
 800a47a:	4b05      	ldr	r3, [pc, #20]	; (800a490 <std+0x40>)
 800a47c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a47e:	4b05      	ldr	r3, [pc, #20]	; (800a494 <std+0x44>)
 800a480:	6224      	str	r4, [r4, #32]
 800a482:	6323      	str	r3, [r4, #48]	; 0x30
 800a484:	bd10      	pop	{r4, pc}
 800a486:	bf00      	nop
 800a488:	0800a841 	.word	0x0800a841
 800a48c:	0800a863 	.word	0x0800a863
 800a490:	0800a89b 	.word	0x0800a89b
 800a494:	0800a8bf 	.word	0x0800a8bf

0800a498 <_cleanup_r>:
 800a498:	4901      	ldr	r1, [pc, #4]	; (800a4a0 <_cleanup_r+0x8>)
 800a49a:	f000 b8af 	b.w	800a5fc <_fwalk_reent>
 800a49e:	bf00      	nop
 800a4a0:	0800a3d9 	.word	0x0800a3d9

0800a4a4 <__sfmoreglue>:
 800a4a4:	b570      	push	{r4, r5, r6, lr}
 800a4a6:	2268      	movs	r2, #104	; 0x68
 800a4a8:	1e4d      	subs	r5, r1, #1
 800a4aa:	4355      	muls	r5, r2
 800a4ac:	460e      	mov	r6, r1
 800a4ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a4b2:	f7ff fadd 	bl	8009a70 <_malloc_r>
 800a4b6:	4604      	mov	r4, r0
 800a4b8:	b140      	cbz	r0, 800a4cc <__sfmoreglue+0x28>
 800a4ba:	2100      	movs	r1, #0
 800a4bc:	e9c0 1600 	strd	r1, r6, [r0]
 800a4c0:	300c      	adds	r0, #12
 800a4c2:	60a0      	str	r0, [r4, #8]
 800a4c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a4c8:	f7fc f82a 	bl	8006520 <memset>
 800a4cc:	4620      	mov	r0, r4
 800a4ce:	bd70      	pop	{r4, r5, r6, pc}

0800a4d0 <__sfp_lock_acquire>:
 800a4d0:	4801      	ldr	r0, [pc, #4]	; (800a4d8 <__sfp_lock_acquire+0x8>)
 800a4d2:	f000 b8b3 	b.w	800a63c <__retarget_lock_acquire_recursive>
 800a4d6:	bf00      	nop
 800a4d8:	200004f9 	.word	0x200004f9

0800a4dc <__sfp_lock_release>:
 800a4dc:	4801      	ldr	r0, [pc, #4]	; (800a4e4 <__sfp_lock_release+0x8>)
 800a4de:	f000 b8ae 	b.w	800a63e <__retarget_lock_release_recursive>
 800a4e2:	bf00      	nop
 800a4e4:	200004f9 	.word	0x200004f9

0800a4e8 <__sinit_lock_acquire>:
 800a4e8:	4801      	ldr	r0, [pc, #4]	; (800a4f0 <__sinit_lock_acquire+0x8>)
 800a4ea:	f000 b8a7 	b.w	800a63c <__retarget_lock_acquire_recursive>
 800a4ee:	bf00      	nop
 800a4f0:	200004fa 	.word	0x200004fa

0800a4f4 <__sinit_lock_release>:
 800a4f4:	4801      	ldr	r0, [pc, #4]	; (800a4fc <__sinit_lock_release+0x8>)
 800a4f6:	f000 b8a2 	b.w	800a63e <__retarget_lock_release_recursive>
 800a4fa:	bf00      	nop
 800a4fc:	200004fa 	.word	0x200004fa

0800a500 <__sinit>:
 800a500:	b510      	push	{r4, lr}
 800a502:	4604      	mov	r4, r0
 800a504:	f7ff fff0 	bl	800a4e8 <__sinit_lock_acquire>
 800a508:	69a3      	ldr	r3, [r4, #24]
 800a50a:	b11b      	cbz	r3, 800a514 <__sinit+0x14>
 800a50c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a510:	f7ff bff0 	b.w	800a4f4 <__sinit_lock_release>
 800a514:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a518:	6523      	str	r3, [r4, #80]	; 0x50
 800a51a:	4b13      	ldr	r3, [pc, #76]	; (800a568 <__sinit+0x68>)
 800a51c:	4a13      	ldr	r2, [pc, #76]	; (800a56c <__sinit+0x6c>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	62a2      	str	r2, [r4, #40]	; 0x28
 800a522:	42a3      	cmp	r3, r4
 800a524:	bf04      	itt	eq
 800a526:	2301      	moveq	r3, #1
 800a528:	61a3      	streq	r3, [r4, #24]
 800a52a:	4620      	mov	r0, r4
 800a52c:	f000 f820 	bl	800a570 <__sfp>
 800a530:	6060      	str	r0, [r4, #4]
 800a532:	4620      	mov	r0, r4
 800a534:	f000 f81c 	bl	800a570 <__sfp>
 800a538:	60a0      	str	r0, [r4, #8]
 800a53a:	4620      	mov	r0, r4
 800a53c:	f000 f818 	bl	800a570 <__sfp>
 800a540:	2200      	movs	r2, #0
 800a542:	60e0      	str	r0, [r4, #12]
 800a544:	2104      	movs	r1, #4
 800a546:	6860      	ldr	r0, [r4, #4]
 800a548:	f7ff ff82 	bl	800a450 <std>
 800a54c:	68a0      	ldr	r0, [r4, #8]
 800a54e:	2201      	movs	r2, #1
 800a550:	2109      	movs	r1, #9
 800a552:	f7ff ff7d 	bl	800a450 <std>
 800a556:	68e0      	ldr	r0, [r4, #12]
 800a558:	2202      	movs	r2, #2
 800a55a:	2112      	movs	r1, #18
 800a55c:	f7ff ff78 	bl	800a450 <std>
 800a560:	2301      	movs	r3, #1
 800a562:	61a3      	str	r3, [r4, #24]
 800a564:	e7d2      	b.n	800a50c <__sinit+0xc>
 800a566:	bf00      	nop
 800a568:	0800ac04 	.word	0x0800ac04
 800a56c:	0800a499 	.word	0x0800a499

0800a570 <__sfp>:
 800a570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a572:	4607      	mov	r7, r0
 800a574:	f7ff ffac 	bl	800a4d0 <__sfp_lock_acquire>
 800a578:	4b1e      	ldr	r3, [pc, #120]	; (800a5f4 <__sfp+0x84>)
 800a57a:	681e      	ldr	r6, [r3, #0]
 800a57c:	69b3      	ldr	r3, [r6, #24]
 800a57e:	b913      	cbnz	r3, 800a586 <__sfp+0x16>
 800a580:	4630      	mov	r0, r6
 800a582:	f7ff ffbd 	bl	800a500 <__sinit>
 800a586:	3648      	adds	r6, #72	; 0x48
 800a588:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a58c:	3b01      	subs	r3, #1
 800a58e:	d503      	bpl.n	800a598 <__sfp+0x28>
 800a590:	6833      	ldr	r3, [r6, #0]
 800a592:	b30b      	cbz	r3, 800a5d8 <__sfp+0x68>
 800a594:	6836      	ldr	r6, [r6, #0]
 800a596:	e7f7      	b.n	800a588 <__sfp+0x18>
 800a598:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a59c:	b9d5      	cbnz	r5, 800a5d4 <__sfp+0x64>
 800a59e:	4b16      	ldr	r3, [pc, #88]	; (800a5f8 <__sfp+0x88>)
 800a5a0:	60e3      	str	r3, [r4, #12]
 800a5a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a5a6:	6665      	str	r5, [r4, #100]	; 0x64
 800a5a8:	f000 f847 	bl	800a63a <__retarget_lock_init_recursive>
 800a5ac:	f7ff ff96 	bl	800a4dc <__sfp_lock_release>
 800a5b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a5b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a5b8:	6025      	str	r5, [r4, #0]
 800a5ba:	61a5      	str	r5, [r4, #24]
 800a5bc:	2208      	movs	r2, #8
 800a5be:	4629      	mov	r1, r5
 800a5c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a5c4:	f7fb ffac 	bl	8006520 <memset>
 800a5c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a5cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a5d0:	4620      	mov	r0, r4
 800a5d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5d4:	3468      	adds	r4, #104	; 0x68
 800a5d6:	e7d9      	b.n	800a58c <__sfp+0x1c>
 800a5d8:	2104      	movs	r1, #4
 800a5da:	4638      	mov	r0, r7
 800a5dc:	f7ff ff62 	bl	800a4a4 <__sfmoreglue>
 800a5e0:	4604      	mov	r4, r0
 800a5e2:	6030      	str	r0, [r6, #0]
 800a5e4:	2800      	cmp	r0, #0
 800a5e6:	d1d5      	bne.n	800a594 <__sfp+0x24>
 800a5e8:	f7ff ff78 	bl	800a4dc <__sfp_lock_release>
 800a5ec:	230c      	movs	r3, #12
 800a5ee:	603b      	str	r3, [r7, #0]
 800a5f0:	e7ee      	b.n	800a5d0 <__sfp+0x60>
 800a5f2:	bf00      	nop
 800a5f4:	0800ac04 	.word	0x0800ac04
 800a5f8:	ffff0001 	.word	0xffff0001

0800a5fc <_fwalk_reent>:
 800a5fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a600:	4606      	mov	r6, r0
 800a602:	4688      	mov	r8, r1
 800a604:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a608:	2700      	movs	r7, #0
 800a60a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a60e:	f1b9 0901 	subs.w	r9, r9, #1
 800a612:	d505      	bpl.n	800a620 <_fwalk_reent+0x24>
 800a614:	6824      	ldr	r4, [r4, #0]
 800a616:	2c00      	cmp	r4, #0
 800a618:	d1f7      	bne.n	800a60a <_fwalk_reent+0xe>
 800a61a:	4638      	mov	r0, r7
 800a61c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a620:	89ab      	ldrh	r3, [r5, #12]
 800a622:	2b01      	cmp	r3, #1
 800a624:	d907      	bls.n	800a636 <_fwalk_reent+0x3a>
 800a626:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a62a:	3301      	adds	r3, #1
 800a62c:	d003      	beq.n	800a636 <_fwalk_reent+0x3a>
 800a62e:	4629      	mov	r1, r5
 800a630:	4630      	mov	r0, r6
 800a632:	47c0      	blx	r8
 800a634:	4307      	orrs	r7, r0
 800a636:	3568      	adds	r5, #104	; 0x68
 800a638:	e7e9      	b.n	800a60e <_fwalk_reent+0x12>

0800a63a <__retarget_lock_init_recursive>:
 800a63a:	4770      	bx	lr

0800a63c <__retarget_lock_acquire_recursive>:
 800a63c:	4770      	bx	lr

0800a63e <__retarget_lock_release_recursive>:
 800a63e:	4770      	bx	lr

0800a640 <__swhatbuf_r>:
 800a640:	b570      	push	{r4, r5, r6, lr}
 800a642:	460e      	mov	r6, r1
 800a644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a648:	2900      	cmp	r1, #0
 800a64a:	b096      	sub	sp, #88	; 0x58
 800a64c:	4614      	mov	r4, r2
 800a64e:	461d      	mov	r5, r3
 800a650:	da08      	bge.n	800a664 <__swhatbuf_r+0x24>
 800a652:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a656:	2200      	movs	r2, #0
 800a658:	602a      	str	r2, [r5, #0]
 800a65a:	061a      	lsls	r2, r3, #24
 800a65c:	d410      	bmi.n	800a680 <__swhatbuf_r+0x40>
 800a65e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a662:	e00e      	b.n	800a682 <__swhatbuf_r+0x42>
 800a664:	466a      	mov	r2, sp
 800a666:	f000 f951 	bl	800a90c <_fstat_r>
 800a66a:	2800      	cmp	r0, #0
 800a66c:	dbf1      	blt.n	800a652 <__swhatbuf_r+0x12>
 800a66e:	9a01      	ldr	r2, [sp, #4]
 800a670:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a674:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a678:	425a      	negs	r2, r3
 800a67a:	415a      	adcs	r2, r3
 800a67c:	602a      	str	r2, [r5, #0]
 800a67e:	e7ee      	b.n	800a65e <__swhatbuf_r+0x1e>
 800a680:	2340      	movs	r3, #64	; 0x40
 800a682:	2000      	movs	r0, #0
 800a684:	6023      	str	r3, [r4, #0]
 800a686:	b016      	add	sp, #88	; 0x58
 800a688:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a68c <__smakebuf_r>:
 800a68c:	898b      	ldrh	r3, [r1, #12]
 800a68e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a690:	079d      	lsls	r5, r3, #30
 800a692:	4606      	mov	r6, r0
 800a694:	460c      	mov	r4, r1
 800a696:	d507      	bpl.n	800a6a8 <__smakebuf_r+0x1c>
 800a698:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a69c:	6023      	str	r3, [r4, #0]
 800a69e:	6123      	str	r3, [r4, #16]
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	6163      	str	r3, [r4, #20]
 800a6a4:	b002      	add	sp, #8
 800a6a6:	bd70      	pop	{r4, r5, r6, pc}
 800a6a8:	ab01      	add	r3, sp, #4
 800a6aa:	466a      	mov	r2, sp
 800a6ac:	f7ff ffc8 	bl	800a640 <__swhatbuf_r>
 800a6b0:	9900      	ldr	r1, [sp, #0]
 800a6b2:	4605      	mov	r5, r0
 800a6b4:	4630      	mov	r0, r6
 800a6b6:	f7ff f9db 	bl	8009a70 <_malloc_r>
 800a6ba:	b948      	cbnz	r0, 800a6d0 <__smakebuf_r+0x44>
 800a6bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6c0:	059a      	lsls	r2, r3, #22
 800a6c2:	d4ef      	bmi.n	800a6a4 <__smakebuf_r+0x18>
 800a6c4:	f023 0303 	bic.w	r3, r3, #3
 800a6c8:	f043 0302 	orr.w	r3, r3, #2
 800a6cc:	81a3      	strh	r3, [r4, #12]
 800a6ce:	e7e3      	b.n	800a698 <__smakebuf_r+0xc>
 800a6d0:	4b0d      	ldr	r3, [pc, #52]	; (800a708 <__smakebuf_r+0x7c>)
 800a6d2:	62b3      	str	r3, [r6, #40]	; 0x28
 800a6d4:	89a3      	ldrh	r3, [r4, #12]
 800a6d6:	6020      	str	r0, [r4, #0]
 800a6d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6dc:	81a3      	strh	r3, [r4, #12]
 800a6de:	9b00      	ldr	r3, [sp, #0]
 800a6e0:	6163      	str	r3, [r4, #20]
 800a6e2:	9b01      	ldr	r3, [sp, #4]
 800a6e4:	6120      	str	r0, [r4, #16]
 800a6e6:	b15b      	cbz	r3, 800a700 <__smakebuf_r+0x74>
 800a6e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6ec:	4630      	mov	r0, r6
 800a6ee:	f000 f91f 	bl	800a930 <_isatty_r>
 800a6f2:	b128      	cbz	r0, 800a700 <__smakebuf_r+0x74>
 800a6f4:	89a3      	ldrh	r3, [r4, #12]
 800a6f6:	f023 0303 	bic.w	r3, r3, #3
 800a6fa:	f043 0301 	orr.w	r3, r3, #1
 800a6fe:	81a3      	strh	r3, [r4, #12]
 800a700:	89a0      	ldrh	r0, [r4, #12]
 800a702:	4305      	orrs	r5, r0
 800a704:	81a5      	strh	r5, [r4, #12]
 800a706:	e7cd      	b.n	800a6a4 <__smakebuf_r+0x18>
 800a708:	0800a499 	.word	0x0800a499

0800a70c <memmove>:
 800a70c:	4288      	cmp	r0, r1
 800a70e:	b510      	push	{r4, lr}
 800a710:	eb01 0402 	add.w	r4, r1, r2
 800a714:	d902      	bls.n	800a71c <memmove+0x10>
 800a716:	4284      	cmp	r4, r0
 800a718:	4623      	mov	r3, r4
 800a71a:	d807      	bhi.n	800a72c <memmove+0x20>
 800a71c:	1e43      	subs	r3, r0, #1
 800a71e:	42a1      	cmp	r1, r4
 800a720:	d008      	beq.n	800a734 <memmove+0x28>
 800a722:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a726:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a72a:	e7f8      	b.n	800a71e <memmove+0x12>
 800a72c:	4402      	add	r2, r0
 800a72e:	4601      	mov	r1, r0
 800a730:	428a      	cmp	r2, r1
 800a732:	d100      	bne.n	800a736 <memmove+0x2a>
 800a734:	bd10      	pop	{r4, pc}
 800a736:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a73a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a73e:	e7f7      	b.n	800a730 <memmove+0x24>

0800a740 <__malloc_lock>:
 800a740:	4801      	ldr	r0, [pc, #4]	; (800a748 <__malloc_lock+0x8>)
 800a742:	f7ff bf7b 	b.w	800a63c <__retarget_lock_acquire_recursive>
 800a746:	bf00      	nop
 800a748:	200004f8 	.word	0x200004f8

0800a74c <__malloc_unlock>:
 800a74c:	4801      	ldr	r0, [pc, #4]	; (800a754 <__malloc_unlock+0x8>)
 800a74e:	f7ff bf76 	b.w	800a63e <__retarget_lock_release_recursive>
 800a752:	bf00      	nop
 800a754:	200004f8 	.word	0x200004f8

0800a758 <_realloc_r>:
 800a758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a75c:	4680      	mov	r8, r0
 800a75e:	4614      	mov	r4, r2
 800a760:	460e      	mov	r6, r1
 800a762:	b921      	cbnz	r1, 800a76e <_realloc_r+0x16>
 800a764:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a768:	4611      	mov	r1, r2
 800a76a:	f7ff b981 	b.w	8009a70 <_malloc_r>
 800a76e:	b92a      	cbnz	r2, 800a77c <_realloc_r+0x24>
 800a770:	f7ff f912 	bl	8009998 <_free_r>
 800a774:	4625      	mov	r5, r4
 800a776:	4628      	mov	r0, r5
 800a778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a77c:	f000 f8fa 	bl	800a974 <_malloc_usable_size_r>
 800a780:	4284      	cmp	r4, r0
 800a782:	4607      	mov	r7, r0
 800a784:	d802      	bhi.n	800a78c <_realloc_r+0x34>
 800a786:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a78a:	d812      	bhi.n	800a7b2 <_realloc_r+0x5a>
 800a78c:	4621      	mov	r1, r4
 800a78e:	4640      	mov	r0, r8
 800a790:	f7ff f96e 	bl	8009a70 <_malloc_r>
 800a794:	4605      	mov	r5, r0
 800a796:	2800      	cmp	r0, #0
 800a798:	d0ed      	beq.n	800a776 <_realloc_r+0x1e>
 800a79a:	42bc      	cmp	r4, r7
 800a79c:	4622      	mov	r2, r4
 800a79e:	4631      	mov	r1, r6
 800a7a0:	bf28      	it	cs
 800a7a2:	463a      	movcs	r2, r7
 800a7a4:	f7fe fc12 	bl	8008fcc <memcpy>
 800a7a8:	4631      	mov	r1, r6
 800a7aa:	4640      	mov	r0, r8
 800a7ac:	f7ff f8f4 	bl	8009998 <_free_r>
 800a7b0:	e7e1      	b.n	800a776 <_realloc_r+0x1e>
 800a7b2:	4635      	mov	r5, r6
 800a7b4:	e7df      	b.n	800a776 <_realloc_r+0x1e>

0800a7b6 <_raise_r>:
 800a7b6:	291f      	cmp	r1, #31
 800a7b8:	b538      	push	{r3, r4, r5, lr}
 800a7ba:	4604      	mov	r4, r0
 800a7bc:	460d      	mov	r5, r1
 800a7be:	d904      	bls.n	800a7ca <_raise_r+0x14>
 800a7c0:	2316      	movs	r3, #22
 800a7c2:	6003      	str	r3, [r0, #0]
 800a7c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a7c8:	bd38      	pop	{r3, r4, r5, pc}
 800a7ca:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a7cc:	b112      	cbz	r2, 800a7d4 <_raise_r+0x1e>
 800a7ce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a7d2:	b94b      	cbnz	r3, 800a7e8 <_raise_r+0x32>
 800a7d4:	4620      	mov	r0, r4
 800a7d6:	f000 f831 	bl	800a83c <_getpid_r>
 800a7da:	462a      	mov	r2, r5
 800a7dc:	4601      	mov	r1, r0
 800a7de:	4620      	mov	r0, r4
 800a7e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7e4:	f000 b818 	b.w	800a818 <_kill_r>
 800a7e8:	2b01      	cmp	r3, #1
 800a7ea:	d00a      	beq.n	800a802 <_raise_r+0x4c>
 800a7ec:	1c59      	adds	r1, r3, #1
 800a7ee:	d103      	bne.n	800a7f8 <_raise_r+0x42>
 800a7f0:	2316      	movs	r3, #22
 800a7f2:	6003      	str	r3, [r0, #0]
 800a7f4:	2001      	movs	r0, #1
 800a7f6:	e7e7      	b.n	800a7c8 <_raise_r+0x12>
 800a7f8:	2400      	movs	r4, #0
 800a7fa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a7fe:	4628      	mov	r0, r5
 800a800:	4798      	blx	r3
 800a802:	2000      	movs	r0, #0
 800a804:	e7e0      	b.n	800a7c8 <_raise_r+0x12>
	...

0800a808 <raise>:
 800a808:	4b02      	ldr	r3, [pc, #8]	; (800a814 <raise+0xc>)
 800a80a:	4601      	mov	r1, r0
 800a80c:	6818      	ldr	r0, [r3, #0]
 800a80e:	f7ff bfd2 	b.w	800a7b6 <_raise_r>
 800a812:	bf00      	nop
 800a814:	20000060 	.word	0x20000060

0800a818 <_kill_r>:
 800a818:	b538      	push	{r3, r4, r5, lr}
 800a81a:	4d07      	ldr	r5, [pc, #28]	; (800a838 <_kill_r+0x20>)
 800a81c:	2300      	movs	r3, #0
 800a81e:	4604      	mov	r4, r0
 800a820:	4608      	mov	r0, r1
 800a822:	4611      	mov	r1, r2
 800a824:	602b      	str	r3, [r5, #0]
 800a826:	f7f8 fbdd 	bl	8002fe4 <_kill>
 800a82a:	1c43      	adds	r3, r0, #1
 800a82c:	d102      	bne.n	800a834 <_kill_r+0x1c>
 800a82e:	682b      	ldr	r3, [r5, #0]
 800a830:	b103      	cbz	r3, 800a834 <_kill_r+0x1c>
 800a832:	6023      	str	r3, [r4, #0]
 800a834:	bd38      	pop	{r3, r4, r5, pc}
 800a836:	bf00      	nop
 800a838:	200004fc 	.word	0x200004fc

0800a83c <_getpid_r>:
 800a83c:	f7f8 bbca 	b.w	8002fd4 <_getpid>

0800a840 <__sread>:
 800a840:	b510      	push	{r4, lr}
 800a842:	460c      	mov	r4, r1
 800a844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a848:	f000 f89c 	bl	800a984 <_read_r>
 800a84c:	2800      	cmp	r0, #0
 800a84e:	bfab      	itete	ge
 800a850:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a852:	89a3      	ldrhlt	r3, [r4, #12]
 800a854:	181b      	addge	r3, r3, r0
 800a856:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a85a:	bfac      	ite	ge
 800a85c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a85e:	81a3      	strhlt	r3, [r4, #12]
 800a860:	bd10      	pop	{r4, pc}

0800a862 <__swrite>:
 800a862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a866:	461f      	mov	r7, r3
 800a868:	898b      	ldrh	r3, [r1, #12]
 800a86a:	05db      	lsls	r3, r3, #23
 800a86c:	4605      	mov	r5, r0
 800a86e:	460c      	mov	r4, r1
 800a870:	4616      	mov	r6, r2
 800a872:	d505      	bpl.n	800a880 <__swrite+0x1e>
 800a874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a878:	2302      	movs	r3, #2
 800a87a:	2200      	movs	r2, #0
 800a87c:	f000 f868 	bl	800a950 <_lseek_r>
 800a880:	89a3      	ldrh	r3, [r4, #12]
 800a882:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a886:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a88a:	81a3      	strh	r3, [r4, #12]
 800a88c:	4632      	mov	r2, r6
 800a88e:	463b      	mov	r3, r7
 800a890:	4628      	mov	r0, r5
 800a892:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a896:	f000 b817 	b.w	800a8c8 <_write_r>

0800a89a <__sseek>:
 800a89a:	b510      	push	{r4, lr}
 800a89c:	460c      	mov	r4, r1
 800a89e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8a2:	f000 f855 	bl	800a950 <_lseek_r>
 800a8a6:	1c43      	adds	r3, r0, #1
 800a8a8:	89a3      	ldrh	r3, [r4, #12]
 800a8aa:	bf15      	itete	ne
 800a8ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800a8ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a8b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a8b6:	81a3      	strheq	r3, [r4, #12]
 800a8b8:	bf18      	it	ne
 800a8ba:	81a3      	strhne	r3, [r4, #12]
 800a8bc:	bd10      	pop	{r4, pc}

0800a8be <__sclose>:
 800a8be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8c2:	f000 b813 	b.w	800a8ec <_close_r>
	...

0800a8c8 <_write_r>:
 800a8c8:	b538      	push	{r3, r4, r5, lr}
 800a8ca:	4d07      	ldr	r5, [pc, #28]	; (800a8e8 <_write_r+0x20>)
 800a8cc:	4604      	mov	r4, r0
 800a8ce:	4608      	mov	r0, r1
 800a8d0:	4611      	mov	r1, r2
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	602a      	str	r2, [r5, #0]
 800a8d6:	461a      	mov	r2, r3
 800a8d8:	f7f8 fbbb 	bl	8003052 <_write>
 800a8dc:	1c43      	adds	r3, r0, #1
 800a8de:	d102      	bne.n	800a8e6 <_write_r+0x1e>
 800a8e0:	682b      	ldr	r3, [r5, #0]
 800a8e2:	b103      	cbz	r3, 800a8e6 <_write_r+0x1e>
 800a8e4:	6023      	str	r3, [r4, #0]
 800a8e6:	bd38      	pop	{r3, r4, r5, pc}
 800a8e8:	200004fc 	.word	0x200004fc

0800a8ec <_close_r>:
 800a8ec:	b538      	push	{r3, r4, r5, lr}
 800a8ee:	4d06      	ldr	r5, [pc, #24]	; (800a908 <_close_r+0x1c>)
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	4604      	mov	r4, r0
 800a8f4:	4608      	mov	r0, r1
 800a8f6:	602b      	str	r3, [r5, #0]
 800a8f8:	f7f8 fbc7 	bl	800308a <_close>
 800a8fc:	1c43      	adds	r3, r0, #1
 800a8fe:	d102      	bne.n	800a906 <_close_r+0x1a>
 800a900:	682b      	ldr	r3, [r5, #0]
 800a902:	b103      	cbz	r3, 800a906 <_close_r+0x1a>
 800a904:	6023      	str	r3, [r4, #0]
 800a906:	bd38      	pop	{r3, r4, r5, pc}
 800a908:	200004fc 	.word	0x200004fc

0800a90c <_fstat_r>:
 800a90c:	b538      	push	{r3, r4, r5, lr}
 800a90e:	4d07      	ldr	r5, [pc, #28]	; (800a92c <_fstat_r+0x20>)
 800a910:	2300      	movs	r3, #0
 800a912:	4604      	mov	r4, r0
 800a914:	4608      	mov	r0, r1
 800a916:	4611      	mov	r1, r2
 800a918:	602b      	str	r3, [r5, #0]
 800a91a:	f7f8 fbc2 	bl	80030a2 <_fstat>
 800a91e:	1c43      	adds	r3, r0, #1
 800a920:	d102      	bne.n	800a928 <_fstat_r+0x1c>
 800a922:	682b      	ldr	r3, [r5, #0]
 800a924:	b103      	cbz	r3, 800a928 <_fstat_r+0x1c>
 800a926:	6023      	str	r3, [r4, #0]
 800a928:	bd38      	pop	{r3, r4, r5, pc}
 800a92a:	bf00      	nop
 800a92c:	200004fc 	.word	0x200004fc

0800a930 <_isatty_r>:
 800a930:	b538      	push	{r3, r4, r5, lr}
 800a932:	4d06      	ldr	r5, [pc, #24]	; (800a94c <_isatty_r+0x1c>)
 800a934:	2300      	movs	r3, #0
 800a936:	4604      	mov	r4, r0
 800a938:	4608      	mov	r0, r1
 800a93a:	602b      	str	r3, [r5, #0]
 800a93c:	f7f8 fbc1 	bl	80030c2 <_isatty>
 800a940:	1c43      	adds	r3, r0, #1
 800a942:	d102      	bne.n	800a94a <_isatty_r+0x1a>
 800a944:	682b      	ldr	r3, [r5, #0]
 800a946:	b103      	cbz	r3, 800a94a <_isatty_r+0x1a>
 800a948:	6023      	str	r3, [r4, #0]
 800a94a:	bd38      	pop	{r3, r4, r5, pc}
 800a94c:	200004fc 	.word	0x200004fc

0800a950 <_lseek_r>:
 800a950:	b538      	push	{r3, r4, r5, lr}
 800a952:	4d07      	ldr	r5, [pc, #28]	; (800a970 <_lseek_r+0x20>)
 800a954:	4604      	mov	r4, r0
 800a956:	4608      	mov	r0, r1
 800a958:	4611      	mov	r1, r2
 800a95a:	2200      	movs	r2, #0
 800a95c:	602a      	str	r2, [r5, #0]
 800a95e:	461a      	mov	r2, r3
 800a960:	f7f8 fbba 	bl	80030d8 <_lseek>
 800a964:	1c43      	adds	r3, r0, #1
 800a966:	d102      	bne.n	800a96e <_lseek_r+0x1e>
 800a968:	682b      	ldr	r3, [r5, #0]
 800a96a:	b103      	cbz	r3, 800a96e <_lseek_r+0x1e>
 800a96c:	6023      	str	r3, [r4, #0]
 800a96e:	bd38      	pop	{r3, r4, r5, pc}
 800a970:	200004fc 	.word	0x200004fc

0800a974 <_malloc_usable_size_r>:
 800a974:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a978:	1f18      	subs	r0, r3, #4
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	bfbc      	itt	lt
 800a97e:	580b      	ldrlt	r3, [r1, r0]
 800a980:	18c0      	addlt	r0, r0, r3
 800a982:	4770      	bx	lr

0800a984 <_read_r>:
 800a984:	b538      	push	{r3, r4, r5, lr}
 800a986:	4d07      	ldr	r5, [pc, #28]	; (800a9a4 <_read_r+0x20>)
 800a988:	4604      	mov	r4, r0
 800a98a:	4608      	mov	r0, r1
 800a98c:	4611      	mov	r1, r2
 800a98e:	2200      	movs	r2, #0
 800a990:	602a      	str	r2, [r5, #0]
 800a992:	461a      	mov	r2, r3
 800a994:	f7f8 fb40 	bl	8003018 <_read>
 800a998:	1c43      	adds	r3, r0, #1
 800a99a:	d102      	bne.n	800a9a2 <_read_r+0x1e>
 800a99c:	682b      	ldr	r3, [r5, #0]
 800a99e:	b103      	cbz	r3, 800a9a2 <_read_r+0x1e>
 800a9a0:	6023      	str	r3, [r4, #0]
 800a9a2:	bd38      	pop	{r3, r4, r5, pc}
 800a9a4:	200004fc 	.word	0x200004fc

0800a9a8 <sqrt>:
 800a9a8:	b538      	push	{r3, r4, r5, lr}
 800a9aa:	ed2d 8b02 	vpush	{d8}
 800a9ae:	ec55 4b10 	vmov	r4, r5, d0
 800a9b2:	f000 f825 	bl	800aa00 <__ieee754_sqrt>
 800a9b6:	4622      	mov	r2, r4
 800a9b8:	462b      	mov	r3, r5
 800a9ba:	4620      	mov	r0, r4
 800a9bc:	4629      	mov	r1, r5
 800a9be:	eeb0 8a40 	vmov.f32	s16, s0
 800a9c2:	eef0 8a60 	vmov.f32	s17, s1
 800a9c6:	f7f6 f8e1 	bl	8000b8c <__aeabi_dcmpun>
 800a9ca:	b990      	cbnz	r0, 800a9f2 <sqrt+0x4a>
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	4620      	mov	r0, r4
 800a9d2:	4629      	mov	r1, r5
 800a9d4:	f7f6 f8b2 	bl	8000b3c <__aeabi_dcmplt>
 800a9d8:	b158      	cbz	r0, 800a9f2 <sqrt+0x4a>
 800a9da:	f7fb fd77 	bl	80064cc <__errno>
 800a9de:	2321      	movs	r3, #33	; 0x21
 800a9e0:	6003      	str	r3, [r0, #0]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	4610      	mov	r0, r2
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	f7f5 ff5f 	bl	80008ac <__aeabi_ddiv>
 800a9ee:	ec41 0b18 	vmov	d8, r0, r1
 800a9f2:	eeb0 0a48 	vmov.f32	s0, s16
 800a9f6:	eef0 0a68 	vmov.f32	s1, s17
 800a9fa:	ecbd 8b02 	vpop	{d8}
 800a9fe:	bd38      	pop	{r3, r4, r5, pc}

0800aa00 <__ieee754_sqrt>:
 800aa00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa04:	ec55 4b10 	vmov	r4, r5, d0
 800aa08:	4e55      	ldr	r6, [pc, #340]	; (800ab60 <__ieee754_sqrt+0x160>)
 800aa0a:	43ae      	bics	r6, r5
 800aa0c:	ee10 0a10 	vmov	r0, s0
 800aa10:	ee10 3a10 	vmov	r3, s0
 800aa14:	462a      	mov	r2, r5
 800aa16:	4629      	mov	r1, r5
 800aa18:	d110      	bne.n	800aa3c <__ieee754_sqrt+0x3c>
 800aa1a:	ee10 2a10 	vmov	r2, s0
 800aa1e:	462b      	mov	r3, r5
 800aa20:	f7f5 fe1a 	bl	8000658 <__aeabi_dmul>
 800aa24:	4602      	mov	r2, r0
 800aa26:	460b      	mov	r3, r1
 800aa28:	4620      	mov	r0, r4
 800aa2a:	4629      	mov	r1, r5
 800aa2c:	f7f5 fc5e 	bl	80002ec <__adddf3>
 800aa30:	4604      	mov	r4, r0
 800aa32:	460d      	mov	r5, r1
 800aa34:	ec45 4b10 	vmov	d0, r4, r5
 800aa38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa3c:	2d00      	cmp	r5, #0
 800aa3e:	dc10      	bgt.n	800aa62 <__ieee754_sqrt+0x62>
 800aa40:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800aa44:	4330      	orrs	r0, r6
 800aa46:	d0f5      	beq.n	800aa34 <__ieee754_sqrt+0x34>
 800aa48:	b15d      	cbz	r5, 800aa62 <__ieee754_sqrt+0x62>
 800aa4a:	ee10 2a10 	vmov	r2, s0
 800aa4e:	462b      	mov	r3, r5
 800aa50:	ee10 0a10 	vmov	r0, s0
 800aa54:	f7f5 fc48 	bl	80002e8 <__aeabi_dsub>
 800aa58:	4602      	mov	r2, r0
 800aa5a:	460b      	mov	r3, r1
 800aa5c:	f7f5 ff26 	bl	80008ac <__aeabi_ddiv>
 800aa60:	e7e6      	b.n	800aa30 <__ieee754_sqrt+0x30>
 800aa62:	1512      	asrs	r2, r2, #20
 800aa64:	d074      	beq.n	800ab50 <__ieee754_sqrt+0x150>
 800aa66:	07d4      	lsls	r4, r2, #31
 800aa68:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800aa6c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800aa70:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800aa74:	bf5e      	ittt	pl
 800aa76:	0fda      	lsrpl	r2, r3, #31
 800aa78:	005b      	lslpl	r3, r3, #1
 800aa7a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800aa7e:	2400      	movs	r4, #0
 800aa80:	0fda      	lsrs	r2, r3, #31
 800aa82:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800aa86:	107f      	asrs	r7, r7, #1
 800aa88:	005b      	lsls	r3, r3, #1
 800aa8a:	2516      	movs	r5, #22
 800aa8c:	4620      	mov	r0, r4
 800aa8e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800aa92:	1886      	adds	r6, r0, r2
 800aa94:	428e      	cmp	r6, r1
 800aa96:	bfde      	ittt	le
 800aa98:	1b89      	suble	r1, r1, r6
 800aa9a:	18b0      	addle	r0, r6, r2
 800aa9c:	18a4      	addle	r4, r4, r2
 800aa9e:	0049      	lsls	r1, r1, #1
 800aaa0:	3d01      	subs	r5, #1
 800aaa2:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800aaa6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800aaaa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800aaae:	d1f0      	bne.n	800aa92 <__ieee754_sqrt+0x92>
 800aab0:	462a      	mov	r2, r5
 800aab2:	f04f 0e20 	mov.w	lr, #32
 800aab6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800aaba:	4281      	cmp	r1, r0
 800aabc:	eb06 0c05 	add.w	ip, r6, r5
 800aac0:	dc02      	bgt.n	800aac8 <__ieee754_sqrt+0xc8>
 800aac2:	d113      	bne.n	800aaec <__ieee754_sqrt+0xec>
 800aac4:	459c      	cmp	ip, r3
 800aac6:	d811      	bhi.n	800aaec <__ieee754_sqrt+0xec>
 800aac8:	f1bc 0f00 	cmp.w	ip, #0
 800aacc:	eb0c 0506 	add.w	r5, ip, r6
 800aad0:	da43      	bge.n	800ab5a <__ieee754_sqrt+0x15a>
 800aad2:	2d00      	cmp	r5, #0
 800aad4:	db41      	blt.n	800ab5a <__ieee754_sqrt+0x15a>
 800aad6:	f100 0801 	add.w	r8, r0, #1
 800aada:	1a09      	subs	r1, r1, r0
 800aadc:	459c      	cmp	ip, r3
 800aade:	bf88      	it	hi
 800aae0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800aae4:	eba3 030c 	sub.w	r3, r3, ip
 800aae8:	4432      	add	r2, r6
 800aaea:	4640      	mov	r0, r8
 800aaec:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800aaf0:	f1be 0e01 	subs.w	lr, lr, #1
 800aaf4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800aaf8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800aafc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ab00:	d1db      	bne.n	800aaba <__ieee754_sqrt+0xba>
 800ab02:	430b      	orrs	r3, r1
 800ab04:	d006      	beq.n	800ab14 <__ieee754_sqrt+0x114>
 800ab06:	1c50      	adds	r0, r2, #1
 800ab08:	bf13      	iteet	ne
 800ab0a:	3201      	addne	r2, #1
 800ab0c:	3401      	addeq	r4, #1
 800ab0e:	4672      	moveq	r2, lr
 800ab10:	f022 0201 	bicne.w	r2, r2, #1
 800ab14:	1063      	asrs	r3, r4, #1
 800ab16:	0852      	lsrs	r2, r2, #1
 800ab18:	07e1      	lsls	r1, r4, #31
 800ab1a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ab1e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ab22:	bf48      	it	mi
 800ab24:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800ab28:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800ab2c:	4614      	mov	r4, r2
 800ab2e:	e781      	b.n	800aa34 <__ieee754_sqrt+0x34>
 800ab30:	0ad9      	lsrs	r1, r3, #11
 800ab32:	3815      	subs	r0, #21
 800ab34:	055b      	lsls	r3, r3, #21
 800ab36:	2900      	cmp	r1, #0
 800ab38:	d0fa      	beq.n	800ab30 <__ieee754_sqrt+0x130>
 800ab3a:	02cd      	lsls	r5, r1, #11
 800ab3c:	d50a      	bpl.n	800ab54 <__ieee754_sqrt+0x154>
 800ab3e:	f1c2 0420 	rsb	r4, r2, #32
 800ab42:	fa23 f404 	lsr.w	r4, r3, r4
 800ab46:	1e55      	subs	r5, r2, #1
 800ab48:	4093      	lsls	r3, r2
 800ab4a:	4321      	orrs	r1, r4
 800ab4c:	1b42      	subs	r2, r0, r5
 800ab4e:	e78a      	b.n	800aa66 <__ieee754_sqrt+0x66>
 800ab50:	4610      	mov	r0, r2
 800ab52:	e7f0      	b.n	800ab36 <__ieee754_sqrt+0x136>
 800ab54:	0049      	lsls	r1, r1, #1
 800ab56:	3201      	adds	r2, #1
 800ab58:	e7ef      	b.n	800ab3a <__ieee754_sqrt+0x13a>
 800ab5a:	4680      	mov	r8, r0
 800ab5c:	e7bd      	b.n	800aada <__ieee754_sqrt+0xda>
 800ab5e:	bf00      	nop
 800ab60:	7ff00000 	.word	0x7ff00000

0800ab64 <_init>:
 800ab64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab66:	bf00      	nop
 800ab68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab6a:	bc08      	pop	{r3}
 800ab6c:	469e      	mov	lr, r3
 800ab6e:	4770      	bx	lr

0800ab70 <_fini>:
 800ab70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab72:	bf00      	nop
 800ab74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab76:	bc08      	pop	{r3}
 800ab78:	469e      	mov	lr, r3
 800ab7a:	4770      	bx	lr
